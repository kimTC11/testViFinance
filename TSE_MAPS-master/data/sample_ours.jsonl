{"method": "// Focal method:\npublic class ShapeList extends AbstractObjectList { public Object clone() throws CloneNotSupportedException { return super.clone(); } ShapeList(); Shape getShape(int index); void setShape(int index, Shape shape); Object clone(); boolean equals(Object obj); int hashCode(); }\n", "projects": [{"project": "Chart", "id": 6}]}
{"method": "// Focal method:\npublic class ShapeList extends AbstractObjectList { public int hashCode() { return super.hashCode(); } ShapeList(); Shape getShape(int index); void setShape(int index, Shape shape); Object clone(); boolean equals(Object obj); int hashCode(); }\n", "projects": [{"project": "Chart", "id": 6}]}
{"method": "// Focal method:\npublic class ShapeList extends AbstractObjectList { public Shape getShape(int index) { return (Shape) get(index); } ShapeList(); Shape getShape(int index); void setShape(int index, Shape shape); Object clone(); boolean equals(Object obj); int hashCode(); }\n", "projects": [{"project": "Chart", "id": 6}]}
{"method": "// Focal method:\npublic class ShapeList extends AbstractObjectList { public boolean equals(Object obj) { if (obj == this) { return true; } if (!(obj instanceof ShapeList)) { return false; } ShapeList that = (ShapeList) obj; int listSize = size(); for (int i = 0; i < listSize; i++) { if (!ShapeUtilities.equal((Shape) get(i), (Shape) that.get(i))) { return false; } } return true; } ShapeList(); Shape getShape(int index); void setShape(int index, Shape shape); Object clone(); boolean equals(Object obj); int hashCode(); }\n", "projects": [{"project": "Chart", "id": 6}]}
{"method": "// Focal method:\npublic class ShapeList extends AbstractObjectList { public void setShape(int index, Shape shape) { set(index, shape); } ShapeList(); Shape getShape(int index); void setShape(int index, Shape shape); Object clone(); boolean equals(Object obj); int hashCode(); }\n", "projects": [{"project": "Chart", "id": 6}]}
{"method": "// Focal method:\npublic class DefaultBoxAndWhiskerCategoryDataset extends AbstractDataset\n        implements BoxAndWhiskerCategoryDataset, RangeInfo, PublicCloneable { public double getRangeLowerBound(boolean includeInterval) { return this.minimumRangeValue; } DefaultBoxAndWhiskerCategoryDataset(); void add(List list, Comparable rowKey, Comparable columnKey); void add(BoxAndWhiskerItem item, Comparable rowKey, Comparable columnKey); BoxAndWhiskerItem getItem(int row, int column); Number getValue(int row, int column); Number getValue(Comparable rowKey, Comparable columnKey); Number getMeanValue(int row, int column); Number getMeanValue(Comparable rowKey, Comparable columnKey); Number getMedianValue(int row, int column); Number getMedianValue(Comparable rowKey, Comparable columnKey); Number getQ1Value(int row, int column); Number getQ1Value(Comparable rowKey, Comparable columnKey); Number getQ3Value(int row, int column); Number getQ3Value(Comparable rowKey, Comparable columnKey); int getColumnIndex(Comparable key); Comparable getColumnKey(int column); List getColumnKeys(); int getRowIndex(Comparable key); Comparable getRowKey(int row); List getRowKeys(); int getRowCount(); int getColumnCount(); double getRangeLowerBound(boolean includeInterval); double getRangeUpperBound(boolean includeInterval); Range getRangeBounds(boolean includeInterval); Number getMinRegularValue(int row, int column); Number getMinRegularValue(Comparable rowKey, Comparable columnKey); Number getMaxRegularValue(int row, int column); Number getMaxRegularValue(Comparable rowKey, Comparable columnKey); Number getMinOutlier(int row, int column); Number getMinOutlier(Comparable rowKey, Comparable columnKey); Number getMaxOutlier(int row, int column); Number getMaxOutlier(Comparable rowKey, Comparable columnKey); List getOutliers(int row, int column); List getOutliers(Comparable rowKey, Comparable columnKey); boolean equals(Object obj); Object clone(); }\n", "projects": [{"project": "Chart", "id": 21}]}
{"method": "// Focal method:\npublic class DefaultBoxAndWhiskerCategoryDataset extends AbstractDataset\n        implements BoxAndWhiskerCategoryDataset, RangeInfo, PublicCloneable { public Number getMeanValue(int row, int column) { Number result = null; BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column); if (item != null) { result = item.getMean(); } return result; } DefaultBoxAndWhiskerCategoryDataset(); void add(List list, Comparable rowKey, Comparable columnKey); void add(BoxAndWhiskerItem item, Comparable rowKey, Comparable columnKey); BoxAndWhiskerItem getItem(int row, int column); Number getValue(int row, int column); Number getValue(Comparable rowKey, Comparable columnKey); Number getMeanValue(int row, int column); Number getMeanValue(Comparable rowKey, Comparable columnKey); Number getMedianValue(int row, int column); Number getMedianValue(Comparable rowKey, Comparable columnKey); Number getQ1Value(int row, int column); Number getQ1Value(Comparable rowKey, Comparable columnKey); Number getQ3Value(int row, int column); Number getQ3Value(Comparable rowKey, Comparable columnKey); int getColumnIndex(Comparable key); Comparable getColumnKey(int column); List getColumnKeys(); int getRowIndex(Comparable key); Comparable getRowKey(int row); List getRowKeys(); int getRowCount(); int getColumnCount(); double getRangeLowerBound(boolean includeInterval); double getRangeUpperBound(boolean includeInterval); Range getRangeBounds(boolean includeInterval); Number getMinRegularValue(int row, int column); Number getMinRegularValue(Comparable rowKey, Comparable columnKey); Number getMaxRegularValue(int row, int column); Number getMaxRegularValue(Comparable rowKey, Comparable columnKey); Number getMinOutlier(int row, int column); Number getMinOutlier(Comparable rowKey, Comparable columnKey); Number getMaxOutlier(int row, int column); Number getMaxOutlier(Comparable rowKey, Comparable columnKey); List getOutliers(int row, int column); List getOutliers(Comparable rowKey, Comparable columnKey); boolean equals(Object obj); Object clone(); }\n", "projects": [{"project": "Chart", "id": 21}]}
{"method": "// Focal method:\npublic class DefaultBoxAndWhiskerCategoryDataset extends AbstractDataset\n        implements BoxAndWhiskerCategoryDataset, RangeInfo, PublicCloneable { public List getOutliers(Comparable rowKey, Comparable columnKey) { List result = null; BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject( rowKey, columnKey); if (item != null) { result = item.getOutliers(); } return result; } DefaultBoxAndWhiskerCategoryDataset(); void add(List list, Comparable rowKey, Comparable columnKey); void add(BoxAndWhiskerItem item, Comparable rowKey, Comparable columnKey); BoxAndWhiskerItem getItem(int row, int column); Number getValue(int row, int column); Number getValue(Comparable rowKey, Comparable columnKey); Number getMeanValue(int row, int column); Number getMeanValue(Comparable rowKey, Comparable columnKey); Number getMedianValue(int row, int column); Number getMedianValue(Comparable rowKey, Comparable columnKey); Number getQ1Value(int row, int column); Number getQ1Value(Comparable rowKey, Comparable columnKey); Number getQ3Value(int row, int column); Number getQ3Value(Comparable rowKey, Comparable columnKey); int getColumnIndex(Comparable key); Comparable getColumnKey(int column); List getColumnKeys(); int getRowIndex(Comparable key); Comparable getRowKey(int row); List getRowKeys(); int getRowCount(); int getColumnCount(); double getRangeLowerBound(boolean includeInterval); double getRangeUpperBound(boolean includeInterval); Range getRangeBounds(boolean includeInterval); Number getMinRegularValue(int row, int column); Number getMinRegularValue(Comparable rowKey, Comparable columnKey); Number getMaxRegularValue(int row, int column); Number getMaxRegularValue(Comparable rowKey, Comparable columnKey); Number getMinOutlier(int row, int column); Number getMinOutlier(Comparable rowKey, Comparable columnKey); Number getMaxOutlier(int row, int column); Number getMaxOutlier(Comparable rowKey, Comparable columnKey); List getOutliers(int row, int column); List getOutliers(Comparable rowKey, Comparable columnKey); boolean equals(Object obj); Object clone(); }\n", "projects": [{"project": "Chart", "id": 21}]}
{"method": "// Focal method:\npublic class DefaultBoxAndWhiskerCategoryDataset extends AbstractDataset\n        implements BoxAndWhiskerCategoryDataset, RangeInfo, PublicCloneable { public Comparable getRowKey(int row) { return this.data.getRowKey(row); } DefaultBoxAndWhiskerCategoryDataset(); void add(List list, Comparable rowKey, Comparable columnKey); void add(BoxAndWhiskerItem item, Comparable rowKey, Comparable columnKey); BoxAndWhiskerItem getItem(int row, int column); Number getValue(int row, int column); Number getValue(Comparable rowKey, Comparable columnKey); Number getMeanValue(int row, int column); Number getMeanValue(Comparable rowKey, Comparable columnKey); Number getMedianValue(int row, int column); Number getMedianValue(Comparable rowKey, Comparable columnKey); Number getQ1Value(int row, int column); Number getQ1Value(Comparable rowKey, Comparable columnKey); Number getQ3Value(int row, int column); Number getQ3Value(Comparable rowKey, Comparable columnKey); int getColumnIndex(Comparable key); Comparable getColumnKey(int column); List getColumnKeys(); int getRowIndex(Comparable key); Comparable getRowKey(int row); List getRowKeys(); int getRowCount(); int getColumnCount(); double getRangeLowerBound(boolean includeInterval); double getRangeUpperBound(boolean includeInterval); Range getRangeBounds(boolean includeInterval); Number getMinRegularValue(int row, int column); Number getMinRegularValue(Comparable rowKey, Comparable columnKey); Number getMaxRegularValue(int row, int column); Number getMaxRegularValue(Comparable rowKey, Comparable columnKey); Number getMinOutlier(int row, int column); Number getMinOutlier(Comparable rowKey, Comparable columnKey); Number getMaxOutlier(int row, int column); Number getMaxOutlier(Comparable rowKey, Comparable columnKey); List getOutliers(int row, int column); List getOutliers(Comparable rowKey, Comparable columnKey); boolean equals(Object obj); Object clone(); }\n", "projects": [{"project": "Chart", "id": 21}]}
{"method": "// Focal method:\npublic class DefaultBoxAndWhiskerCategoryDataset extends AbstractDataset\n        implements BoxAndWhiskerCategoryDataset, RangeInfo, PublicCloneable { public Number getQ1Value(Comparable rowKey, Comparable columnKey) { Number result = null; BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject( rowKey, columnKey); if (item != null) { result = item.getQ1(); } return result; } DefaultBoxAndWhiskerCategoryDataset(); void add(List list, Comparable rowKey, Comparable columnKey); void add(BoxAndWhiskerItem item, Comparable rowKey, Comparable columnKey); BoxAndWhiskerItem getItem(int row, int column); Number getValue(int row, int column); Number getValue(Comparable rowKey, Comparable columnKey); Number getMeanValue(int row, int column); Number getMeanValue(Comparable rowKey, Comparable columnKey); Number getMedianValue(int row, int column); Number getMedianValue(Comparable rowKey, Comparable columnKey); Number getQ1Value(int row, int column); Number getQ1Value(Comparable rowKey, Comparable columnKey); Number getQ3Value(int row, int column); Number getQ3Value(Comparable rowKey, Comparable columnKey); int getColumnIndex(Comparable key); Comparable getColumnKey(int column); List getColumnKeys(); int getRowIndex(Comparable key); Comparable getRowKey(int row); List getRowKeys(); int getRowCount(); int getColumnCount(); double getRangeLowerBound(boolean includeInterval); double getRangeUpperBound(boolean includeInterval); Range getRangeBounds(boolean includeInterval); Number getMinRegularValue(int row, int column); Number getMinRegularValue(Comparable rowKey, Comparable columnKey); Number getMaxRegularValue(int row, int column); Number getMaxRegularValue(Comparable rowKey, Comparable columnKey); Number getMinOutlier(int row, int column); Number getMinOutlier(Comparable rowKey, Comparable columnKey); Number getMaxOutlier(int row, int column); Number getMaxOutlier(Comparable rowKey, Comparable columnKey); List getOutliers(int row, int column); List getOutliers(Comparable rowKey, Comparable columnKey); boolean equals(Object obj); Object clone(); }\n", "projects": [{"project": "Chart", "id": 21}]}
{"method": "// Focal method:\npublic class DefaultBoxAndWhiskerCategoryDataset extends AbstractDataset\n        implements BoxAndWhiskerCategoryDataset, RangeInfo, PublicCloneable { public Number getQ3Value(Comparable rowKey, Comparable columnKey) { Number result = null; BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject( rowKey, columnKey); if (item != null) { result = item.getQ3(); } return result; } DefaultBoxAndWhiskerCategoryDataset(); void add(List list, Comparable rowKey, Comparable columnKey); void add(BoxAndWhiskerItem item, Comparable rowKey, Comparable columnKey); BoxAndWhiskerItem getItem(int row, int column); Number getValue(int row, int column); Number getValue(Comparable rowKey, Comparable columnKey); Number getMeanValue(int row, int column); Number getMeanValue(Comparable rowKey, Comparable columnKey); Number getMedianValue(int row, int column); Number getMedianValue(Comparable rowKey, Comparable columnKey); Number getQ1Value(int row, int column); Number getQ1Value(Comparable rowKey, Comparable columnKey); Number getQ3Value(int row, int column); Number getQ3Value(Comparable rowKey, Comparable columnKey); int getColumnIndex(Comparable key); Comparable getColumnKey(int column); List getColumnKeys(); int getRowIndex(Comparable key); Comparable getRowKey(int row); List getRowKeys(); int getRowCount(); int getColumnCount(); double getRangeLowerBound(boolean includeInterval); double getRangeUpperBound(boolean includeInterval); Range getRangeBounds(boolean includeInterval); Number getMinRegularValue(int row, int column); Number getMinRegularValue(Comparable rowKey, Comparable columnKey); Number getMaxRegularValue(int row, int column); Number getMaxRegularValue(Comparable rowKey, Comparable columnKey); Number getMinOutlier(int row, int column); Number getMinOutlier(Comparable rowKey, Comparable columnKey); Number getMaxOutlier(int row, int column); Number getMaxOutlier(Comparable rowKey, Comparable columnKey); List getOutliers(int row, int column); List getOutliers(Comparable rowKey, Comparable columnKey); boolean equals(Object obj); Object clone(); }\n", "projects": [{"project": "Chart", "id": 21}]}
{"method": "// Focal method:\npublic class DefaultBoxAndWhiskerCategoryDataset extends AbstractDataset\n        implements BoxAndWhiskerCategoryDataset, RangeInfo, PublicCloneable { public Number getQ1Value(int row, int column) { Number result = null; BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject( row, column); if (item != null) { result = item.getQ1(); } return result; } DefaultBoxAndWhiskerCategoryDataset(); void add(List list, Comparable rowKey, Comparable columnKey); void add(BoxAndWhiskerItem item, Comparable rowKey, Comparable columnKey); BoxAndWhiskerItem getItem(int row, int column); Number getValue(int row, int column); Number getValue(Comparable rowKey, Comparable columnKey); Number getMeanValue(int row, int column); Number getMeanValue(Comparable rowKey, Comparable columnKey); Number getMedianValue(int row, int column); Number getMedianValue(Comparable rowKey, Comparable columnKey); Number getQ1Value(int row, int column); Number getQ1Value(Comparable rowKey, Comparable columnKey); Number getQ3Value(int row, int column); Number getQ3Value(Comparable rowKey, Comparable columnKey); int getColumnIndex(Comparable key); Comparable getColumnKey(int column); List getColumnKeys(); int getRowIndex(Comparable key); Comparable getRowKey(int row); List getRowKeys(); int getRowCount(); int getColumnCount(); double getRangeLowerBound(boolean includeInterval); double getRangeUpperBound(boolean includeInterval); Range getRangeBounds(boolean includeInterval); Number getMinRegularValue(int row, int column); Number getMinRegularValue(Comparable rowKey, Comparable columnKey); Number getMaxRegularValue(int row, int column); Number getMaxRegularValue(Comparable rowKey, Comparable columnKey); Number getMinOutlier(int row, int column); Number getMinOutlier(Comparable rowKey, Comparable columnKey); Number getMaxOutlier(int row, int column); Number getMaxOutlier(Comparable rowKey, Comparable columnKey); List getOutliers(int row, int column); List getOutliers(Comparable rowKey, Comparable columnKey); boolean equals(Object obj); Object clone(); }\n", "projects": [{"project": "Chart", "id": 21}]}
{"method": "// Focal method:\npublic class DefaultBoxAndWhiskerCategoryDataset extends AbstractDataset\n        implements BoxAndWhiskerCategoryDataset, RangeInfo, PublicCloneable { public Number getMinOutlier(int row, int column) { Number result = null; BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject( row, column); if (item != null) { result = item.getMinOutlier(); } return result; } DefaultBoxAndWhiskerCategoryDataset(); void add(List list, Comparable rowKey, Comparable columnKey); void add(BoxAndWhiskerItem item, Comparable rowKey, Comparable columnKey); BoxAndWhiskerItem getItem(int row, int column); Number getValue(int row, int column); Number getValue(Comparable rowKey, Comparable columnKey); Number getMeanValue(int row, int column); Number getMeanValue(Comparable rowKey, Comparable columnKey); Number getMedianValue(int row, int column); Number getMedianValue(Comparable rowKey, Comparable columnKey); Number getQ1Value(int row, int column); Number getQ1Value(Comparable rowKey, Comparable columnKey); Number getQ3Value(int row, int column); Number getQ3Value(Comparable rowKey, Comparable columnKey); int getColumnIndex(Comparable key); Comparable getColumnKey(int column); List getColumnKeys(); int getRowIndex(Comparable key); Comparable getRowKey(int row); List getRowKeys(); int getRowCount(); int getColumnCount(); double getRangeLowerBound(boolean includeInterval); double getRangeUpperBound(boolean includeInterval); Range getRangeBounds(boolean includeInterval); Number getMinRegularValue(int row, int column); Number getMinRegularValue(Comparable rowKey, Comparable columnKey); Number getMaxRegularValue(int row, int column); Number getMaxRegularValue(Comparable rowKey, Comparable columnKey); Number getMinOutlier(int row, int column); Number getMinOutlier(Comparable rowKey, Comparable columnKey); Number getMaxOutlier(int row, int column); Number getMaxOutlier(Comparable rowKey, Comparable columnKey); List getOutliers(int row, int column); List getOutliers(Comparable rowKey, Comparable columnKey); boolean equals(Object obj); Object clone(); }\n", "projects": [{"project": "Chart", "id": 21}]}
{"method": "// Focal method:\npublic class DefaultBoxAndWhiskerCategoryDataset extends AbstractDataset\n        implements BoxAndWhiskerCategoryDataset, RangeInfo, PublicCloneable { public Number getMedianValue(Comparable rowKey, Comparable columnKey) { Number result = null; BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject( rowKey, columnKey); if (item != null) { result = item.getMedian(); } return result; } DefaultBoxAndWhiskerCategoryDataset(); void add(List list, Comparable rowKey, Comparable columnKey); void add(BoxAndWhiskerItem item, Comparable rowKey, Comparable columnKey); BoxAndWhiskerItem getItem(int row, int column); Number getValue(int row, int column); Number getValue(Comparable rowKey, Comparable columnKey); Number getMeanValue(int row, int column); Number getMeanValue(Comparable rowKey, Comparable columnKey); Number getMedianValue(int row, int column); Number getMedianValue(Comparable rowKey, Comparable columnKey); Number getQ1Value(int row, int column); Number getQ1Value(Comparable rowKey, Comparable columnKey); Number getQ3Value(int row, int column); Number getQ3Value(Comparable rowKey, Comparable columnKey); int getColumnIndex(Comparable key); Comparable getColumnKey(int column); List getColumnKeys(); int getRowIndex(Comparable key); Comparable getRowKey(int row); List getRowKeys(); int getRowCount(); int getColumnCount(); double getRangeLowerBound(boolean includeInterval); double getRangeUpperBound(boolean includeInterval); Range getRangeBounds(boolean includeInterval); Number getMinRegularValue(int row, int column); Number getMinRegularValue(Comparable rowKey, Comparable columnKey); Number getMaxRegularValue(int row, int column); Number getMaxRegularValue(Comparable rowKey, Comparable columnKey); Number getMinOutlier(int row, int column); Number getMinOutlier(Comparable rowKey, Comparable columnKey); Number getMaxOutlier(int row, int column); Number getMaxOutlier(Comparable rowKey, Comparable columnKey); List getOutliers(int row, int column); List getOutliers(Comparable rowKey, Comparable columnKey); boolean equals(Object obj); Object clone(); }\n", "projects": [{"project": "Chart", "id": 21}]}
{"method": "// Focal method:\npublic class DefaultBoxAndWhiskerCategoryDataset extends AbstractDataset\n        implements BoxAndWhiskerCategoryDataset, RangeInfo, PublicCloneable { public Number getMeanValue(Comparable rowKey, Comparable columnKey) { Number result = null; BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject( rowKey, columnKey); if (item != null) { result = item.getMean(); } return result; } DefaultBoxAndWhiskerCategoryDataset(); void add(List list, Comparable rowKey, Comparable columnKey); void add(BoxAndWhiskerItem item, Comparable rowKey, Comparable columnKey); BoxAndWhiskerItem getItem(int row, int column); Number getValue(int row, int column); Number getValue(Comparable rowKey, Comparable columnKey); Number getMeanValue(int row, int column); Number getMeanValue(Comparable rowKey, Comparable columnKey); Number getMedianValue(int row, int column); Number getMedianValue(Comparable rowKey, Comparable columnKey); Number getQ1Value(int row, int column); Number getQ1Value(Comparable rowKey, Comparable columnKey); Number getQ3Value(int row, int column); Number getQ3Value(Comparable rowKey, Comparable columnKey); int getColumnIndex(Comparable key); Comparable getColumnKey(int column); List getColumnKeys(); int getRowIndex(Comparable key); Comparable getRowKey(int row); List getRowKeys(); int getRowCount(); int getColumnCount(); double getRangeLowerBound(boolean includeInterval); double getRangeUpperBound(boolean includeInterval); Range getRangeBounds(boolean includeInterval); Number getMinRegularValue(int row, int column); Number getMinRegularValue(Comparable rowKey, Comparable columnKey); Number getMaxRegularValue(int row, int column); Number getMaxRegularValue(Comparable rowKey, Comparable columnKey); Number getMinOutlier(int row, int column); Number getMinOutlier(Comparable rowKey, Comparable columnKey); Number getMaxOutlier(int row, int column); Number getMaxOutlier(Comparable rowKey, Comparable columnKey); List getOutliers(int row, int column); List getOutliers(Comparable rowKey, Comparable columnKey); boolean equals(Object obj); Object clone(); }\n", "projects": [{"project": "Chart", "id": 21}]}
{"method": "// Focal method:\npublic class DefaultBoxAndWhiskerCategoryDataset extends AbstractDataset\n        implements BoxAndWhiskerCategoryDataset, RangeInfo, PublicCloneable { public Number getQ3Value(int row, int column) { Number result = null; BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject( row, column); if (item != null) { result = item.getQ3(); } return result; } DefaultBoxAndWhiskerCategoryDataset(); void add(List list, Comparable rowKey, Comparable columnKey); void add(BoxAndWhiskerItem item, Comparable rowKey, Comparable columnKey); BoxAndWhiskerItem getItem(int row, int column); Number getValue(int row, int column); Number getValue(Comparable rowKey, Comparable columnKey); Number getMeanValue(int row, int column); Number getMeanValue(Comparable rowKey, Comparable columnKey); Number getMedianValue(int row, int column); Number getMedianValue(Comparable rowKey, Comparable columnKey); Number getQ1Value(int row, int column); Number getQ1Value(Comparable rowKey, Comparable columnKey); Number getQ3Value(int row, int column); Number getQ3Value(Comparable rowKey, Comparable columnKey); int getColumnIndex(Comparable key); Comparable getColumnKey(int column); List getColumnKeys(); int getRowIndex(Comparable key); Comparable getRowKey(int row); List getRowKeys(); int getRowCount(); int getColumnCount(); double getRangeLowerBound(boolean includeInterval); double getRangeUpperBound(boolean includeInterval); Range getRangeBounds(boolean includeInterval); Number getMinRegularValue(int row, int column); Number getMinRegularValue(Comparable rowKey, Comparable columnKey); Number getMaxRegularValue(int row, int column); Number getMaxRegularValue(Comparable rowKey, Comparable columnKey); Number getMinOutlier(int row, int column); Number getMinOutlier(Comparable rowKey, Comparable columnKey); Number getMaxOutlier(int row, int column); Number getMaxOutlier(Comparable rowKey, Comparable columnKey); List getOutliers(int row, int column); List getOutliers(Comparable rowKey, Comparable columnKey); boolean equals(Object obj); Object clone(); }\n", "projects": [{"project": "Chart", "id": 21}]}
{"method": "// Focal method:\npublic class DefaultBoxAndWhiskerCategoryDataset extends AbstractDataset\n        implements BoxAndWhiskerCategoryDataset, RangeInfo, PublicCloneable { public Object clone() throws CloneNotSupportedException { DefaultBoxAndWhiskerCategoryDataset clone = (DefaultBoxAndWhiskerCategoryDataset) super.clone(); clone.data = (KeyedObjects2D) this.data.clone(); return clone; } DefaultBoxAndWhiskerCategoryDataset(); void add(List list, Comparable rowKey, Comparable columnKey); void add(BoxAndWhiskerItem item, Comparable rowKey, Comparable columnKey); BoxAndWhiskerItem getItem(int row, int column); Number getValue(int row, int column); Number getValue(Comparable rowKey, Comparable columnKey); Number getMeanValue(int row, int column); Number getMeanValue(Comparable rowKey, Comparable columnKey); Number getMedianValue(int row, int column); Number getMedianValue(Comparable rowKey, Comparable columnKey); Number getQ1Value(int row, int column); Number getQ1Value(Comparable rowKey, Comparable columnKey); Number getQ3Value(int row, int column); Number getQ3Value(Comparable rowKey, Comparable columnKey); int getColumnIndex(Comparable key); Comparable getColumnKey(int column); List getColumnKeys(); int getRowIndex(Comparable key); Comparable getRowKey(int row); List getRowKeys(); int getRowCount(); int getColumnCount(); double getRangeLowerBound(boolean includeInterval); double getRangeUpperBound(boolean includeInterval); Range getRangeBounds(boolean includeInterval); Number getMinRegularValue(int row, int column); Number getMinRegularValue(Comparable rowKey, Comparable columnKey); Number getMaxRegularValue(int row, int column); Number getMaxRegularValue(Comparable rowKey, Comparable columnKey); Number getMinOutlier(int row, int column); Number getMinOutlier(Comparable rowKey, Comparable columnKey); Number getMaxOutlier(int row, int column); Number getMaxOutlier(Comparable rowKey, Comparable columnKey); List getOutliers(int row, int column); List getOutliers(Comparable rowKey, Comparable columnKey); boolean equals(Object obj); Object clone(); }\n", "projects": [{"project": "Chart", "id": 21}]}
{"method": "// Focal method:\npublic class DefaultBoxAndWhiskerCategoryDataset extends AbstractDataset\n        implements BoxAndWhiskerCategoryDataset, RangeInfo, PublicCloneable { public List getOutliers(int row, int column) { List result = null; BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject( row, column); if (item != null) { result = item.getOutliers(); } return result; } DefaultBoxAndWhiskerCategoryDataset(); void add(List list, Comparable rowKey, Comparable columnKey); void add(BoxAndWhiskerItem item, Comparable rowKey, Comparable columnKey); BoxAndWhiskerItem getItem(int row, int column); Number getValue(int row, int column); Number getValue(Comparable rowKey, Comparable columnKey); Number getMeanValue(int row, int column); Number getMeanValue(Comparable rowKey, Comparable columnKey); Number getMedianValue(int row, int column); Number getMedianValue(Comparable rowKey, Comparable columnKey); Number getQ1Value(int row, int column); Number getQ1Value(Comparable rowKey, Comparable columnKey); Number getQ3Value(int row, int column); Number getQ3Value(Comparable rowKey, Comparable columnKey); int getColumnIndex(Comparable key); Comparable getColumnKey(int column); List getColumnKeys(); int getRowIndex(Comparable key); Comparable getRowKey(int row); List getRowKeys(); int getRowCount(); int getColumnCount(); double getRangeLowerBound(boolean includeInterval); double getRangeUpperBound(boolean includeInterval); Range getRangeBounds(boolean includeInterval); Number getMinRegularValue(int row, int column); Number getMinRegularValue(Comparable rowKey, Comparable columnKey); Number getMaxRegularValue(int row, int column); Number getMaxRegularValue(Comparable rowKey, Comparable columnKey); Number getMinOutlier(int row, int column); Number getMinOutlier(Comparable rowKey, Comparable columnKey); Number getMaxOutlier(int row, int column); Number getMaxOutlier(Comparable rowKey, Comparable columnKey); List getOutliers(int row, int column); List getOutliers(Comparable rowKey, Comparable columnKey); boolean equals(Object obj); Object clone(); }\n", "projects": [{"project": "Chart", "id": 21}]}
{"method": "// Focal method:\npublic class DefaultBoxAndWhiskerCategoryDataset extends AbstractDataset\n        implements BoxAndWhiskerCategoryDataset, RangeInfo, PublicCloneable { public int getRowCount() { return this.data.getRowCount(); } DefaultBoxAndWhiskerCategoryDataset(); void add(List list, Comparable rowKey, Comparable columnKey); void add(BoxAndWhiskerItem item, Comparable rowKey, Comparable columnKey); BoxAndWhiskerItem getItem(int row, int column); Number getValue(int row, int column); Number getValue(Comparable rowKey, Comparable columnKey); Number getMeanValue(int row, int column); Number getMeanValue(Comparable rowKey, Comparable columnKey); Number getMedianValue(int row, int column); Number getMedianValue(Comparable rowKey, Comparable columnKey); Number getQ1Value(int row, int column); Number getQ1Value(Comparable rowKey, Comparable columnKey); Number getQ3Value(int row, int column); Number getQ3Value(Comparable rowKey, Comparable columnKey); int getColumnIndex(Comparable key); Comparable getColumnKey(int column); List getColumnKeys(); int getRowIndex(Comparable key); Comparable getRowKey(int row); List getRowKeys(); int getRowCount(); int getColumnCount(); double getRangeLowerBound(boolean includeInterval); double getRangeUpperBound(boolean includeInterval); Range getRangeBounds(boolean includeInterval); Number getMinRegularValue(int row, int column); Number getMinRegularValue(Comparable rowKey, Comparable columnKey); Number getMaxRegularValue(int row, int column); Number getMaxRegularValue(Comparable rowKey, Comparable columnKey); Number getMinOutlier(int row, int column); Number getMinOutlier(Comparable rowKey, Comparable columnKey); Number getMaxOutlier(int row, int column); Number getMaxOutlier(Comparable rowKey, Comparable columnKey); List getOutliers(int row, int column); List getOutliers(Comparable rowKey, Comparable columnKey); boolean equals(Object obj); Object clone(); }\n", "projects": [{"project": "Chart", "id": 21}]}
{"method": "// Focal method:\npublic class DefaultBoxAndWhiskerCategoryDataset extends AbstractDataset\n        implements BoxAndWhiskerCategoryDataset, RangeInfo, PublicCloneable { public Range getRangeBounds(boolean includeInterval) { return this.rangeBounds; } DefaultBoxAndWhiskerCategoryDataset(); void add(List list, Comparable rowKey, Comparable columnKey); void add(BoxAndWhiskerItem item, Comparable rowKey, Comparable columnKey); BoxAndWhiskerItem getItem(int row, int column); Number getValue(int row, int column); Number getValue(Comparable rowKey, Comparable columnKey); Number getMeanValue(int row, int column); Number getMeanValue(Comparable rowKey, Comparable columnKey); Number getMedianValue(int row, int column); Number getMedianValue(Comparable rowKey, Comparable columnKey); Number getQ1Value(int row, int column); Number getQ1Value(Comparable rowKey, Comparable columnKey); Number getQ3Value(int row, int column); Number getQ3Value(Comparable rowKey, Comparable columnKey); int getColumnIndex(Comparable key); Comparable getColumnKey(int column); List getColumnKeys(); int getRowIndex(Comparable key); Comparable getRowKey(int row); List getRowKeys(); int getRowCount(); int getColumnCount(); double getRangeLowerBound(boolean includeInterval); double getRangeUpperBound(boolean includeInterval); Range getRangeBounds(boolean includeInterval); Number getMinRegularValue(int row, int column); Number getMinRegularValue(Comparable rowKey, Comparable columnKey); Number getMaxRegularValue(int row, int column); Number getMaxRegularValue(Comparable rowKey, Comparable columnKey); Number getMinOutlier(int row, int column); Number getMinOutlier(Comparable rowKey, Comparable columnKey); Number getMaxOutlier(int row, int column); Number getMaxOutlier(Comparable rowKey, Comparable columnKey); List getOutliers(int row, int column); List getOutliers(Comparable rowKey, Comparable columnKey); boolean equals(Object obj); Object clone(); }\n", "projects": [{"project": "Chart", "id": 21}]}
{"method": "// Focal method:\npublic class DefaultBoxAndWhiskerCategoryDataset extends AbstractDataset\n        implements BoxAndWhiskerCategoryDataset, RangeInfo, PublicCloneable { public List getRowKeys() { return this.data.getRowKeys(); } DefaultBoxAndWhiskerCategoryDataset(); void add(List list, Comparable rowKey, Comparable columnKey); void add(BoxAndWhiskerItem item, Comparable rowKey, Comparable columnKey); BoxAndWhiskerItem getItem(int row, int column); Number getValue(int row, int column); Number getValue(Comparable rowKey, Comparable columnKey); Number getMeanValue(int row, int column); Number getMeanValue(Comparable rowKey, Comparable columnKey); Number getMedianValue(int row, int column); Number getMedianValue(Comparable rowKey, Comparable columnKey); Number getQ1Value(int row, int column); Number getQ1Value(Comparable rowKey, Comparable columnKey); Number getQ3Value(int row, int column); Number getQ3Value(Comparable rowKey, Comparable columnKey); int getColumnIndex(Comparable key); Comparable getColumnKey(int column); List getColumnKeys(); int getRowIndex(Comparable key); Comparable getRowKey(int row); List getRowKeys(); int getRowCount(); int getColumnCount(); double getRangeLowerBound(boolean includeInterval); double getRangeUpperBound(boolean includeInterval); Range getRangeBounds(boolean includeInterval); Number getMinRegularValue(int row, int column); Number getMinRegularValue(Comparable rowKey, Comparable columnKey); Number getMaxRegularValue(int row, int column); Number getMaxRegularValue(Comparable rowKey, Comparable columnKey); Number getMinOutlier(int row, int column); Number getMinOutlier(Comparable rowKey, Comparable columnKey); Number getMaxOutlier(int row, int column); Number getMaxOutlier(Comparable rowKey, Comparable columnKey); List getOutliers(int row, int column); List getOutliers(Comparable rowKey, Comparable columnKey); boolean equals(Object obj); Object clone(); }\n", "projects": [{"project": "Chart", "id": 21}]}
{"method": "// Focal method:\npublic class DefaultBoxAndWhiskerCategoryDataset extends AbstractDataset\n        implements BoxAndWhiskerCategoryDataset, RangeInfo, PublicCloneable { public int getRowIndex(Comparable key) { return this.data.getRowIndex(key); } DefaultBoxAndWhiskerCategoryDataset(); void add(List list, Comparable rowKey, Comparable columnKey); void add(BoxAndWhiskerItem item, Comparable rowKey, Comparable columnKey); BoxAndWhiskerItem getItem(int row, int column); Number getValue(int row, int column); Number getValue(Comparable rowKey, Comparable columnKey); Number getMeanValue(int row, int column); Number getMeanValue(Comparable rowKey, Comparable columnKey); Number getMedianValue(int row, int column); Number getMedianValue(Comparable rowKey, Comparable columnKey); Number getQ1Value(int row, int column); Number getQ1Value(Comparable rowKey, Comparable columnKey); Number getQ3Value(int row, int column); Number getQ3Value(Comparable rowKey, Comparable columnKey); int getColumnIndex(Comparable key); Comparable getColumnKey(int column); List getColumnKeys(); int getRowIndex(Comparable key); Comparable getRowKey(int row); List getRowKeys(); int getRowCount(); int getColumnCount(); double getRangeLowerBound(boolean includeInterval); double getRangeUpperBound(boolean includeInterval); Range getRangeBounds(boolean includeInterval); Number getMinRegularValue(int row, int column); Number getMinRegularValue(Comparable rowKey, Comparable columnKey); Number getMaxRegularValue(int row, int column); Number getMaxRegularValue(Comparable rowKey, Comparable columnKey); Number getMinOutlier(int row, int column); Number getMinOutlier(Comparable rowKey, Comparable columnKey); Number getMaxOutlier(int row, int column); Number getMaxOutlier(Comparable rowKey, Comparable columnKey); List getOutliers(int row, int column); List getOutliers(Comparable rowKey, Comparable columnKey); boolean equals(Object obj); Object clone(); }\n", "projects": [{"project": "Chart", "id": 21}]}
{"method": "// Focal method:\npublic class DefaultBoxAndWhiskerCategoryDataset extends AbstractDataset\n        implements BoxAndWhiskerCategoryDataset, RangeInfo, PublicCloneable { public Number getMaxOutlier(int row, int column) { Number result = null; BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject( row, column); if (item != null) { result = item.getMaxOutlier(); } return result; } DefaultBoxAndWhiskerCategoryDataset(); void add(List list, Comparable rowKey, Comparable columnKey); void add(BoxAndWhiskerItem item, Comparable rowKey, Comparable columnKey); BoxAndWhiskerItem getItem(int row, int column); Number getValue(int row, int column); Number getValue(Comparable rowKey, Comparable columnKey); Number getMeanValue(int row, int column); Number getMeanValue(Comparable rowKey, Comparable columnKey); Number getMedianValue(int row, int column); Number getMedianValue(Comparable rowKey, Comparable columnKey); Number getQ1Value(int row, int column); Number getQ1Value(Comparable rowKey, Comparable columnKey); Number getQ3Value(int row, int column); Number getQ3Value(Comparable rowKey, Comparable columnKey); int getColumnIndex(Comparable key); Comparable getColumnKey(int column); List getColumnKeys(); int getRowIndex(Comparable key); Comparable getRowKey(int row); List getRowKeys(); int getRowCount(); int getColumnCount(); double getRangeLowerBound(boolean includeInterval); double getRangeUpperBound(boolean includeInterval); Range getRangeBounds(boolean includeInterval); Number getMinRegularValue(int row, int column); Number getMinRegularValue(Comparable rowKey, Comparable columnKey); Number getMaxRegularValue(int row, int column); Number getMaxRegularValue(Comparable rowKey, Comparable columnKey); Number getMinOutlier(int row, int column); Number getMinOutlier(Comparable rowKey, Comparable columnKey); Number getMaxOutlier(int row, int column); Number getMaxOutlier(Comparable rowKey, Comparable columnKey); List getOutliers(int row, int column); List getOutliers(Comparable rowKey, Comparable columnKey); boolean equals(Object obj); Object clone(); }\n", "projects": [{"project": "Chart", "id": 21}]}
{"method": "// Focal method:\npublic class DefaultBoxAndWhiskerCategoryDataset extends AbstractDataset\n        implements BoxAndWhiskerCategoryDataset, RangeInfo, PublicCloneable { public Number getMaxRegularValue(Comparable rowKey, Comparable columnKey) { Number result = null; BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject( rowKey, columnKey); if (item != null) { result = item.getMaxRegularValue(); } return result; } DefaultBoxAndWhiskerCategoryDataset(); void add(List list, Comparable rowKey, Comparable columnKey); void add(BoxAndWhiskerItem item, Comparable rowKey, Comparable columnKey); BoxAndWhiskerItem getItem(int row, int column); Number getValue(int row, int column); Number getValue(Comparable rowKey, Comparable columnKey); Number getMeanValue(int row, int column); Number getMeanValue(Comparable rowKey, Comparable columnKey); Number getMedianValue(int row, int column); Number getMedianValue(Comparable rowKey, Comparable columnKey); Number getQ1Value(int row, int column); Number getQ1Value(Comparable rowKey, Comparable columnKey); Number getQ3Value(int row, int column); Number getQ3Value(Comparable rowKey, Comparable columnKey); int getColumnIndex(Comparable key); Comparable getColumnKey(int column); List getColumnKeys(); int getRowIndex(Comparable key); Comparable getRowKey(int row); List getRowKeys(); int getRowCount(); int getColumnCount(); double getRangeLowerBound(boolean includeInterval); double getRangeUpperBound(boolean includeInterval); Range getRangeBounds(boolean includeInterval); Number getMinRegularValue(int row, int column); Number getMinRegularValue(Comparable rowKey, Comparable columnKey); Number getMaxRegularValue(int row, int column); Number getMaxRegularValue(Comparable rowKey, Comparable columnKey); Number getMinOutlier(int row, int column); Number getMinOutlier(Comparable rowKey, Comparable columnKey); Number getMaxOutlier(int row, int column); Number getMaxOutlier(Comparable rowKey, Comparable columnKey); List getOutliers(int row, int column); List getOutliers(Comparable rowKey, Comparable columnKey); boolean equals(Object obj); Object clone(); }\n", "projects": [{"project": "Chart", "id": 21}]}
{"method": "// Focal method:\npublic class DefaultBoxAndWhiskerCategoryDataset extends AbstractDataset\n        implements BoxAndWhiskerCategoryDataset, RangeInfo, PublicCloneable { public BoxAndWhiskerItem getItem(int row, int column) { return (BoxAndWhiskerItem) this.data.getObject(row, column); } DefaultBoxAndWhiskerCategoryDataset(); void add(List list, Comparable rowKey, Comparable columnKey); void add(BoxAndWhiskerItem item, Comparable rowKey, Comparable columnKey); BoxAndWhiskerItem getItem(int row, int column); Number getValue(int row, int column); Number getValue(Comparable rowKey, Comparable columnKey); Number getMeanValue(int row, int column); Number getMeanValue(Comparable rowKey, Comparable columnKey); Number getMedianValue(int row, int column); Number getMedianValue(Comparable rowKey, Comparable columnKey); Number getQ1Value(int row, int column); Number getQ1Value(Comparable rowKey, Comparable columnKey); Number getQ3Value(int row, int column); Number getQ3Value(Comparable rowKey, Comparable columnKey); int getColumnIndex(Comparable key); Comparable getColumnKey(int column); List getColumnKeys(); int getRowIndex(Comparable key); Comparable getRowKey(int row); List getRowKeys(); int getRowCount(); int getColumnCount(); double getRangeLowerBound(boolean includeInterval); double getRangeUpperBound(boolean includeInterval); Range getRangeBounds(boolean includeInterval); Number getMinRegularValue(int row, int column); Number getMinRegularValue(Comparable rowKey, Comparable columnKey); Number getMaxRegularValue(int row, int column); Number getMaxRegularValue(Comparable rowKey, Comparable columnKey); Number getMinOutlier(int row, int column); Number getMinOutlier(Comparable rowKey, Comparable columnKey); Number getMaxOutlier(int row, int column); Number getMaxOutlier(Comparable rowKey, Comparable columnKey); List getOutliers(int row, int column); List getOutliers(Comparable rowKey, Comparable columnKey); boolean equals(Object obj); Object clone(); }\n", "projects": [{"project": "Chart", "id": 21}]}
{"method": "// Focal method:\npublic class DefaultBoxAndWhiskerCategoryDataset extends AbstractDataset\n        implements BoxAndWhiskerCategoryDataset, RangeInfo, PublicCloneable { public Number getMaxRegularValue(int row, int column) { Number result = null; BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject( row, column); if (item != null) { result = item.getMaxRegularValue(); } return result; } DefaultBoxAndWhiskerCategoryDataset(); void add(List list, Comparable rowKey, Comparable columnKey); void add(BoxAndWhiskerItem item, Comparable rowKey, Comparable columnKey); BoxAndWhiskerItem getItem(int row, int column); Number getValue(int row, int column); Number getValue(Comparable rowKey, Comparable columnKey); Number getMeanValue(int row, int column); Number getMeanValue(Comparable rowKey, Comparable columnKey); Number getMedianValue(int row, int column); Number getMedianValue(Comparable rowKey, Comparable columnKey); Number getQ1Value(int row, int column); Number getQ1Value(Comparable rowKey, Comparable columnKey); Number getQ3Value(int row, int column); Number getQ3Value(Comparable rowKey, Comparable columnKey); int getColumnIndex(Comparable key); Comparable getColumnKey(int column); List getColumnKeys(); int getRowIndex(Comparable key); Comparable getRowKey(int row); List getRowKeys(); int getRowCount(); int getColumnCount(); double getRangeLowerBound(boolean includeInterval); double getRangeUpperBound(boolean includeInterval); Range getRangeBounds(boolean includeInterval); Number getMinRegularValue(int row, int column); Number getMinRegularValue(Comparable rowKey, Comparable columnKey); Number getMaxRegularValue(int row, int column); Number getMaxRegularValue(Comparable rowKey, Comparable columnKey); Number getMinOutlier(int row, int column); Number getMinOutlier(Comparable rowKey, Comparable columnKey); Number getMaxOutlier(int row, int column); Number getMaxOutlier(Comparable rowKey, Comparable columnKey); List getOutliers(int row, int column); List getOutliers(Comparable rowKey, Comparable columnKey); boolean equals(Object obj); Object clone(); }\n", "projects": [{"project": "Chart", "id": 21}]}
{"method": "// Focal method:\npublic class DefaultBoxAndWhiskerCategoryDataset extends AbstractDataset\n        implements BoxAndWhiskerCategoryDataset, RangeInfo, PublicCloneable { public Number getValue(Comparable rowKey, Comparable columnKey) { return getMedianValue(rowKey, columnKey); } DefaultBoxAndWhiskerCategoryDataset(); void add(List list, Comparable rowKey, Comparable columnKey); void add(BoxAndWhiskerItem item, Comparable rowKey, Comparable columnKey); BoxAndWhiskerItem getItem(int row, int column); Number getValue(int row, int column); Number getValue(Comparable rowKey, Comparable columnKey); Number getMeanValue(int row, int column); Number getMeanValue(Comparable rowKey, Comparable columnKey); Number getMedianValue(int row, int column); Number getMedianValue(Comparable rowKey, Comparable columnKey); Number getQ1Value(int row, int column); Number getQ1Value(Comparable rowKey, Comparable columnKey); Number getQ3Value(int row, int column); Number getQ3Value(Comparable rowKey, Comparable columnKey); int getColumnIndex(Comparable key); Comparable getColumnKey(int column); List getColumnKeys(); int getRowIndex(Comparable key); Comparable getRowKey(int row); List getRowKeys(); int getRowCount(); int getColumnCount(); double getRangeLowerBound(boolean includeInterval); double getRangeUpperBound(boolean includeInterval); Range getRangeBounds(boolean includeInterval); Number getMinRegularValue(int row, int column); Number getMinRegularValue(Comparable rowKey, Comparable columnKey); Number getMaxRegularValue(int row, int column); Number getMaxRegularValue(Comparable rowKey, Comparable columnKey); Number getMinOutlier(int row, int column); Number getMinOutlier(Comparable rowKey, Comparable columnKey); Number getMaxOutlier(int row, int column); Number getMaxOutlier(Comparable rowKey, Comparable columnKey); List getOutliers(int row, int column); List getOutliers(Comparable rowKey, Comparable columnKey); boolean equals(Object obj); Object clone(); }\n", "projects": [{"project": "Chart", "id": 21}]}
{"method": "// Focal method:\npublic class DefaultBoxAndWhiskerCategoryDataset extends AbstractDataset\n        implements BoxAndWhiskerCategoryDataset, RangeInfo, PublicCloneable { public void add(List list, Comparable rowKey, Comparable columnKey) { BoxAndWhiskerItem item = BoxAndWhiskerCalculator .calculateBoxAndWhiskerStatistics(list); add(item, rowKey, columnKey); } DefaultBoxAndWhiskerCategoryDataset(); void add(List list, Comparable rowKey, Comparable columnKey); void add(BoxAndWhiskerItem item, Comparable rowKey, Comparable columnKey); BoxAndWhiskerItem getItem(int row, int column); Number getValue(int row, int column); Number getValue(Comparable rowKey, Comparable columnKey); Number getMeanValue(int row, int column); Number getMeanValue(Comparable rowKey, Comparable columnKey); Number getMedianValue(int row, int column); Number getMedianValue(Comparable rowKey, Comparable columnKey); Number getQ1Value(int row, int column); Number getQ1Value(Comparable rowKey, Comparable columnKey); Number getQ3Value(int row, int column); Number getQ3Value(Comparable rowKey, Comparable columnKey); int getColumnIndex(Comparable key); Comparable getColumnKey(int column); List getColumnKeys(); int getRowIndex(Comparable key); Comparable getRowKey(int row); List getRowKeys(); int getRowCount(); int getColumnCount(); double getRangeLowerBound(boolean includeInterval); double getRangeUpperBound(boolean includeInterval); Range getRangeBounds(boolean includeInterval); Number getMinRegularValue(int row, int column); Number getMinRegularValue(Comparable rowKey, Comparable columnKey); Number getMaxRegularValue(int row, int column); Number getMaxRegularValue(Comparable rowKey, Comparable columnKey); Number getMinOutlier(int row, int column); Number getMinOutlier(Comparable rowKey, Comparable columnKey); Number getMaxOutlier(int row, int column); Number getMaxOutlier(Comparable rowKey, Comparable columnKey); List getOutliers(int row, int column); List getOutliers(Comparable rowKey, Comparable columnKey); boolean equals(Object obj); Object clone(); }\n", "projects": [{"project": "Chart", "id": 21}]}
{"method": "// Focal method:\npublic class DefaultBoxAndWhiskerCategoryDataset extends AbstractDataset\n        implements BoxAndWhiskerCategoryDataset, RangeInfo, PublicCloneable { public Number getValue(int row, int column) { return getMedianValue(row, column); } DefaultBoxAndWhiskerCategoryDataset(); void add(List list, Comparable rowKey, Comparable columnKey); void add(BoxAndWhiskerItem item, Comparable rowKey, Comparable columnKey); BoxAndWhiskerItem getItem(int row, int column); Number getValue(int row, int column); Number getValue(Comparable rowKey, Comparable columnKey); Number getMeanValue(int row, int column); Number getMeanValue(Comparable rowKey, Comparable columnKey); Number getMedianValue(int row, int column); Number getMedianValue(Comparable rowKey, Comparable columnKey); Number getQ1Value(int row, int column); Number getQ1Value(Comparable rowKey, Comparable columnKey); Number getQ3Value(int row, int column); Number getQ3Value(Comparable rowKey, Comparable columnKey); int getColumnIndex(Comparable key); Comparable getColumnKey(int column); List getColumnKeys(); int getRowIndex(Comparable key); Comparable getRowKey(int row); List getRowKeys(); int getRowCount(); int getColumnCount(); double getRangeLowerBound(boolean includeInterval); double getRangeUpperBound(boolean includeInterval); Range getRangeBounds(boolean includeInterval); Number getMinRegularValue(int row, int column); Number getMinRegularValue(Comparable rowKey, Comparable columnKey); Number getMaxRegularValue(int row, int column); Number getMaxRegularValue(Comparable rowKey, Comparable columnKey); Number getMinOutlier(int row, int column); Number getMinOutlier(Comparable rowKey, Comparable columnKey); Number getMaxOutlier(int row, int column); Number getMaxOutlier(Comparable rowKey, Comparable columnKey); List getOutliers(int row, int column); List getOutliers(Comparable rowKey, Comparable columnKey); boolean equals(Object obj); Object clone(); }\n", "projects": [{"project": "Chart", "id": 21}]}
{"method": "// Focal method:\npublic class DefaultBoxAndWhiskerCategoryDataset extends AbstractDataset\n        implements BoxAndWhiskerCategoryDataset, RangeInfo, PublicCloneable { public Number getMinOutlier(Comparable rowKey, Comparable columnKey) { Number result = null; BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject( rowKey, columnKey); if (item != null) { result = item.getMinOutlier(); } return result; } DefaultBoxAndWhiskerCategoryDataset(); void add(List list, Comparable rowKey, Comparable columnKey); void add(BoxAndWhiskerItem item, Comparable rowKey, Comparable columnKey); BoxAndWhiskerItem getItem(int row, int column); Number getValue(int row, int column); Number getValue(Comparable rowKey, Comparable columnKey); Number getMeanValue(int row, int column); Number getMeanValue(Comparable rowKey, Comparable columnKey); Number getMedianValue(int row, int column); Number getMedianValue(Comparable rowKey, Comparable columnKey); Number getQ1Value(int row, int column); Number getQ1Value(Comparable rowKey, Comparable columnKey); Number getQ3Value(int row, int column); Number getQ3Value(Comparable rowKey, Comparable columnKey); int getColumnIndex(Comparable key); Comparable getColumnKey(int column); List getColumnKeys(); int getRowIndex(Comparable key); Comparable getRowKey(int row); List getRowKeys(); int getRowCount(); int getColumnCount(); double getRangeLowerBound(boolean includeInterval); double getRangeUpperBound(boolean includeInterval); Range getRangeBounds(boolean includeInterval); Number getMinRegularValue(int row, int column); Number getMinRegularValue(Comparable rowKey, Comparable columnKey); Number getMaxRegularValue(int row, int column); Number getMaxRegularValue(Comparable rowKey, Comparable columnKey); Number getMinOutlier(int row, int column); Number getMinOutlier(Comparable rowKey, Comparable columnKey); Number getMaxOutlier(int row, int column); Number getMaxOutlier(Comparable rowKey, Comparable columnKey); List getOutliers(int row, int column); List getOutliers(Comparable rowKey, Comparable columnKey); boolean equals(Object obj); Object clone(); }\n", "projects": [{"project": "Chart", "id": 21}]}
{"method": "// Focal method:\npublic class DefaultBoxAndWhiskerCategoryDataset extends AbstractDataset\n        implements BoxAndWhiskerCategoryDataset, RangeInfo, PublicCloneable { public Number getMedianValue(int row, int column) { Number result = null; BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column); if (item != null) { result = item.getMedian(); } return result; } DefaultBoxAndWhiskerCategoryDataset(); void add(List list, Comparable rowKey, Comparable columnKey); void add(BoxAndWhiskerItem item, Comparable rowKey, Comparable columnKey); BoxAndWhiskerItem getItem(int row, int column); Number getValue(int row, int column); Number getValue(Comparable rowKey, Comparable columnKey); Number getMeanValue(int row, int column); Number getMeanValue(Comparable rowKey, Comparable columnKey); Number getMedianValue(int row, int column); Number getMedianValue(Comparable rowKey, Comparable columnKey); Number getQ1Value(int row, int column); Number getQ1Value(Comparable rowKey, Comparable columnKey); Number getQ3Value(int row, int column); Number getQ3Value(Comparable rowKey, Comparable columnKey); int getColumnIndex(Comparable key); Comparable getColumnKey(int column); List getColumnKeys(); int getRowIndex(Comparable key); Comparable getRowKey(int row); List getRowKeys(); int getRowCount(); int getColumnCount(); double getRangeLowerBound(boolean includeInterval); double getRangeUpperBound(boolean includeInterval); Range getRangeBounds(boolean includeInterval); Number getMinRegularValue(int row, int column); Number getMinRegularValue(Comparable rowKey, Comparable columnKey); Number getMaxRegularValue(int row, int column); Number getMaxRegularValue(Comparable rowKey, Comparable columnKey); Number getMinOutlier(int row, int column); Number getMinOutlier(Comparable rowKey, Comparable columnKey); Number getMaxOutlier(int row, int column); Number getMaxOutlier(Comparable rowKey, Comparable columnKey); List getOutliers(int row, int column); List getOutliers(Comparable rowKey, Comparable columnKey); boolean equals(Object obj); Object clone(); }\n", "projects": [{"project": "Chart", "id": 21}]}
{"method": "// Focal method:\npublic class DefaultBoxAndWhiskerCategoryDataset extends AbstractDataset\n        implements BoxAndWhiskerCategoryDataset, RangeInfo, PublicCloneable { public int getColumnCount() { return this.data.getColumnCount(); } DefaultBoxAndWhiskerCategoryDataset(); void add(List list, Comparable rowKey, Comparable columnKey); void add(BoxAndWhiskerItem item, Comparable rowKey, Comparable columnKey); BoxAndWhiskerItem getItem(int row, int column); Number getValue(int row, int column); Number getValue(Comparable rowKey, Comparable columnKey); Number getMeanValue(int row, int column); Number getMeanValue(Comparable rowKey, Comparable columnKey); Number getMedianValue(int row, int column); Number getMedianValue(Comparable rowKey, Comparable columnKey); Number getQ1Value(int row, int column); Number getQ1Value(Comparable rowKey, Comparable columnKey); Number getQ3Value(int row, int column); Number getQ3Value(Comparable rowKey, Comparable columnKey); int getColumnIndex(Comparable key); Comparable getColumnKey(int column); List getColumnKeys(); int getRowIndex(Comparable key); Comparable getRowKey(int row); List getRowKeys(); int getRowCount(); int getColumnCount(); double getRangeLowerBound(boolean includeInterval); double getRangeUpperBound(boolean includeInterval); Range getRangeBounds(boolean includeInterval); Number getMinRegularValue(int row, int column); Number getMinRegularValue(Comparable rowKey, Comparable columnKey); Number getMaxRegularValue(int row, int column); Number getMaxRegularValue(Comparable rowKey, Comparable columnKey); Number getMinOutlier(int row, int column); Number getMinOutlier(Comparable rowKey, Comparable columnKey); Number getMaxOutlier(int row, int column); Number getMaxOutlier(Comparable rowKey, Comparable columnKey); List getOutliers(int row, int column); List getOutliers(Comparable rowKey, Comparable columnKey); boolean equals(Object obj); Object clone(); }\n", "projects": [{"project": "Chart", "id": 21}]}
{"method": "// Focal method:\npublic class DefaultBoxAndWhiskerCategoryDataset extends AbstractDataset\n        implements BoxAndWhiskerCategoryDataset, RangeInfo, PublicCloneable { public int getColumnIndex(Comparable key) { return this.data.getColumnIndex(key); } DefaultBoxAndWhiskerCategoryDataset(); void add(List list, Comparable rowKey, Comparable columnKey); void add(BoxAndWhiskerItem item, Comparable rowKey, Comparable columnKey); BoxAndWhiskerItem getItem(int row, int column); Number getValue(int row, int column); Number getValue(Comparable rowKey, Comparable columnKey); Number getMeanValue(int row, int column); Number getMeanValue(Comparable rowKey, Comparable columnKey); Number getMedianValue(int row, int column); Number getMedianValue(Comparable rowKey, Comparable columnKey); Number getQ1Value(int row, int column); Number getQ1Value(Comparable rowKey, Comparable columnKey); Number getQ3Value(int row, int column); Number getQ3Value(Comparable rowKey, Comparable columnKey); int getColumnIndex(Comparable key); Comparable getColumnKey(int column); List getColumnKeys(); int getRowIndex(Comparable key); Comparable getRowKey(int row); List getRowKeys(); int getRowCount(); int getColumnCount(); double getRangeLowerBound(boolean includeInterval); double getRangeUpperBound(boolean includeInterval); Range getRangeBounds(boolean includeInterval); Number getMinRegularValue(int row, int column); Number getMinRegularValue(Comparable rowKey, Comparable columnKey); Number getMaxRegularValue(int row, int column); Number getMaxRegularValue(Comparable rowKey, Comparable columnKey); Number getMinOutlier(int row, int column); Number getMinOutlier(Comparable rowKey, Comparable columnKey); Number getMaxOutlier(int row, int column); Number getMaxOutlier(Comparable rowKey, Comparable columnKey); List getOutliers(int row, int column); List getOutliers(Comparable rowKey, Comparable columnKey); boolean equals(Object obj); Object clone(); }\n", "projects": [{"project": "Chart", "id": 21}]}
{"method": "// Focal method:\npublic class DefaultBoxAndWhiskerCategoryDataset extends AbstractDataset\n        implements BoxAndWhiskerCategoryDataset, RangeInfo, PublicCloneable { public Number getMinRegularValue(int row, int column) { Number result = null; BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject( row, column); if (item != null) { result = item.getMinRegularValue(); } return result; } DefaultBoxAndWhiskerCategoryDataset(); void add(List list, Comparable rowKey, Comparable columnKey); void add(BoxAndWhiskerItem item, Comparable rowKey, Comparable columnKey); BoxAndWhiskerItem getItem(int row, int column); Number getValue(int row, int column); Number getValue(Comparable rowKey, Comparable columnKey); Number getMeanValue(int row, int column); Number getMeanValue(Comparable rowKey, Comparable columnKey); Number getMedianValue(int row, int column); Number getMedianValue(Comparable rowKey, Comparable columnKey); Number getQ1Value(int row, int column); Number getQ1Value(Comparable rowKey, Comparable columnKey); Number getQ3Value(int row, int column); Number getQ3Value(Comparable rowKey, Comparable columnKey); int getColumnIndex(Comparable key); Comparable getColumnKey(int column); List getColumnKeys(); int getRowIndex(Comparable key); Comparable getRowKey(int row); List getRowKeys(); int getRowCount(); int getColumnCount(); double getRangeLowerBound(boolean includeInterval); double getRangeUpperBound(boolean includeInterval); Range getRangeBounds(boolean includeInterval); Number getMinRegularValue(int row, int column); Number getMinRegularValue(Comparable rowKey, Comparable columnKey); Number getMaxRegularValue(int row, int column); Number getMaxRegularValue(Comparable rowKey, Comparable columnKey); Number getMinOutlier(int row, int column); Number getMinOutlier(Comparable rowKey, Comparable columnKey); Number getMaxOutlier(int row, int column); Number getMaxOutlier(Comparable rowKey, Comparable columnKey); List getOutliers(int row, int column); List getOutliers(Comparable rowKey, Comparable columnKey); boolean equals(Object obj); Object clone(); }\n", "projects": [{"project": "Chart", "id": 21}]}
{"method": "// Focal method:\npublic class DefaultBoxAndWhiskerCategoryDataset extends AbstractDataset\n        implements BoxAndWhiskerCategoryDataset, RangeInfo, PublicCloneable { public double getRangeUpperBound(boolean includeInterval) { return this.maximumRangeValue; } DefaultBoxAndWhiskerCategoryDataset(); void add(List list, Comparable rowKey, Comparable columnKey); void add(BoxAndWhiskerItem item, Comparable rowKey, Comparable columnKey); BoxAndWhiskerItem getItem(int row, int column); Number getValue(int row, int column); Number getValue(Comparable rowKey, Comparable columnKey); Number getMeanValue(int row, int column); Number getMeanValue(Comparable rowKey, Comparable columnKey); Number getMedianValue(int row, int column); Number getMedianValue(Comparable rowKey, Comparable columnKey); Number getQ1Value(int row, int column); Number getQ1Value(Comparable rowKey, Comparable columnKey); Number getQ3Value(int row, int column); Number getQ3Value(Comparable rowKey, Comparable columnKey); int getColumnIndex(Comparable key); Comparable getColumnKey(int column); List getColumnKeys(); int getRowIndex(Comparable key); Comparable getRowKey(int row); List getRowKeys(); int getRowCount(); int getColumnCount(); double getRangeLowerBound(boolean includeInterval); double getRangeUpperBound(boolean includeInterval); Range getRangeBounds(boolean includeInterval); Number getMinRegularValue(int row, int column); Number getMinRegularValue(Comparable rowKey, Comparable columnKey); Number getMaxRegularValue(int row, int column); Number getMaxRegularValue(Comparable rowKey, Comparable columnKey); Number getMinOutlier(int row, int column); Number getMinOutlier(Comparable rowKey, Comparable columnKey); Number getMaxOutlier(int row, int column); Number getMaxOutlier(Comparable rowKey, Comparable columnKey); List getOutliers(int row, int column); List getOutliers(Comparable rowKey, Comparable columnKey); boolean equals(Object obj); Object clone(); }\n", "projects": [{"project": "Chart", "id": 21}]}
{"method": "// Focal method:\npublic class DefaultBoxAndWhiskerCategoryDataset extends AbstractDataset\n        implements BoxAndWhiskerCategoryDataset, RangeInfo, PublicCloneable { public Number getMaxOutlier(Comparable rowKey, Comparable columnKey) { Number result = null; BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject( rowKey, columnKey); if (item != null) { result = item.getMaxOutlier(); } return result; } DefaultBoxAndWhiskerCategoryDataset(); void add(List list, Comparable rowKey, Comparable columnKey); void add(BoxAndWhiskerItem item, Comparable rowKey, Comparable columnKey); BoxAndWhiskerItem getItem(int row, int column); Number getValue(int row, int column); Number getValue(Comparable rowKey, Comparable columnKey); Number getMeanValue(int row, int column); Number getMeanValue(Comparable rowKey, Comparable columnKey); Number getMedianValue(int row, int column); Number getMedianValue(Comparable rowKey, Comparable columnKey); Number getQ1Value(int row, int column); Number getQ1Value(Comparable rowKey, Comparable columnKey); Number getQ3Value(int row, int column); Number getQ3Value(Comparable rowKey, Comparable columnKey); int getColumnIndex(Comparable key); Comparable getColumnKey(int column); List getColumnKeys(); int getRowIndex(Comparable key); Comparable getRowKey(int row); List getRowKeys(); int getRowCount(); int getColumnCount(); double getRangeLowerBound(boolean includeInterval); double getRangeUpperBound(boolean includeInterval); Range getRangeBounds(boolean includeInterval); Number getMinRegularValue(int row, int column); Number getMinRegularValue(Comparable rowKey, Comparable columnKey); Number getMaxRegularValue(int row, int column); Number getMaxRegularValue(Comparable rowKey, Comparable columnKey); Number getMinOutlier(int row, int column); Number getMinOutlier(Comparable rowKey, Comparable columnKey); Number getMaxOutlier(int row, int column); Number getMaxOutlier(Comparable rowKey, Comparable columnKey); List getOutliers(int row, int column); List getOutliers(Comparable rowKey, Comparable columnKey); boolean equals(Object obj); Object clone(); }\n", "projects": [{"project": "Chart", "id": 21}]}
{"method": "// Focal method:\npublic class DefaultBoxAndWhiskerCategoryDataset extends AbstractDataset\n        implements BoxAndWhiskerCategoryDataset, RangeInfo, PublicCloneable { public Number getMinRegularValue(Comparable rowKey, Comparable columnKey) { Number result = null; BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject( rowKey, columnKey); if (item != null) { result = item.getMinRegularValue(); } return result; } DefaultBoxAndWhiskerCategoryDataset(); void add(List list, Comparable rowKey, Comparable columnKey); void add(BoxAndWhiskerItem item, Comparable rowKey, Comparable columnKey); BoxAndWhiskerItem getItem(int row, int column); Number getValue(int row, int column); Number getValue(Comparable rowKey, Comparable columnKey); Number getMeanValue(int row, int column); Number getMeanValue(Comparable rowKey, Comparable columnKey); Number getMedianValue(int row, int column); Number getMedianValue(Comparable rowKey, Comparable columnKey); Number getQ1Value(int row, int column); Number getQ1Value(Comparable rowKey, Comparable columnKey); Number getQ3Value(int row, int column); Number getQ3Value(Comparable rowKey, Comparable columnKey); int getColumnIndex(Comparable key); Comparable getColumnKey(int column); List getColumnKeys(); int getRowIndex(Comparable key); Comparable getRowKey(int row); List getRowKeys(); int getRowCount(); int getColumnCount(); double getRangeLowerBound(boolean includeInterval); double getRangeUpperBound(boolean includeInterval); Range getRangeBounds(boolean includeInterval); Number getMinRegularValue(int row, int column); Number getMinRegularValue(Comparable rowKey, Comparable columnKey); Number getMaxRegularValue(int row, int column); Number getMaxRegularValue(Comparable rowKey, Comparable columnKey); Number getMinOutlier(int row, int column); Number getMinOutlier(Comparable rowKey, Comparable columnKey); Number getMaxOutlier(int row, int column); Number getMaxOutlier(Comparable rowKey, Comparable columnKey); List getOutliers(int row, int column); List getOutliers(Comparable rowKey, Comparable columnKey); boolean equals(Object obj); Object clone(); }\n", "projects": [{"project": "Chart", "id": 21}]}
{"method": "// Focal method:\npublic class DefaultBoxAndWhiskerCategoryDataset extends AbstractDataset\n        implements BoxAndWhiskerCategoryDataset, RangeInfo, PublicCloneable { public boolean equals(Object obj) { if (obj == this) { return true; } if (obj instanceof DefaultBoxAndWhiskerCategoryDataset) { DefaultBoxAndWhiskerCategoryDataset dataset = (DefaultBoxAndWhiskerCategoryDataset) obj; return ObjectUtilities.equal(this.data, dataset.data); } return false; } DefaultBoxAndWhiskerCategoryDataset(); void add(List list, Comparable rowKey, Comparable columnKey); void add(BoxAndWhiskerItem item, Comparable rowKey, Comparable columnKey); BoxAndWhiskerItem getItem(int row, int column); Number getValue(int row, int column); Number getValue(Comparable rowKey, Comparable columnKey); Number getMeanValue(int row, int column); Number getMeanValue(Comparable rowKey, Comparable columnKey); Number getMedianValue(int row, int column); Number getMedianValue(Comparable rowKey, Comparable columnKey); Number getQ1Value(int row, int column); Number getQ1Value(Comparable rowKey, Comparable columnKey); Number getQ3Value(int row, int column); Number getQ3Value(Comparable rowKey, Comparable columnKey); int getColumnIndex(Comparable key); Comparable getColumnKey(int column); List getColumnKeys(); int getRowIndex(Comparable key); Comparable getRowKey(int row); List getRowKeys(); int getRowCount(); int getColumnCount(); double getRangeLowerBound(boolean includeInterval); double getRangeUpperBound(boolean includeInterval); Range getRangeBounds(boolean includeInterval); Number getMinRegularValue(int row, int column); Number getMinRegularValue(Comparable rowKey, Comparable columnKey); Number getMaxRegularValue(int row, int column); Number getMaxRegularValue(Comparable rowKey, Comparable columnKey); Number getMinOutlier(int row, int column); Number getMinOutlier(Comparable rowKey, Comparable columnKey); Number getMaxOutlier(int row, int column); Number getMaxOutlier(Comparable rowKey, Comparable columnKey); List getOutliers(int row, int column); List getOutliers(Comparable rowKey, Comparable columnKey); boolean equals(Object obj); Object clone(); }\n", "projects": [{"project": "Chart", "id": 21}]}
{"method": "// Focal method:\npublic class DefaultBoxAndWhiskerCategoryDataset extends AbstractDataset\n        implements BoxAndWhiskerCategoryDataset, RangeInfo, PublicCloneable { public List getColumnKeys() { return this.data.getColumnKeys(); } DefaultBoxAndWhiskerCategoryDataset(); void add(List list, Comparable rowKey, Comparable columnKey); void add(BoxAndWhiskerItem item, Comparable rowKey, Comparable columnKey); BoxAndWhiskerItem getItem(int row, int column); Number getValue(int row, int column); Number getValue(Comparable rowKey, Comparable columnKey); Number getMeanValue(int row, int column); Number getMeanValue(Comparable rowKey, Comparable columnKey); Number getMedianValue(int row, int column); Number getMedianValue(Comparable rowKey, Comparable columnKey); Number getQ1Value(int row, int column); Number getQ1Value(Comparable rowKey, Comparable columnKey); Number getQ3Value(int row, int column); Number getQ3Value(Comparable rowKey, Comparable columnKey); int getColumnIndex(Comparable key); Comparable getColumnKey(int column); List getColumnKeys(); int getRowIndex(Comparable key); Comparable getRowKey(int row); List getRowKeys(); int getRowCount(); int getColumnCount(); double getRangeLowerBound(boolean includeInterval); double getRangeUpperBound(boolean includeInterval); Range getRangeBounds(boolean includeInterval); Number getMinRegularValue(int row, int column); Number getMinRegularValue(Comparable rowKey, Comparable columnKey); Number getMaxRegularValue(int row, int column); Number getMaxRegularValue(Comparable rowKey, Comparable columnKey); Number getMinOutlier(int row, int column); Number getMinOutlier(Comparable rowKey, Comparable columnKey); Number getMaxOutlier(int row, int column); Number getMaxOutlier(Comparable rowKey, Comparable columnKey); List getOutliers(int row, int column); List getOutliers(Comparable rowKey, Comparable columnKey); boolean equals(Object obj); Object clone(); }\n", "projects": [{"project": "Chart", "id": 21}]}
{"method": "// Focal method:\npublic class DefaultBoxAndWhiskerCategoryDataset extends AbstractDataset\n        implements BoxAndWhiskerCategoryDataset, RangeInfo, PublicCloneable { public void add(BoxAndWhiskerItem item, Comparable rowKey, Comparable columnKey) { this.data.addObject(item, rowKey, columnKey); int r = this.data.getRowIndex(rowKey); int c = this.data.getColumnIndex(columnKey); if ((this.maximumRangeValueRow == r && this.maximumRangeValueColumn == c) || (this.minimumRangeValueRow == r && this.minimumRangeValueColumn == c)) { updateBounds(); } else { double minval = Double.NaN; if (item.getMinOutlier() != null) { minval = item.getMinOutlier().doubleValue(); } double maxval = Double.NaN; if (item.getMaxOutlier() != null) { maxval = item.getMaxOutlier().doubleValue(); } if (Double.isNaN(this.maximumRangeValue)) { this.maximumRangeValue = maxval; this.maximumRangeValueRow = r; this.maximumRangeValueColumn = c; } else if (maxval > this.maximumRangeValue) { this.maximumRangeValue = maxval; this.maximumRangeValueRow = r; this.maximumRangeValueColumn = c; } if (Double.isNaN(this.minimumRangeValue)) { this.minimumRangeValue = minval; this.minimumRangeValueRow = r; this.minimumRangeValueColumn = c; } else if (minval < this.minimumRangeValue) { this.minimumRangeValue = minval; this.minimumRangeValueRow = r; this.minimumRangeValueColumn = c; } } this.rangeBounds = new Range(this.minimumRangeValue, this.maximumRangeValue); fireDatasetChanged(); } DefaultBoxAndWhiskerCategoryDataset(); void add(List list, Comparable rowKey, Comparable columnKey); void add(BoxAndWhiskerItem item, Comparable rowKey, Comparable columnKey); BoxAndWhiskerItem getItem(int row, int column); Number getValue(int row, int column); Number getValue(Comparable rowKey, Comparable columnKey); Number getMeanValue(int row, int column); Number getMeanValue(Comparable rowKey, Comparable columnKey); Number getMedianValue(int row, int column); Number getMedianValue(Comparable rowKey, Comparable columnKey); Number getQ1Value(int row, int column); Number getQ1Value(Comparable rowKey, Comparable columnKey); Number getQ3Value(int row, int column); Number getQ3Value(Comparable rowKey, Comparable columnKey); int getColumnIndex(Comparable key); Comparable getColumnKey(int column); List getColumnKeys(); int getRowIndex(Comparable key); Comparable getRowKey(int row); List getRowKeys(); int getRowCount(); int getColumnCount(); double getRangeLowerBound(boolean includeInterval); double getRangeUpperBound(boolean includeInterval); Range getRangeBounds(boolean includeInterval); Number getMinRegularValue(int row, int column); Number getMinRegularValue(Comparable rowKey, Comparable columnKey); Number getMaxRegularValue(int row, int column); Number getMaxRegularValue(Comparable rowKey, Comparable columnKey); Number getMinOutlier(int row, int column); Number getMinOutlier(Comparable rowKey, Comparable columnKey); Number getMaxOutlier(int row, int column); Number getMaxOutlier(Comparable rowKey, Comparable columnKey); List getOutliers(int row, int column); List getOutliers(Comparable rowKey, Comparable columnKey); boolean equals(Object obj); Object clone(); }\n// Class definition of input parameters:\n// public class BoxAndWhiskerItem implements Serializable {\npublic BoxAndWhiskerItem(Number mean, Number median, Number q1, Number q3, Number minRegularValue, Number maxRegularValue, Number minOutlier, Number maxOutlier, List outliers) { this.mean = mean; this.median = median; this.q1 = q1; this.q3 = q3; this.minRegularValue = minRegularValue; this.maxRegularValue = maxRegularValue; this.minOutlier = minOutlier; this.maxOutlier = maxOutlier; this.outliers = outliers; }\npublic BoxAndWhiskerItem(double mean, double median, double q1, double q3, double minRegularValue, double maxRegularValue, double minOutlier, double maxOutlier, List outliers) { this(new Double(mean), new Double(median), new Double(q1), new Double(q3), new Double(minRegularValue), new Double(maxRegularValue), new Double(minOutlier), new Double(maxOutlier), outliers); }}\n", "projects": [{"project": "Chart", "id": 21}]}
{"method": "// Focal method:\npublic class DefaultBoxAndWhiskerCategoryDataset extends AbstractDataset\n        implements BoxAndWhiskerCategoryDataset, RangeInfo, PublicCloneable { public Comparable getColumnKey(int column) { return this.data.getColumnKey(column); } DefaultBoxAndWhiskerCategoryDataset(); void add(List list, Comparable rowKey, Comparable columnKey); void add(BoxAndWhiskerItem item, Comparable rowKey, Comparable columnKey); BoxAndWhiskerItem getItem(int row, int column); Number getValue(int row, int column); Number getValue(Comparable rowKey, Comparable columnKey); Number getMeanValue(int row, int column); Number getMeanValue(Comparable rowKey, Comparable columnKey); Number getMedianValue(int row, int column); Number getMedianValue(Comparable rowKey, Comparable columnKey); Number getQ1Value(int row, int column); Number getQ1Value(Comparable rowKey, Comparable columnKey); Number getQ3Value(int row, int column); Number getQ3Value(Comparable rowKey, Comparable columnKey); int getColumnIndex(Comparable key); Comparable getColumnKey(int column); List getColumnKeys(); int getRowIndex(Comparable key); Comparable getRowKey(int row); List getRowKeys(); int getRowCount(); int getColumnCount(); double getRangeLowerBound(boolean includeInterval); double getRangeUpperBound(boolean includeInterval); Range getRangeBounds(boolean includeInterval); Number getMinRegularValue(int row, int column); Number getMinRegularValue(Comparable rowKey, Comparable columnKey); Number getMaxRegularValue(int row, int column); Number getMaxRegularValue(Comparable rowKey, Comparable columnKey); Number getMinOutlier(int row, int column); Number getMinOutlier(Comparable rowKey, Comparable columnKey); Number getMaxOutlier(int row, int column); Number getMaxOutlier(Comparable rowKey, Comparable columnKey); List getOutliers(int row, int column); List getOutliers(Comparable rowKey, Comparable columnKey); boolean equals(Object obj); Object clone(); }\n", "projects": [{"project": "Chart", "id": 21}]}
{"method": "// Focal method:\npublic abstract class Parser implements CommandLineParser\n{ public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException { return parse(options, arguments, properties, false); } CommandLine parse(Options options, String[] arguments); CommandLine parse(Options options, String[] arguments, Properties properties); CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption); CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption); void processArgs(Option opt, ListIterator iter); }\n// Avaible SubClasses:\n// public class GnuParser extends Parser {\n// public class BasicParser extends Parser {\n// public class PosixParser extends Parser {\n// Class definition of input parameters:\n// public class Options implements Serializable {}\n", "projects": [{"project": "Cli", "id": 30}]}
{"method": "// Focal method:\npublic abstract class Parser implements CommandLineParser\n{ public void processArgs(Option opt, ListIterator iter) throws ParseException { while (iter.hasNext()) { String str = (String) iter.next(); if (getOptions().hasOption(str) && str.startsWith(\"-\")) { iter.previous(); break; } try { opt.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(str)); } catch (RuntimeException exp) { iter.previous(); break; } } if (opt.getValues() == null && !opt.hasOptionalArg()) { throw new MissingArgumentException(opt); } } CommandLine parse(Options options, String[] arguments); CommandLine parse(Options options, String[] arguments, Properties properties); CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption); CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption); void processArgs(Option opt, ListIterator iter); }\n// Avaible SubClasses:\n// public class GnuParser extends Parser {\n// public class BasicParser extends Parser {\n// public class PosixParser extends Parser {\n// Class definition of input parameters:\n// public class Option implements Cloneable, Serializable {\npublic Option(String opt, String description) throws IllegalArgumentException { this(opt, null, false, description); }\npublic Option(String opt, boolean hasArg, String description) throws IllegalArgumentException { this(opt, null, hasArg, description); }\npublic Option(String opt, String longOpt, boolean hasArg, String description) throws IllegalArgumentException { OptionValidator.validateOption(opt); this.opt = opt; this.longOpt = longOpt; if (hasArg) { this.numberOfArgs = 1; } this.description = description; }}\n", "projects": [{"project": "Cli", "id": 30}]}
{"method": "// Focal method:\npublic abstract class Parser implements CommandLineParser\n{ public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException { return parse(options, arguments, null, stopAtNonOption); } CommandLine parse(Options options, String[] arguments); CommandLine parse(Options options, String[] arguments, Properties properties); CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption); CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption); void processArgs(Option opt, ListIterator iter); }\n// Avaible SubClasses:\n// public class GnuParser extends Parser {\n// public class BasicParser extends Parser {\n// public class PosixParser extends Parser {\n// Class definition of input parameters:\n// public class Options implements Serializable {}\n", "projects": [{"project": "Cli", "id": 30}]}
{"method": "// Focal method:\npublic class DefaultParser implements CommandLineParser\n{     public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException { return parse(options, arguments, null, stopAtNonOption); } CommandLine parse(Options options, String[] arguments); CommandLine parse(Options options, String[] arguments, Properties properties); CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption); CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption); }\n// Class definition of input parameters:\n// public class Options implements Serializable {}\n", "projects": [{"project": "Cli", "id": 30}]}
{"method": "// Focal method:\npublic abstract class Parser implements CommandLineParser\n{ public CommandLine parse(Options options, String[] arguments) throws ParseException { return parse(options, arguments, null, false); } CommandLine parse(Options options, String[] arguments); CommandLine parse(Options options, String[] arguments, Properties properties); CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption); CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption); void processArgs(Option opt, ListIterator iter); }\n// Avaible SubClasses:\n// public class GnuParser extends Parser {\n// public class BasicParser extends Parser {\n// public class PosixParser extends Parser {\n// Class definition of input parameters:\n// public class Options implements Serializable {}\n", "projects": [{"project": "Cli", "id": 30}]}
{"method": "// Focal method:\npublic class DefaultParser implements CommandLineParser\n{     public CommandLine parse(Options options, String[] arguments) throws ParseException { return parse(options, arguments, null); } CommandLine parse(Options options, String[] arguments); CommandLine parse(Options options, String[] arguments, Properties properties); CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption); CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption); }\n// Class definition of input parameters:\n// public class Options implements Serializable {}\n", "projects": [{"project": "Cli", "id": 30}]}
{"method": "// Focal method:\npublic class DefaultParser implements CommandLineParser\n{     public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException { this.options = options; this.stopAtNonOption = stopAtNonOption; skipParsing = false; currentOption = null; expectedOpts = new ArrayList(options.getRequiredOptions()); for (Iterator it = options.getOptionGroups().iterator(); it.hasNext();) { OptionGroup group = (OptionGroup) it.next(); group.setSelected(null); } cmd = new CommandLine(); if (arguments != null) { for (int i = 0; i < arguments.length; i++) { handleToken(arguments[i]); } } checkRequiredArgs(); handleProperties(properties); checkRequiredOptions(); return cmd; } CommandLine parse(Options options, String[] arguments); CommandLine parse(Options options, String[] arguments, Properties properties); CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption); CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption); }\n// Class definition of input parameters:\n// public class Options implements Serializable {}\n", "projects": [{"project": "Cli", "id": 30}]}
{"method": "// Focal method:\npublic abstract class Parser implements CommandLineParser\n{ public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException { for (Iterator it = options.helpOptions().iterator(); it.hasNext();) { Option opt = (Option) it.next(); opt.clearValues(); } for (Iterator it = options.getOptionGroups().iterator(); it.hasNext();) { OptionGroup group = (OptionGroup) it.next(); group.setSelected(null); } setOptions(options); cmd = new CommandLine(); boolean eatTheRest = false; if (arguments == null) { arguments = new String[0]; } List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption)); ListIterator iterator = tokenList.listIterator(); while (iterator.hasNext()) { String t = (String) iterator.next(); if (\"--\".equals(t)) { eatTheRest = true; } else if (\"-\".equals(t)) { if (stopAtNonOption) { eatTheRest = true; } else { cmd.addArg(t); } } else if (t.startsWith(\"-\")) { if (stopAtNonOption && !getOptions().hasOption(t)) { eatTheRest = true; cmd.addArg(t); } else { processOption(t, iterator); } } else { cmd.addArg(t); if (stopAtNonOption) { eatTheRest = true; } } if (eatTheRest) { while (iterator.hasNext()) { String str = (String) iterator.next(); if (!\"--\".equals(str)) { cmd.addArg(str); } } } } processProperties(properties); checkRequiredOptions(); return cmd; } CommandLine parse(Options options, String[] arguments); CommandLine parse(Options options, String[] arguments, Properties properties); CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption); CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption); void processArgs(Option opt, ListIterator iter); }\n// Avaible SubClasses:\n// public class GnuParser extends Parser {\n// public class BasicParser extends Parser {\n// public class PosixParser extends Parser {\n// Class definition of input parameters:\n// public class Options implements Serializable {}\n", "projects": [{"project": "Cli", "id": 30}]}
{"method": "// Focal method:\npublic class DefaultParser implements CommandLineParser\n{     public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException { return parse(options, arguments, properties, false); } CommandLine parse(Options options, String[] arguments); CommandLine parse(Options options, String[] arguments, Properties properties); CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption); CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption); }\n// Class definition of input parameters:\n// public class Options implements Serializable {}\n", "projects": [{"project": "Cli", "id": 30}]}
{"method": "// Focal method:\npublic class DefaultParser implements CommandLineParser\n{ public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException { return parse(options, arguments, null, stopAtNonOption); } CommandLine parse(Options options, String[] arguments); CommandLine parse(Options options, String[] arguments, Properties properties); CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption); CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption); }\n// Class definition of input parameters:\n// public class Options implements Serializable {}\n", "projects": [{"project": "Cli", "id": 37}]}
{"method": "// Focal method:\npublic class DefaultParser implements CommandLineParser\n{ public CommandLine parse(Options options, String[] arguments) throws ParseException { return parse(options, arguments, null); } CommandLine parse(Options options, String[] arguments); CommandLine parse(Options options, String[] arguments, Properties properties); CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption); CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption); }\n// Class definition of input parameters:\n// public class Options implements Serializable {}\n", "projects": [{"project": "Cli", "id": 37}]}
{"method": "// Focal method:\npublic class DefaultParser implements CommandLineParser\n{ public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException { this.options = options; this.stopAtNonOption = stopAtNonOption; skipParsing = false; currentOption = null; expectedOpts = new ArrayList(options.getRequiredOptions()); for (OptionGroup group : options.getOptionGroups()) { group.setSelected(null); } cmd = new CommandLine(); if (arguments != null) { for (String argument : arguments) { handleToken(argument); } } checkRequiredArgs(); handleProperties(properties); checkRequiredOptions(); return cmd; } CommandLine parse(Options options, String[] arguments); CommandLine parse(Options options, String[] arguments, Properties properties); CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption); CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption); }\n// Class definition of input parameters:\n// public class Options implements Serializable {}\n", "projects": [{"project": "Cli", "id": 37}]}
{"method": "// Focal method:\npublic class DefaultParser implements CommandLineParser\n{ public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException { return parse(options, arguments, properties, false); } CommandLine parse(Options options, String[] arguments); CommandLine parse(Options options, String[] arguments, Properties properties); CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption); CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption); }\n// Class definition of input parameters:\n// public class Options implements Serializable {}\n", "projects": [{"project": "Cli", "id": 37}]}
{"method": "// Focal method:\npublic final class CSVParser implements Iterable<CSVRecord>, Closeable { public Map<String, Integer> getHeaderMap() { return this.headerMap == null ? null : new LinkedHashMap<String, Integer>(this.headerMap); } CSVParser(final Reader reader, final CSVFormat format); static CSVParser parse(File file, final CSVFormat format); static CSVParser parse(String string, final CSVFormat format); static CSVParser parse(URL url, Charset charset, final CSVFormat format); void close(); long getCurrentLineNumber(); Map<String, Integer> getHeaderMap(); long getRecordNumber(); List<CSVRecord> getRecords(); boolean isClosed(); Iterator<CSVRecord> iterator(); }\n", "projects": [{"project": "Csv", "id": 4}]}
{"method": "// Focal method:\npublic final class CSVParser implements Iterable<CSVRecord>, Closeable { public Iterator<CSVRecord> iterator() { return new Iterator<CSVRecord>() { private CSVRecord current; private CSVRecord getNextRecord() { try { return CSVParser.this.nextRecord(); } catch (final IOException e) { throw new RuntimeException(e); } } public boolean hasNext() { if (CSVParser.this.isClosed()) { return false; } if (this.current == null) { this.current = this.getNextRecord(); } return this.current != null; } public CSVRecord next() { if (CSVParser.this.isClosed()) { throw new NoSuchElementException(\"CSVParser has been closed\"); } CSVRecord next = this.current; this.current = null; if (next == null) { next = this.getNextRecord(); if (next == null) { throw new NoSuchElementException(\"No more CSV records available\"); } } return next; } public void remove() { throw new UnsupportedOperationException(); } }; } CSVParser(final Reader reader, final CSVFormat format); static CSVParser parse(File file, final CSVFormat format); static CSVParser parse(String string, final CSVFormat format); static CSVParser parse(URL url, Charset charset, final CSVFormat format); void close(); long getCurrentLineNumber(); Map<String, Integer> getHeaderMap(); long getRecordNumber(); List<CSVRecord> getRecords(); boolean isClosed(); Iterator<CSVRecord> iterator(); }\n", "projects": [{"project": "Csv", "id": 4}]}
{"method": "// Focal method:\npublic final class CSVParser implements Iterable<CSVRecord>, Closeable { public boolean isClosed() { return this.lexer.isClosed(); } CSVParser(final Reader reader, final CSVFormat format); static CSVParser parse(File file, final CSVFormat format); static CSVParser parse(String string, final CSVFormat format); static CSVParser parse(URL url, Charset charset, final CSVFormat format); void close(); long getCurrentLineNumber(); Map<String, Integer> getHeaderMap(); long getRecordNumber(); List<CSVRecord> getRecords(); boolean isClosed(); Iterator<CSVRecord> iterator(); }\n", "projects": [{"project": "Csv", "id": 4}]}
{"method": "// Focal method:\npublic final class CSVParser implements Iterable<CSVRecord>, Closeable { public long getRecordNumber() { return this.recordNumber; } CSVParser(final Reader reader, final CSVFormat format); static CSVParser parse(File file, final CSVFormat format); static CSVParser parse(String string, final CSVFormat format); static CSVParser parse(URL url, Charset charset, final CSVFormat format); void close(); long getCurrentLineNumber(); Map<String, Integer> getHeaderMap(); long getRecordNumber(); List<CSVRecord> getRecords(); boolean isClosed(); Iterator<CSVRecord> iterator(); }\n", "projects": [{"project": "Csv", "id": 4}]}
{"method": "// Focal method:\npublic final class CSVParser implements Iterable<CSVRecord>, Closeable { public static CSVParser parse(URL url, Charset charset, final CSVFormat format) throws IOException { Assertions.notNull(url, \"url\"); Assertions.notNull(charset, \"charset\"); Assertions.notNull(format, \"format\"); return new CSVParser(new InputStreamReader(url.openStream(), charset == null ? Charset.forName(\"UTF-8\") : charset), format); } CSVParser(final Reader reader, final CSVFormat format); static CSVParser parse(File file, final CSVFormat format); static CSVParser parse(String string, final CSVFormat format); static CSVParser parse(URL url, Charset charset, final CSVFormat format); void close(); long getCurrentLineNumber(); Map<String, Integer> getHeaderMap(); long getRecordNumber(); List<CSVRecord> getRecords(); boolean isClosed(); Iterator<CSVRecord> iterator(); }\n", "projects": [{"project": "Csv", "id": 4}]}
{"method": "// Focal method:\npublic final class CSVParser implements Iterable<CSVRecord>, Closeable { public long getCurrentLineNumber() { return this.lexer.getCurrentLineNumber(); } CSVParser(final Reader reader, final CSVFormat format); static CSVParser parse(File file, final CSVFormat format); static CSVParser parse(String string, final CSVFormat format); static CSVParser parse(URL url, Charset charset, final CSVFormat format); void close(); long getCurrentLineNumber(); Map<String, Integer> getHeaderMap(); long getRecordNumber(); List<CSVRecord> getRecords(); boolean isClosed(); Iterator<CSVRecord> iterator(); }\n", "projects": [{"project": "Csv", "id": 4}]}
{"method": "// Focal method:\npublic final class CSVParser implements Iterable<CSVRecord>, Closeable { public static CSVParser parse(File file, final CSVFormat format) throws IOException { Assertions.notNull(file, \"file\"); Assertions.notNull(format, \"format\"); return new CSVParser(new FileReader(file), format); } CSVParser(final Reader reader, final CSVFormat format); static CSVParser parse(File file, final CSVFormat format); static CSVParser parse(String string, final CSVFormat format); static CSVParser parse(URL url, Charset charset, final CSVFormat format); void close(); long getCurrentLineNumber(); Map<String, Integer> getHeaderMap(); long getRecordNumber(); List<CSVRecord> getRecords(); boolean isClosed(); Iterator<CSVRecord> iterator(); }\n", "projects": [{"project": "Csv", "id": 4}]}
{"method": "// Focal method:\npublic final class CSVParser implements Iterable<CSVRecord>, Closeable { public void close() throws IOException { if (this.lexer != null) { this.lexer.close(); } } CSVParser(final Reader reader, final CSVFormat format); static CSVParser parse(File file, final CSVFormat format); static CSVParser parse(String string, final CSVFormat format); static CSVParser parse(URL url, Charset charset, final CSVFormat format); void close(); long getCurrentLineNumber(); Map<String, Integer> getHeaderMap(); long getRecordNumber(); List<CSVRecord> getRecords(); boolean isClosed(); Iterator<CSVRecord> iterator(); }\n", "projects": [{"project": "Csv", "id": 4}]}
{"method": "// Focal method:\npublic final class CSVParser implements Iterable<CSVRecord>, Closeable { public List<CSVRecord> getRecords() throws IOException { final List<CSVRecord> records = new ArrayList<CSVRecord>(); CSVRecord rec; while ((rec = this.nextRecord()) != null) { records.add(rec); } return records; } CSVParser(final Reader reader, final CSVFormat format); static CSVParser parse(File file, final CSVFormat format); static CSVParser parse(String string, final CSVFormat format); static CSVParser parse(URL url, Charset charset, final CSVFormat format); void close(); long getCurrentLineNumber(); Map<String, Integer> getHeaderMap(); long getRecordNumber(); List<CSVRecord> getRecords(); boolean isClosed(); Iterator<CSVRecord> iterator(); }\n", "projects": [{"project": "Csv", "id": 4}]}
{"method": "// Focal method:\npublic final class CSVParser implements Iterable<CSVRecord>, Closeable { public static CSVParser parse(String string, final CSVFormat format) throws IOException { Assertions.notNull(string, \"string\"); Assertions.notNull(format, \"format\"); return new CSVParser(new StringReader(string), format); } CSVParser(final Reader reader, final CSVFormat format); static CSVParser parse(File file, final CSVFormat format); static CSVParser parse(String string, final CSVFormat format); static CSVParser parse(URL url, Charset charset, final CSVFormat format); void close(); long getCurrentLineNumber(); Map<String, Integer> getHeaderMap(); long getRecordNumber(); List<CSVRecord> getRecords(); boolean isClosed(); Iterator<CSVRecord> iterator(); }\n", "projects": [{"project": "Csv", "id": 4}]}
{"method": "// Focal method:\npublic final class CSVParser implements Iterable<CSVRecord>, Closeable { public static CSVParser parse(final URL url, final Charset charset, final CSVFormat format) throws IOException { Assertions.notNull(url, \"url\"); Assertions.notNull(charset, \"charset\"); Assertions.notNull(format, \"format\"); return new CSVParser(new InputStreamReader(url.openStream(), charset), format); } CSVParser(final Reader reader, final CSVFormat format); @SuppressWarnings(\"resource\") CSVParser(final Reader reader, final CSVFormat format, final long characterOffset, final long recordNumber); @SuppressWarnings(\"resource\") static CSVParser parse(final File file, final Charset charset, final CSVFormat format); @SuppressWarnings(\"resource\") static CSVParser parse(final InputStream inputStream, final Charset charset, final CSVFormat format); static CSVParser parse(final Path path, final Charset charset, final CSVFormat format); static CSVParser parse(final Reader reader, final CSVFormat format); static CSVParser parse(final String string, final CSVFormat format); static CSVParser parse(final URL url, final Charset charset, final CSVFormat format); @Override void close(); long getCurrentLineNumber(); String getFirstEndOfLine(); Map<String, Integer> getHeaderMap(); long getRecordNumber(); List<CSVRecord> getRecords(); boolean isClosed(); @Override Iterator<CSVRecord> iterator(); }\n", "projects": [{"project": "Csv", "id": 16}]}
{"method": "// Focal method:\npublic final class CSVParser implements Iterable<CSVRecord>, Closeable { public long getRecordNumber() { return this.recordNumber; } CSVParser(final Reader reader, final CSVFormat format); @SuppressWarnings(\"resource\") CSVParser(final Reader reader, final CSVFormat format, final long characterOffset, final long recordNumber); @SuppressWarnings(\"resource\") static CSVParser parse(final File file, final Charset charset, final CSVFormat format); @SuppressWarnings(\"resource\") static CSVParser parse(final InputStream inputStream, final Charset charset, final CSVFormat format); static CSVParser parse(final Path path, final Charset charset, final CSVFormat format); static CSVParser parse(final Reader reader, final CSVFormat format); static CSVParser parse(final String string, final CSVFormat format); static CSVParser parse(final URL url, final Charset charset, final CSVFormat format); @Override void close(); long getCurrentLineNumber(); String getFirstEndOfLine(); Map<String, Integer> getHeaderMap(); long getRecordNumber(); List<CSVRecord> getRecords(); boolean isClosed(); @Override Iterator<CSVRecord> iterator(); }\n", "projects": [{"project": "Csv", "id": 16}]}
{"method": "// Focal method:\npublic final class CSVParser implements Iterable<CSVRecord>, Closeable { public boolean isClosed() { return this.lexer.isClosed(); } CSVParser(final Reader reader, final CSVFormat format); @SuppressWarnings(\"resource\") CSVParser(final Reader reader, final CSVFormat format, final long characterOffset, final long recordNumber); @SuppressWarnings(\"resource\") static CSVParser parse(final File file, final Charset charset, final CSVFormat format); @SuppressWarnings(\"resource\") static CSVParser parse(final InputStream inputStream, final Charset charset, final CSVFormat format); static CSVParser parse(final Path path, final Charset charset, final CSVFormat format); static CSVParser parse(final Reader reader, final CSVFormat format); static CSVParser parse(final String string, final CSVFormat format); static CSVParser parse(final URL url, final Charset charset, final CSVFormat format); @Override void close(); long getCurrentLineNumber(); String getFirstEndOfLine(); Map<String, Integer> getHeaderMap(); long getRecordNumber(); List<CSVRecord> getRecords(); boolean isClosed(); @Override Iterator<CSVRecord> iterator(); }\n", "projects": [{"project": "Csv", "id": 16}]}
{"method": "// Focal method:\npublic final class CSVParser implements Iterable<CSVRecord>, Closeable { public Map<String, Integer> getHeaderMap() { return this.headerMap == null ? null : new LinkedHashMap<>(this.headerMap); } CSVParser(final Reader reader, final CSVFormat format); @SuppressWarnings(\"resource\") CSVParser(final Reader reader, final CSVFormat format, final long characterOffset, final long recordNumber); @SuppressWarnings(\"resource\") static CSVParser parse(final File file, final Charset charset, final CSVFormat format); @SuppressWarnings(\"resource\") static CSVParser parse(final InputStream inputStream, final Charset charset, final CSVFormat format); static CSVParser parse(final Path path, final Charset charset, final CSVFormat format); static CSVParser parse(final Reader reader, final CSVFormat format); static CSVParser parse(final String string, final CSVFormat format); static CSVParser parse(final URL url, final Charset charset, final CSVFormat format); @Override void close(); long getCurrentLineNumber(); String getFirstEndOfLine(); Map<String, Integer> getHeaderMap(); long getRecordNumber(); List<CSVRecord> getRecords(); boolean isClosed(); @Override Iterator<CSVRecord> iterator(); }\n", "projects": [{"project": "Csv", "id": 16}]}
{"method": "// Focal method:\npublic final class CSVParser implements Iterable<CSVRecord>, Closeable { public String getFirstEndOfLine() { return lexer.getFirstEol(); } CSVParser(final Reader reader, final CSVFormat format); @SuppressWarnings(\"resource\") CSVParser(final Reader reader, final CSVFormat format, final long characterOffset, final long recordNumber); @SuppressWarnings(\"resource\") static CSVParser parse(final File file, final Charset charset, final CSVFormat format); @SuppressWarnings(\"resource\") static CSVParser parse(final InputStream inputStream, final Charset charset, final CSVFormat format); static CSVParser parse(final Path path, final Charset charset, final CSVFormat format); static CSVParser parse(final Reader reader, final CSVFormat format); static CSVParser parse(final String string, final CSVFormat format); static CSVParser parse(final URL url, final Charset charset, final CSVFormat format); @Override void close(); long getCurrentLineNumber(); String getFirstEndOfLine(); Map<String, Integer> getHeaderMap(); long getRecordNumber(); List<CSVRecord> getRecords(); boolean isClosed(); @Override Iterator<CSVRecord> iterator(); }\n", "projects": [{"project": "Csv", "id": 16}]}
{"method": "// Focal method:\npublic final class CSVParser implements Iterable<CSVRecord>, Closeable { @Override public void close() throws IOException { if (this.lexer != null) { this.lexer.close(); } } CSVParser(final Reader reader, final CSVFormat format); @SuppressWarnings(\"resource\") CSVParser(final Reader reader, final CSVFormat format, final long characterOffset, final long recordNumber); @SuppressWarnings(\"resource\") static CSVParser parse(final File file, final Charset charset, final CSVFormat format); @SuppressWarnings(\"resource\") static CSVParser parse(final InputStream inputStream, final Charset charset, final CSVFormat format); static CSVParser parse(final Path path, final Charset charset, final CSVFormat format); static CSVParser parse(final Reader reader, final CSVFormat format); static CSVParser parse(final String string, final CSVFormat format); static CSVParser parse(final URL url, final Charset charset, final CSVFormat format); @Override void close(); long getCurrentLineNumber(); String getFirstEndOfLine(); Map<String, Integer> getHeaderMap(); long getRecordNumber(); List<CSVRecord> getRecords(); boolean isClosed(); @Override Iterator<CSVRecord> iterator(); }\n", "projects": [{"project": "Csv", "id": 16}]}
{"method": "// Focal method:\npublic final class CSVParser implements Iterable<CSVRecord>, Closeable { public List<CSVRecord> getRecords() throws IOException { CSVRecord rec; final List<CSVRecord> records = new ArrayList<>(); while ((rec = this.nextRecord()) != null) { records.add(rec); } return records; } CSVParser(final Reader reader, final CSVFormat format); @SuppressWarnings(\"resource\") CSVParser(final Reader reader, final CSVFormat format, final long characterOffset, final long recordNumber); @SuppressWarnings(\"resource\") static CSVParser parse(final File file, final Charset charset, final CSVFormat format); @SuppressWarnings(\"resource\") static CSVParser parse(final InputStream inputStream, final Charset charset, final CSVFormat format); static CSVParser parse(final Path path, final Charset charset, final CSVFormat format); static CSVParser parse(final Reader reader, final CSVFormat format); static CSVParser parse(final String string, final CSVFormat format); static CSVParser parse(final URL url, final Charset charset, final CSVFormat format); @Override void close(); long getCurrentLineNumber(); String getFirstEndOfLine(); Map<String, Integer> getHeaderMap(); long getRecordNumber(); List<CSVRecord> getRecords(); boolean isClosed(); @Override Iterator<CSVRecord> iterator(); }\n", "projects": [{"project": "Csv", "id": 16}]}
{"method": "// Focal method:\npublic final class CSVParser implements Iterable<CSVRecord>, Closeable { public static CSVParser parse(final Path path, final Charset charset, final CSVFormat format) throws IOException { Assertions.notNull(path, \"path\"); Assertions.notNull(format, \"format\"); return parse(Files.newBufferedReader(path, charset), format); } CSVParser(final Reader reader, final CSVFormat format); @SuppressWarnings(\"resource\") CSVParser(final Reader reader, final CSVFormat format, final long characterOffset, final long recordNumber); @SuppressWarnings(\"resource\") static CSVParser parse(final File file, final Charset charset, final CSVFormat format); @SuppressWarnings(\"resource\") static CSVParser parse(final InputStream inputStream, final Charset charset, final CSVFormat format); static CSVParser parse(final Path path, final Charset charset, final CSVFormat format); static CSVParser parse(final Reader reader, final CSVFormat format); static CSVParser parse(final String string, final CSVFormat format); static CSVParser parse(final URL url, final Charset charset, final CSVFormat format); @Override void close(); long getCurrentLineNumber(); String getFirstEndOfLine(); Map<String, Integer> getHeaderMap(); long getRecordNumber(); List<CSVRecord> getRecords(); boolean isClosed(); @Override Iterator<CSVRecord> iterator(); }\n", "projects": [{"project": "Csv", "id": 16}]}
{"method": "// Focal method:\npublic final class CSVParser implements Iterable<CSVRecord>, Closeable { public static CSVParser parse(final String string, final CSVFormat format) throws IOException { Assertions.notNull(string, \"string\"); Assertions.notNull(format, \"format\"); return new CSVParser(new StringReader(string), format); } CSVParser(final Reader reader, final CSVFormat format); @SuppressWarnings(\"resource\") CSVParser(final Reader reader, final CSVFormat format, final long characterOffset, final long recordNumber); @SuppressWarnings(\"resource\") static CSVParser parse(final File file, final Charset charset, final CSVFormat format); @SuppressWarnings(\"resource\") static CSVParser parse(final InputStream inputStream, final Charset charset, final CSVFormat format); static CSVParser parse(final Path path, final Charset charset, final CSVFormat format); static CSVParser parse(final Reader reader, final CSVFormat format); static CSVParser parse(final String string, final CSVFormat format); static CSVParser parse(final URL url, final Charset charset, final CSVFormat format); @Override void close(); long getCurrentLineNumber(); String getFirstEndOfLine(); Map<String, Integer> getHeaderMap(); long getRecordNumber(); List<CSVRecord> getRecords(); boolean isClosed(); @Override Iterator<CSVRecord> iterator(); }\n", "projects": [{"project": "Csv", "id": 16}]}
{"method": "// Focal method:\npublic final class CSVParser implements Iterable<CSVRecord>, Closeable { @SuppressWarnings(\"resource\") public static CSVParser parse(final File file, final Charset charset, final CSVFormat format) throws IOException { Assertions.notNull(file, \"file\"); Assertions.notNull(format, \"format\"); return new CSVParser(new InputStreamReader(new FileInputStream(file), charset), format); } CSVParser(final Reader reader, final CSVFormat format); @SuppressWarnings(\"resource\") CSVParser(final Reader reader, final CSVFormat format, final long characterOffset, final long recordNumber); @SuppressWarnings(\"resource\") static CSVParser parse(final File file, final Charset charset, final CSVFormat format); @SuppressWarnings(\"resource\") static CSVParser parse(final InputStream inputStream, final Charset charset, final CSVFormat format); static CSVParser parse(final Path path, final Charset charset, final CSVFormat format); static CSVParser parse(final Reader reader, final CSVFormat format); static CSVParser parse(final String string, final CSVFormat format); static CSVParser parse(final URL url, final Charset charset, final CSVFormat format); @Override void close(); long getCurrentLineNumber(); String getFirstEndOfLine(); Map<String, Integer> getHeaderMap(); long getRecordNumber(); List<CSVRecord> getRecords(); boolean isClosed(); @Override Iterator<CSVRecord> iterator(); }\n", "projects": [{"project": "Csv", "id": 16}]}
{"method": "// Focal method:\npublic final class CSVParser implements Iterable<CSVRecord>, Closeable { public static CSVParser parse(final Reader reader, final CSVFormat format) throws IOException { return new CSVParser(reader, format); } CSVParser(final Reader reader, final CSVFormat format); @SuppressWarnings(\"resource\") CSVParser(final Reader reader, final CSVFormat format, final long characterOffset, final long recordNumber); @SuppressWarnings(\"resource\") static CSVParser parse(final File file, final Charset charset, final CSVFormat format); @SuppressWarnings(\"resource\") static CSVParser parse(final InputStream inputStream, final Charset charset, final CSVFormat format); static CSVParser parse(final Path path, final Charset charset, final CSVFormat format); static CSVParser parse(final Reader reader, final CSVFormat format); static CSVParser parse(final String string, final CSVFormat format); static CSVParser parse(final URL url, final Charset charset, final CSVFormat format); @Override void close(); long getCurrentLineNumber(); String getFirstEndOfLine(); Map<String, Integer> getHeaderMap(); long getRecordNumber(); List<CSVRecord> getRecords(); boolean isClosed(); @Override Iterator<CSVRecord> iterator(); }\n", "projects": [{"project": "Csv", "id": 16}]}
{"method": "// Focal method:\npublic final class CSVParser implements Iterable<CSVRecord>, Closeable { public long getCurrentLineNumber() { return this.lexer.getCurrentLineNumber(); } CSVParser(final Reader reader, final CSVFormat format); @SuppressWarnings(\"resource\") CSVParser(final Reader reader, final CSVFormat format, final long characterOffset, final long recordNumber); @SuppressWarnings(\"resource\") static CSVParser parse(final File file, final Charset charset, final CSVFormat format); @SuppressWarnings(\"resource\") static CSVParser parse(final InputStream inputStream, final Charset charset, final CSVFormat format); static CSVParser parse(final Path path, final Charset charset, final CSVFormat format); static CSVParser parse(final Reader reader, final CSVFormat format); static CSVParser parse(final String string, final CSVFormat format); static CSVParser parse(final URL url, final Charset charset, final CSVFormat format); @Override void close(); long getCurrentLineNumber(); String getFirstEndOfLine(); Map<String, Integer> getHeaderMap(); long getRecordNumber(); List<CSVRecord> getRecords(); boolean isClosed(); @Override Iterator<CSVRecord> iterator(); }\n", "projects": [{"project": "Csv", "id": 16}]}
{"method": "// Focal method:\npublic final class CSVParser implements Iterable<CSVRecord>, Closeable { @Override public Iterator<CSVRecord> iterator() { return csvRecordIterator; } CSVParser(final Reader reader, final CSVFormat format); @SuppressWarnings(\"resource\") CSVParser(final Reader reader, final CSVFormat format, final long characterOffset, final long recordNumber); @SuppressWarnings(\"resource\") static CSVParser parse(final File file, final Charset charset, final CSVFormat format); @SuppressWarnings(\"resource\") static CSVParser parse(final InputStream inputStream, final Charset charset, final CSVFormat format); static CSVParser parse(final Path path, final Charset charset, final CSVFormat format); static CSVParser parse(final Reader reader, final CSVFormat format); static CSVParser parse(final String string, final CSVFormat format); static CSVParser parse(final URL url, final Charset charset, final CSVFormat format); @Override void close(); long getCurrentLineNumber(); String getFirstEndOfLine(); Map<String, Integer> getHeaderMap(); long getRecordNumber(); List<CSVRecord> getRecords(); boolean isClosed(); @Override Iterator<CSVRecord> iterator(); }\n", "projects": [{"project": "Csv", "id": 16}]}
{"method": "// Focal method:\npublic final class CSVParser implements Iterable<CSVRecord>, Closeable { @SuppressWarnings(\"resource\") public static CSVParser parse(final InputStream inputStream, final Charset charset, final CSVFormat format) throws IOException { Assertions.notNull(inputStream, \"inputStream\"); Assertions.notNull(format, \"format\"); return parse(new InputStreamReader(inputStream, charset), format); } CSVParser(final Reader reader, final CSVFormat format); @SuppressWarnings(\"resource\") CSVParser(final Reader reader, final CSVFormat format, final long characterOffset, final long recordNumber); @SuppressWarnings(\"resource\") static CSVParser parse(final File file, final Charset charset, final CSVFormat format); @SuppressWarnings(\"resource\") static CSVParser parse(final InputStream inputStream, final Charset charset, final CSVFormat format); static CSVParser parse(final Path path, final Charset charset, final CSVFormat format); static CSVParser parse(final Reader reader, final CSVFormat format); static CSVParser parse(final String string, final CSVFormat format); static CSVParser parse(final URL url, final Charset charset, final CSVFormat format); @Override void close(); long getCurrentLineNumber(); String getFirstEndOfLine(); Map<String, Integer> getHeaderMap(); long getRecordNumber(); List<CSVRecord> getRecords(); boolean isClosed(); @Override Iterator<CSVRecord> iterator(); }", "projects": [{"project": "Csv", "id": 16}]}
{"method": "// Focal method:\npublic final class JsonTreeReader extends JsonReader { @Override public JsonToken peek() throws IOException { if (stackSize == 0) { return JsonToken.END_DOCUMENT; } Object o = peekStack(); if (o instanceof Iterator) { boolean isObject = stack[stackSize - 2] instanceof JsonObject; Iterator<?> iterator = (Iterator<?>) o; if (iterator.hasNext()) { if (isObject) { return JsonToken.NAME; } else { push(iterator.next()); return peek(); } } else { return isObject ? JsonToken.END_OBJECT : JsonToken.END_ARRAY; } } else if (o instanceof JsonObject) { return JsonToken.BEGIN_OBJECT; } else if (o instanceof JsonArray) { return JsonToken.BEGIN_ARRAY; } else if (o instanceof JsonPrimitive) { JsonPrimitive primitive = (JsonPrimitive) o; if (primitive.isString()) { return JsonToken.STRING; } else if (primitive.isBoolean()) { return JsonToken.BOOLEAN; } else if (primitive.isNumber()) { return JsonToken.NUMBER; } else { throw new AssertionError(); } } else if (o instanceof JsonNull) { return JsonToken.NULL; } else if (o == SENTINEL_CLOSED) { throw new IllegalStateException(\"JsonReader is closed\"); } else { throw new AssertionError(); } } JsonTreeReader(JsonElement element); @Override void beginArray(); @Override void endArray(); @Override void beginObject(); @Override void endObject(); @Override boolean hasNext(); @Override JsonToken peek(); @Override String nextName(); @Override String nextString(); @Override boolean nextBoolean(); @Override void nextNull(); @Override double nextDouble(); @Override long nextLong(); @Override int nextInt(); @Override void close(); @Override void skipValue(); @Override String toString(); void promoteNameToValue(); @Override String getPath(); }\n", "projects": [{"project": "Gson", "id": 12}]}
{"method": "// Focal method:\npublic final class JsonTreeReader extends JsonReader { @Override public String getPath() { StringBuilder result = new StringBuilder().append('$'); for (int i = 0; i < stackSize; i++) { if (stack[i] instanceof JsonArray) { if (stack[++i] instanceof Iterator) { result.append('[').append(pathIndices[i]).append(']'); } } else if (stack[i] instanceof JsonObject) { if (stack[++i] instanceof Iterator) { result.append('.'); if (pathNames[i] != null) { result.append(pathNames[i]); } } } } return result.toString(); } JsonTreeReader(JsonElement element); @Override void beginArray(); @Override void endArray(); @Override void beginObject(); @Override void endObject(); @Override boolean hasNext(); @Override JsonToken peek(); @Override String nextName(); @Override String nextString(); @Override boolean nextBoolean(); @Override void nextNull(); @Override double nextDouble(); @Override long nextLong(); @Override int nextInt(); @Override void close(); @Override void skipValue(); @Override String toString(); void promoteNameToValue(); @Override String getPath(); }\n", "projects": [{"project": "Gson", "id": 12}]}
{"method": "// Focal method:\npublic final class JsonTreeReader extends JsonReader { @Override public double nextDouble() throws IOException { JsonToken token = peek(); if (token != JsonToken.NUMBER && token != JsonToken.STRING) { throw new IllegalStateException( \"Expected \" + JsonToken.NUMBER + \" but was \" + token + locationString()); } double result = ((JsonPrimitive) peekStack()).getAsDouble(); if (!isLenient() && (Double.isNaN(result) || Double.isInfinite(result))) { throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + result); } popStack(); if (stackSize > 0) { pathIndices[stackSize - 1]++; } return result; } JsonTreeReader(JsonElement element); @Override void beginArray(); @Override void endArray(); @Override void beginObject(); @Override void endObject(); @Override boolean hasNext(); @Override JsonToken peek(); @Override String nextName(); @Override String nextString(); @Override boolean nextBoolean(); @Override void nextNull(); @Override double nextDouble(); @Override long nextLong(); @Override int nextInt(); @Override void close(); @Override void skipValue(); @Override String toString(); void promoteNameToValue(); @Override String getPath(); }\n", "projects": [{"project": "Gson", "id": 12}]}
{"method": "// Focal method:\npublic final class JsonTreeReader extends JsonReader { @Override public int nextInt() throws IOException { JsonToken token = peek(); if (token != JsonToken.NUMBER && token != JsonToken.STRING) { throw new IllegalStateException( \"Expected \" + JsonToken.NUMBER + \" but was \" + token + locationString()); } int result = ((JsonPrimitive) peekStack()).getAsInt(); popStack(); if (stackSize > 0) { pathIndices[stackSize - 1]++; } return result; } JsonTreeReader(JsonElement element); @Override void beginArray(); @Override void endArray(); @Override void beginObject(); @Override void endObject(); @Override boolean hasNext(); @Override JsonToken peek(); @Override String nextName(); @Override String nextString(); @Override boolean nextBoolean(); @Override void nextNull(); @Override double nextDouble(); @Override long nextLong(); @Override int nextInt(); @Override void close(); @Override void skipValue(); @Override String toString(); void promoteNameToValue(); @Override String getPath(); }\n", "projects": [{"project": "Gson", "id": 12}]}
{"method": "// Focal method:\npublic final class JsonTreeReader extends JsonReader { @Override public void nextNull() throws IOException { expect(JsonToken.NULL); popStack(); if (stackSize > 0) { pathIndices[stackSize - 1]++; } } JsonTreeReader(JsonElement element); @Override void beginArray(); @Override void endArray(); @Override void beginObject(); @Override void endObject(); @Override boolean hasNext(); @Override JsonToken peek(); @Override String nextName(); @Override String nextString(); @Override boolean nextBoolean(); @Override void nextNull(); @Override double nextDouble(); @Override long nextLong(); @Override int nextInt(); @Override void close(); @Override void skipValue(); @Override String toString(); void promoteNameToValue(); @Override String getPath(); }\n", "projects": [{"project": "Gson", "id": 12}]}
{"method": "// Focal method:\npublic final class JsonTreeReader extends JsonReader { @Override public boolean nextBoolean() throws IOException { expect(JsonToken.BOOLEAN); boolean result = ((JsonPrimitive) popStack()).getAsBoolean(); if (stackSize > 0) { pathIndices[stackSize - 1]++; } return result; } JsonTreeReader(JsonElement element); @Override void beginArray(); @Override void endArray(); @Override void beginObject(); @Override void endObject(); @Override boolean hasNext(); @Override JsonToken peek(); @Override String nextName(); @Override String nextString(); @Override boolean nextBoolean(); @Override void nextNull(); @Override double nextDouble(); @Override long nextLong(); @Override int nextInt(); @Override void close(); @Override void skipValue(); @Override String toString(); void promoteNameToValue(); @Override String getPath(); }\n", "projects": [{"project": "Gson", "id": 12}]}
{"method": "// Focal method:\npublic final class JsonTreeReader extends JsonReader { @Override public String nextName() throws IOException { expect(JsonToken.NAME); Iterator<?> i = (Iterator<?>) peekStack(); Map.Entry<?, ?> entry = (Map.Entry<?, ?>) i.next(); String result = (String) entry.getKey(); pathNames[stackSize - 1] = result; push(entry.getValue()); return result; } JsonTreeReader(JsonElement element); @Override void beginArray(); @Override void endArray(); @Override void beginObject(); @Override void endObject(); @Override boolean hasNext(); @Override JsonToken peek(); @Override String nextName(); @Override String nextString(); @Override boolean nextBoolean(); @Override void nextNull(); @Override double nextDouble(); @Override long nextLong(); @Override int nextInt(); @Override void close(); @Override void skipValue(); @Override String toString(); void promoteNameToValue(); @Override String getPath(); }\n", "projects": [{"project": "Gson", "id": 12}]}
{"method": "// Focal method:\npublic final class JsonTreeReader extends JsonReader { @Override public long nextLong() throws IOException { JsonToken token = peek(); if (token != JsonToken.NUMBER && token != JsonToken.STRING) { throw new IllegalStateException( \"Expected \" + JsonToken.NUMBER + \" but was \" + token + locationString()); } long result = ((JsonPrimitive) peekStack()).getAsLong(); popStack(); if (stackSize > 0) { pathIndices[stackSize - 1]++; } return result; } JsonTreeReader(JsonElement element); @Override void beginArray(); @Override void endArray(); @Override void beginObject(); @Override void endObject(); @Override boolean hasNext(); @Override JsonToken peek(); @Override String nextName(); @Override String nextString(); @Override boolean nextBoolean(); @Override void nextNull(); @Override double nextDouble(); @Override long nextLong(); @Override int nextInt(); @Override void close(); @Override void skipValue(); @Override String toString(); void promoteNameToValue(); @Override String getPath(); }\n", "projects": [{"project": "Gson", "id": 12}]}
{"method": "// Focal method:\npublic final class JsonTreeReader extends JsonReader { public void promoteNameToValue() throws IOException { expect(JsonToken.NAME); Iterator<?> i = (Iterator<?>) peekStack(); Map.Entry<?, ?> entry = (Map.Entry<?, ?>) i.next(); push(entry.getValue()); push(new JsonPrimitive((String) entry.getKey())); } JsonTreeReader(JsonElement element); @Override void beginArray(); @Override void endArray(); @Override void beginObject(); @Override void endObject(); @Override boolean hasNext(); @Override JsonToken peek(); @Override String nextName(); @Override String nextString(); @Override boolean nextBoolean(); @Override void nextNull(); @Override double nextDouble(); @Override long nextLong(); @Override int nextInt(); @Override void close(); @Override void skipValue(); @Override String toString(); void promoteNameToValue(); @Override String getPath(); }\n", "projects": [{"project": "Gson", "id": 12}]}
{"method": "// Focal method:\npublic final class JsonTreeReader extends JsonReader { @Override public void beginObject() throws IOException { expect(JsonToken.BEGIN_OBJECT); JsonObject object = (JsonObject) peekStack(); push(object.entrySet().iterator()); } JsonTreeReader(JsonElement element); @Override void beginArray(); @Override void endArray(); @Override void beginObject(); @Override void endObject(); @Override boolean hasNext(); @Override JsonToken peek(); @Override String nextName(); @Override String nextString(); @Override boolean nextBoolean(); @Override void nextNull(); @Override double nextDouble(); @Override long nextLong(); @Override int nextInt(); @Override void close(); @Override void skipValue(); @Override String toString(); void promoteNameToValue(); @Override String getPath(); }\n", "projects": [{"project": "Gson", "id": 12}]}
{"method": "// Focal method:\npublic final class JsonTreeReader extends JsonReader { @Override public boolean hasNext() throws IOException { JsonToken token = peek(); return token != JsonToken.END_OBJECT && token != JsonToken.END_ARRAY; } JsonTreeReader(JsonElement element); @Override void beginArray(); @Override void endArray(); @Override void beginObject(); @Override void endObject(); @Override boolean hasNext(); @Override JsonToken peek(); @Override String nextName(); @Override String nextString(); @Override boolean nextBoolean(); @Override void nextNull(); @Override double nextDouble(); @Override long nextLong(); @Override int nextInt(); @Override void close(); @Override void skipValue(); @Override String toString(); void promoteNameToValue(); @Override String getPath(); }\n", "projects": [{"project": "Gson", "id": 12}]}
{"method": "// Focal method:\npublic final class JsonTreeReader extends JsonReader { @Override public void beginArray() throws IOException { expect(JsonToken.BEGIN_ARRAY); JsonArray array = (JsonArray) peekStack(); push(array.iterator()); pathIndices[stackSize - 1] = 0; } JsonTreeReader(JsonElement element); @Override void beginArray(); @Override void endArray(); @Override void beginObject(); @Override void endObject(); @Override boolean hasNext(); @Override JsonToken peek(); @Override String nextName(); @Override String nextString(); @Override boolean nextBoolean(); @Override void nextNull(); @Override double nextDouble(); @Override long nextLong(); @Override int nextInt(); @Override void close(); @Override void skipValue(); @Override String toString(); void promoteNameToValue(); @Override String getPath(); }\n", "projects": [{"project": "Gson", "id": 12}]}
{"method": "// Focal method:\npublic final class JsonTreeReader extends JsonReader { @Override public void endObject() throws IOException { expect(JsonToken.END_OBJECT); popStack(); popStack(); if (stackSize > 0) { pathIndices[stackSize - 1]++; } } JsonTreeReader(JsonElement element); @Override void beginArray(); @Override void endArray(); @Override void beginObject(); @Override void endObject(); @Override boolean hasNext(); @Override JsonToken peek(); @Override String nextName(); @Override String nextString(); @Override boolean nextBoolean(); @Override void nextNull(); @Override double nextDouble(); @Override long nextLong(); @Override int nextInt(); @Override void close(); @Override void skipValue(); @Override String toString(); void promoteNameToValue(); @Override String getPath(); }\n", "projects": [{"project": "Gson", "id": 12}]}
{"method": "// Focal method:\npublic final class JsonTreeReader extends JsonReader { @Override public String nextString() throws IOException { JsonToken token = peek(); if (token != JsonToken.STRING && token != JsonToken.NUMBER) { throw new IllegalStateException( \"Expected \" + JsonToken.STRING + \" but was \" + token + locationString()); } String result = ((JsonPrimitive) popStack()).getAsString(); if (stackSize > 0) { pathIndices[stackSize - 1]++; } return result; } JsonTreeReader(JsonElement element); @Override void beginArray(); @Override void endArray(); @Override void beginObject(); @Override void endObject(); @Override boolean hasNext(); @Override JsonToken peek(); @Override String nextName(); @Override String nextString(); @Override boolean nextBoolean(); @Override void nextNull(); @Override double nextDouble(); @Override long nextLong(); @Override int nextInt(); @Override void close(); @Override void skipValue(); @Override String toString(); void promoteNameToValue(); @Override String getPath(); }\n", "projects": [{"project": "Gson", "id": 12}]}
{"method": "// Focal method:\npublic final class JsonTreeReader extends JsonReader { @Override public void close() throws IOException { stack = new Object[] { SENTINEL_CLOSED }; stackSize = 1; } JsonTreeReader(JsonElement element); @Override void beginArray(); @Override void endArray(); @Override void beginObject(); @Override void endObject(); @Override boolean hasNext(); @Override JsonToken peek(); @Override String nextName(); @Override String nextString(); @Override boolean nextBoolean(); @Override void nextNull(); @Override double nextDouble(); @Override long nextLong(); @Override int nextInt(); @Override void close(); @Override void skipValue(); @Override String toString(); void promoteNameToValue(); @Override String getPath(); }\n", "projects": [{"project": "Gson", "id": 12}]}
{"method": "// Focal method:\npublic final class JsonTreeReader extends JsonReader { @Override public String toString() { return getClass().getSimpleName(); } JsonTreeReader(JsonElement element); @Override void beginArray(); @Override void endArray(); @Override void beginObject(); @Override void endObject(); @Override boolean hasNext(); @Override JsonToken peek(); @Override String nextName(); @Override String nextString(); @Override boolean nextBoolean(); @Override void nextNull(); @Override double nextDouble(); @Override long nextLong(); @Override int nextInt(); @Override void close(); @Override void skipValue(); @Override String toString(); void promoteNameToValue(); @Override String getPath(); }\n", "projects": [{"project": "Gson", "id": 12}]}
{"method": "// Focal method:\npublic final class JsonTreeReader extends JsonReader { @Override public void endArray() throws IOException { expect(JsonToken.END_ARRAY); popStack(); popStack(); if (stackSize > 0) { pathIndices[stackSize - 1]++; } } JsonTreeReader(JsonElement element); @Override void beginArray(); @Override void endArray(); @Override void beginObject(); @Override void endObject(); @Override boolean hasNext(); @Override JsonToken peek(); @Override String nextName(); @Override String nextString(); @Override boolean nextBoolean(); @Override void nextNull(); @Override double nextDouble(); @Override long nextLong(); @Override int nextInt(); @Override void close(); @Override void skipValue(); @Override String toString(); void promoteNameToValue(); @Override String getPath(); }\n", "projects": [{"project": "Gson", "id": 12}]}
{"method": "// Focal method:\npublic final class JsonTreeReader extends JsonReader { @Override public void skipValue() throws IOException { if (peek() == JsonToken.NAME) { nextName(); pathNames[stackSize - 2] = \"null\"; } else { popStack(); if (stackSize > 0) { pathNames[stackSize - 1] = \"null\"; } } if (stackSize > 0) { pathIndices[stackSize - 1]++; } } JsonTreeReader(JsonElement element); @Override void beginArray(); @Override void endArray(); @Override void beginObject(); @Override void endObject(); @Override boolean hasNext(); @Override JsonToken peek(); @Override String nextName(); @Override String nextString(); @Override boolean nextBoolean(); @Override void nextNull(); @Override double nextDouble(); @Override long nextLong(); @Override int nextInt(); @Override void close(); @Override void skipValue(); @Override String toString(); void promoteNameToValue(); @Override String getPath(); }\n", "projects": [{"project": "Gson", "id": 12}]}
{"method": "// Focal method:\npublic class DateUtils { public static Date setMilliseconds(Date date, int amount) { return set(date, Calendar.MILLISECOND, amount); } DateUtils(); static boolean isSameDay(Date date1, Date date2); static boolean isSameDay(Calendar cal1, Calendar cal2); static boolean isSameInstant(Date date1, Date date2); static boolean isSameInstant(Calendar cal1, Calendar cal2); static boolean isSameLocalTime(Calendar cal1, Calendar cal2); static Date parseDate(String str, String... parsePatterns); static Date parseDateStrictly(String str, String... parsePatterns); static Date addYears(Date date, int amount); static Date addMonths(Date date, int amount); static Date addWeeks(Date date, int amount); static Date addDays(Date date, int amount); static Date addHours(Date date, int amount); static Date addMinutes(Date date, int amount); static Date addSeconds(Date date, int amount); static Date addMilliseconds(Date date, int amount); static Date setYears(Date date, int amount); static Date setMonths(Date date, int amount); static Date setDays(Date date, int amount); static Date setHours(Date date, int amount); static Date setMinutes(Date date, int amount); static Date setSeconds(Date date, int amount); static Date setMilliseconds(Date date, int amount); static Calendar toCalendar(Date date); static Date round(Date date, int field); static Calendar round(Calendar date, int field); static Date round(Object date, int field); static Date truncate(Date date, int field); static Calendar truncate(Calendar date, int field); static Date truncate(Object date, int field); static Date ceiling(Date date, int field); static Calendar ceiling(Calendar date, int field); static Date ceiling(Object date, int field); static Iterator<Calendar> iterator(Date focus, int rangeStyle); static Iterator<Calendar> iterator(Calendar focus, int rangeStyle); static Iterator<?> iterator(Object focus, int rangeStyle); static long getFragmentInMilliseconds(Date date, int fragment); static long getFragmentInSeconds(Date date, int fragment); static long getFragmentInMinutes(Date date, int fragment); static long getFragmentInHours(Date date, int fragment); static long getFragmentInDays(Date date, int fragment); static long getFragmentInMilliseconds(Calendar calendar, int fragment); static long getFragmentInSeconds(Calendar calendar, int fragment); static long getFragmentInMinutes(Calendar calendar, int fragment); static long getFragmentInHours(Calendar calendar, int fragment); static long getFragmentInDays(Calendar calendar, int fragment); static boolean truncatedEquals(Calendar cal1, Calendar cal2, int field); static boolean truncatedEquals(Date date1, Date date2, int field); static int truncatedCompareTo(Calendar cal1, Calendar cal2, int field); static int truncatedCompareTo(Date date1, Date date2, int field); static final TimeZone UTC_TIME_ZONE; static final long MILLIS_PER_SECOND; static final long MILLIS_PER_MINUTE; static final long MILLIS_PER_HOUR; static final long MILLIS_PER_DAY; final static int SEMI_MONTH; final static int RANGE_WEEK_SUNDAY; final static int RANGE_WEEK_MONDAY; final static int RANGE_WEEK_RELATIVE; final static int RANGE_WEEK_CENTER; final static int RANGE_MONTH_SUNDAY; final static int RANGE_MONTH_MONDAY; final static int MODIFY_TRUNCATE; final static int MODIFY_ROUND; final static int MODIFY_CEILING; }\n", "projects": [{"project": "Lang", "id": 21}]}
{"method": "// Focal method:\npublic class DateUtils { public static Date parseDate(String str, String... parsePatterns) throws ParseException { return parseDateWithLeniency(str, parsePatterns, true); } DateUtils(); static boolean isSameDay(Date date1, Date date2); static boolean isSameDay(Calendar cal1, Calendar cal2); static boolean isSameInstant(Date date1, Date date2); static boolean isSameInstant(Calendar cal1, Calendar cal2); static boolean isSameLocalTime(Calendar cal1, Calendar cal2); static Date parseDate(String str, String... parsePatterns); static Date parseDateStrictly(String str, String... parsePatterns); static Date addYears(Date date, int amount); static Date addMonths(Date date, int amount); static Date addWeeks(Date date, int amount); static Date addDays(Date date, int amount); static Date addHours(Date date, int amount); static Date addMinutes(Date date, int amount); static Date addSeconds(Date date, int amount); static Date addMilliseconds(Date date, int amount); static Date setYears(Date date, int amount); static Date setMonths(Date date, int amount); static Date setDays(Date date, int amount); static Date setHours(Date date, int amount); static Date setMinutes(Date date, int amount); static Date setSeconds(Date date, int amount); static Date setMilliseconds(Date date, int amount); static Calendar toCalendar(Date date); static Date round(Date date, int field); static Calendar round(Calendar date, int field); static Date round(Object date, int field); static Date truncate(Date date, int field); static Calendar truncate(Calendar date, int field); static Date truncate(Object date, int field); static Date ceiling(Date date, int field); static Calendar ceiling(Calendar date, int field); static Date ceiling(Object date, int field); static Iterator<Calendar> iterator(Date focus, int rangeStyle); static Iterator<Calendar> iterator(Calendar focus, int rangeStyle); static Iterator<?> iterator(Object focus, int rangeStyle); static long getFragmentInMilliseconds(Date date, int fragment); static long getFragmentInSeconds(Date date, int fragment); static long getFragmentInMinutes(Date date, int fragment); static long getFragmentInHours(Date date, int fragment); static long getFragmentInDays(Date date, int fragment); static long getFragmentInMilliseconds(Calendar calendar, int fragment); static long getFragmentInSeconds(Calendar calendar, int fragment); static long getFragmentInMinutes(Calendar calendar, int fragment); static long getFragmentInHours(Calendar calendar, int fragment); static long getFragmentInDays(Calendar calendar, int fragment); static boolean truncatedEquals(Calendar cal1, Calendar cal2, int field); static boolean truncatedEquals(Date date1, Date date2, int field); static int truncatedCompareTo(Calendar cal1, Calendar cal2, int field); static int truncatedCompareTo(Date date1, Date date2, int field); static final TimeZone UTC_TIME_ZONE; static final long MILLIS_PER_SECOND; static final long MILLIS_PER_MINUTE; static final long MILLIS_PER_HOUR; static final long MILLIS_PER_DAY; final static int SEMI_MONTH; final static int RANGE_WEEK_SUNDAY; final static int RANGE_WEEK_MONDAY; final static int RANGE_WEEK_RELATIVE; final static int RANGE_WEEK_CENTER; final static int RANGE_MONTH_SUNDAY; final static int RANGE_MONTH_MONDAY; final static int MODIFY_TRUNCATE; final static int MODIFY_ROUND; final static int MODIFY_CEILING; }\n", "projects": [{"project": "Lang", "id": 21}]}
{"method": "// Focal method:\npublic class DateUtils { public static long getFragmentInDays(Calendar calendar, int fragment) { return getFragment(calendar, fragment, Calendar.DAY_OF_YEAR); } DateUtils(); static boolean isSameDay(Date date1, Date date2); static boolean isSameDay(Calendar cal1, Calendar cal2); static boolean isSameInstant(Date date1, Date date2); static boolean isSameInstant(Calendar cal1, Calendar cal2); static boolean isSameLocalTime(Calendar cal1, Calendar cal2); static Date parseDate(String str, String... parsePatterns); static Date parseDateStrictly(String str, String... parsePatterns); static Date addYears(Date date, int amount); static Date addMonths(Date date, int amount); static Date addWeeks(Date date, int amount); static Date addDays(Date date, int amount); static Date addHours(Date date, int amount); static Date addMinutes(Date date, int amount); static Date addSeconds(Date date, int amount); static Date addMilliseconds(Date date, int amount); static Date setYears(Date date, int amount); static Date setMonths(Date date, int amount); static Date setDays(Date date, int amount); static Date setHours(Date date, int amount); static Date setMinutes(Date date, int amount); static Date setSeconds(Date date, int amount); static Date setMilliseconds(Date date, int amount); static Calendar toCalendar(Date date); static Date round(Date date, int field); static Calendar round(Calendar date, int field); static Date round(Object date, int field); static Date truncate(Date date, int field); static Calendar truncate(Calendar date, int field); static Date truncate(Object date, int field); static Date ceiling(Date date, int field); static Calendar ceiling(Calendar date, int field); static Date ceiling(Object date, int field); static Iterator<Calendar> iterator(Date focus, int rangeStyle); static Iterator<Calendar> iterator(Calendar focus, int rangeStyle); static Iterator<?> iterator(Object focus, int rangeStyle); static long getFragmentInMilliseconds(Date date, int fragment); static long getFragmentInSeconds(Date date, int fragment); static long getFragmentInMinutes(Date date, int fragment); static long getFragmentInHours(Date date, int fragment); static long getFragmentInDays(Date date, int fragment); static long getFragmentInMilliseconds(Calendar calendar, int fragment); static long getFragmentInSeconds(Calendar calendar, int fragment); static long getFragmentInMinutes(Calendar calendar, int fragment); static long getFragmentInHours(Calendar calendar, int fragment); static long getFragmentInDays(Calendar calendar, int fragment); static boolean truncatedEquals(Calendar cal1, Calendar cal2, int field); static boolean truncatedEquals(Date date1, Date date2, int field); static int truncatedCompareTo(Calendar cal1, Calendar cal2, int field); static int truncatedCompareTo(Date date1, Date date2, int field); static final TimeZone UTC_TIME_ZONE; static final long MILLIS_PER_SECOND; static final long MILLIS_PER_MINUTE; static final long MILLIS_PER_HOUR; static final long MILLIS_PER_DAY; final static int SEMI_MONTH; final static int RANGE_WEEK_SUNDAY; final static int RANGE_WEEK_MONDAY; final static int RANGE_WEEK_RELATIVE; final static int RANGE_WEEK_CENTER; final static int RANGE_MONTH_SUNDAY; final static int RANGE_MONTH_MONDAY; final static int MODIFY_TRUNCATE; final static int MODIFY_ROUND; final static int MODIFY_CEILING; }\n", "projects": [{"project": "Lang", "id": 21}]}
{"method": "// Focal method:\npublic class DateUtils { public static long getFragmentInMinutes(Calendar calendar, int fragment) { return getFragment(calendar, fragment, Calendar.MINUTE); } DateUtils(); static boolean isSameDay(Date date1, Date date2); static boolean isSameDay(Calendar cal1, Calendar cal2); static boolean isSameInstant(Date date1, Date date2); static boolean isSameInstant(Calendar cal1, Calendar cal2); static boolean isSameLocalTime(Calendar cal1, Calendar cal2); static Date parseDate(String str, String... parsePatterns); static Date parseDateStrictly(String str, String... parsePatterns); static Date addYears(Date date, int amount); static Date addMonths(Date date, int amount); static Date addWeeks(Date date, int amount); static Date addDays(Date date, int amount); static Date addHours(Date date, int amount); static Date addMinutes(Date date, int amount); static Date addSeconds(Date date, int amount); static Date addMilliseconds(Date date, int amount); static Date setYears(Date date, int amount); static Date setMonths(Date date, int amount); static Date setDays(Date date, int amount); static Date setHours(Date date, int amount); static Date setMinutes(Date date, int amount); static Date setSeconds(Date date, int amount); static Date setMilliseconds(Date date, int amount); static Calendar toCalendar(Date date); static Date round(Date date, int field); static Calendar round(Calendar date, int field); static Date round(Object date, int field); static Date truncate(Date date, int field); static Calendar truncate(Calendar date, int field); static Date truncate(Object date, int field); static Date ceiling(Date date, int field); static Calendar ceiling(Calendar date, int field); static Date ceiling(Object date, int field); static Iterator<Calendar> iterator(Date focus, int rangeStyle); static Iterator<Calendar> iterator(Calendar focus, int rangeStyle); static Iterator<?> iterator(Object focus, int rangeStyle); static long getFragmentInMilliseconds(Date date, int fragment); static long getFragmentInSeconds(Date date, int fragment); static long getFragmentInMinutes(Date date, int fragment); static long getFragmentInHours(Date date, int fragment); static long getFragmentInDays(Date date, int fragment); static long getFragmentInMilliseconds(Calendar calendar, int fragment); static long getFragmentInSeconds(Calendar calendar, int fragment); static long getFragmentInMinutes(Calendar calendar, int fragment); static long getFragmentInHours(Calendar calendar, int fragment); static long getFragmentInDays(Calendar calendar, int fragment); static boolean truncatedEquals(Calendar cal1, Calendar cal2, int field); static boolean truncatedEquals(Date date1, Date date2, int field); static int truncatedCompareTo(Calendar cal1, Calendar cal2, int field); static int truncatedCompareTo(Date date1, Date date2, int field); static final TimeZone UTC_TIME_ZONE; static final long MILLIS_PER_SECOND; static final long MILLIS_PER_MINUTE; static final long MILLIS_PER_HOUR; static final long MILLIS_PER_DAY; final static int SEMI_MONTH; final static int RANGE_WEEK_SUNDAY; final static int RANGE_WEEK_MONDAY; final static int RANGE_WEEK_RELATIVE; final static int RANGE_WEEK_CENTER; final static int RANGE_MONTH_SUNDAY; final static int RANGE_MONTH_MONDAY; final static int MODIFY_TRUNCATE; final static int MODIFY_ROUND; final static int MODIFY_CEILING; }\n", "projects": [{"project": "Lang", "id": 21}]}
{"method": "// Focal method:\npublic class DateUtils { public static Iterator<Calendar> iterator(Calendar focus, int rangeStyle) { if (focus == null) { throw new IllegalArgumentException(\"The date must not be null\"); } Calendar start = null; Calendar end = null; int startCutoff = Calendar.SUNDAY; int endCutoff = Calendar.SATURDAY; switch (rangeStyle) { case RANGE_MONTH_SUNDAY: case RANGE_MONTH_MONDAY: start = truncate(focus, Calendar.MONTH); end = (Calendar) start.clone(); end.add(Calendar.MONTH, 1); end.add(Calendar.DATE, -1); if (rangeStyle == RANGE_MONTH_MONDAY) { startCutoff = Calendar.MONDAY; endCutoff = Calendar.SUNDAY; } break; case RANGE_WEEK_SUNDAY: case RANGE_WEEK_MONDAY: case RANGE_WEEK_RELATIVE: case RANGE_WEEK_CENTER: start = truncate(focus, Calendar.DATE); end = truncate(focus, Calendar.DATE); switch (rangeStyle) { case RANGE_WEEK_SUNDAY: break; case RANGE_WEEK_MONDAY: startCutoff = Calendar.MONDAY; endCutoff = Calendar.SUNDAY; break; case RANGE_WEEK_RELATIVE: startCutoff = focus.get(Calendar.DAY_OF_WEEK); endCutoff = startCutoff - 1; break; case RANGE_WEEK_CENTER: startCutoff = focus.get(Calendar.DAY_OF_WEEK) - 3; endCutoff = focus.get(Calendar.DAY_OF_WEEK) + 3; break; } break; default: throw new IllegalArgumentException(\"The range style \" + rangeStyle + \" is not valid.\"); } if (startCutoff < Calendar.SUNDAY) { startCutoff += 7; } if (startCutoff > Calendar.SATURDAY) { startCutoff -= 7; } if (endCutoff < Calendar.SUNDAY) { endCutoff += 7; } if (endCutoff > Calendar.SATURDAY) { endCutoff -= 7; } while (start.get(Calendar.DAY_OF_WEEK) != startCutoff) { start.add(Calendar.DATE, -1); } while (end.get(Calendar.DAY_OF_WEEK) != endCutoff) { end.add(Calendar.DATE, 1); } return new DateIterator(start, end); } DateUtils(); static boolean isSameDay(Date date1, Date date2); static boolean isSameDay(Calendar cal1, Calendar cal2); static boolean isSameInstant(Date date1, Date date2); static boolean isSameInstant(Calendar cal1, Calendar cal2); static boolean isSameLocalTime(Calendar cal1, Calendar cal2); static Date parseDate(String str, String... parsePatterns); static Date parseDateStrictly(String str, String... parsePatterns); static Date addYears(Date date, int amount); static Date addMonths(Date date, int amount); static Date addWeeks(Date date, int amount); static Date addDays(Date date, int amount); static Date addHours(Date date, int amount); static Date addMinutes(Date date, int amount); static Date addSeconds(Date date, int amount); static Date addMilliseconds(Date date, int amount); static Date setYears(Date date, int amount); static Date setMonths(Date date, int amount); static Date setDays(Date date, int amount); static Date setHours(Date date, int amount); static Date setMinutes(Date date, int amount); static Date setSeconds(Date date, int amount); static Date setMilliseconds(Date date, int amount); static Calendar toCalendar(Date date); static Date round(Date date, int field); static Calendar round(Calendar date, int field); static Date round(Object date, int field); static Date truncate(Date date, int field); static Calendar truncate(Calendar date, int field); static Date truncate(Object date, int field); static Date ceiling(Date date, int field); static Calendar ceiling(Calendar date, int field); static Date ceiling(Object date, int field); static Iterator<Calendar> iterator(Date focus, int rangeStyle); static Iterator<Calendar> iterator(Calendar focus, int rangeStyle); static Iterator<?> iterator(Object focus, int rangeStyle); static long getFragmentInMilliseconds(Date date, int fragment); static long getFragmentInSeconds(Date date, int fragment); static long getFragmentInMinutes(Date date, int fragment); static long getFragmentInHours(Date date, int fragment); static long getFragmentInDays(Date date, int fragment); static long getFragmentInMilliseconds(Calendar calendar, int fragment); static long getFragmentInSeconds(Calendar calendar, int fragment); static long getFragmentInMinutes(Calendar calendar, int fragment); static long getFragmentInHours(Calendar calendar, int fragment); static long getFragmentInDays(Calendar calendar, int fragment); static boolean truncatedEquals(Calendar cal1, Calendar cal2, int field); static boolean truncatedEquals(Date date1, Date date2, int field); static int truncatedCompareTo(Calendar cal1, Calendar cal2, int field); static int truncatedCompareTo(Date date1, Date date2, int field); static final TimeZone UTC_TIME_ZONE; static final long MILLIS_PER_SECOND; static final long MILLIS_PER_MINUTE; static final long MILLIS_PER_HOUR; static final long MILLIS_PER_DAY; final static int SEMI_MONTH; final static int RANGE_WEEK_SUNDAY; final static int RANGE_WEEK_MONDAY; final static int RANGE_WEEK_RELATIVE; final static int RANGE_WEEK_CENTER; final static int RANGE_MONTH_SUNDAY; final static int RANGE_MONTH_MONDAY; final static int MODIFY_TRUNCATE; final static int MODIFY_ROUND; final static int MODIFY_CEILING; }\n", "projects": [{"project": "Lang", "id": 21}]}
{"method": "// Focal method:\npublic class DateUtils { public static long getFragmentInMinutes(Date date, int fragment) { return getFragment(date, fragment, Calendar.MINUTE); } DateUtils(); static boolean isSameDay(Date date1, Date date2); static boolean isSameDay(Calendar cal1, Calendar cal2); static boolean isSameInstant(Date date1, Date date2); static boolean isSameInstant(Calendar cal1, Calendar cal2); static boolean isSameLocalTime(Calendar cal1, Calendar cal2); static Date parseDate(String str, String... parsePatterns); static Date parseDateStrictly(String str, String... parsePatterns); static Date addYears(Date date, int amount); static Date addMonths(Date date, int amount); static Date addWeeks(Date date, int amount); static Date addDays(Date date, int amount); static Date addHours(Date date, int amount); static Date addMinutes(Date date, int amount); static Date addSeconds(Date date, int amount); static Date addMilliseconds(Date date, int amount); static Date setYears(Date date, int amount); static Date setMonths(Date date, int amount); static Date setDays(Date date, int amount); static Date setHours(Date date, int amount); static Date setMinutes(Date date, int amount); static Date setSeconds(Date date, int amount); static Date setMilliseconds(Date date, int amount); static Calendar toCalendar(Date date); static Date round(Date date, int field); static Calendar round(Calendar date, int field); static Date round(Object date, int field); static Date truncate(Date date, int field); static Calendar truncate(Calendar date, int field); static Date truncate(Object date, int field); static Date ceiling(Date date, int field); static Calendar ceiling(Calendar date, int field); static Date ceiling(Object date, int field); static Iterator<Calendar> iterator(Date focus, int rangeStyle); static Iterator<Calendar> iterator(Calendar focus, int rangeStyle); static Iterator<?> iterator(Object focus, int rangeStyle); static long getFragmentInMilliseconds(Date date, int fragment); static long getFragmentInSeconds(Date date, int fragment); static long getFragmentInMinutes(Date date, int fragment); static long getFragmentInHours(Date date, int fragment); static long getFragmentInDays(Date date, int fragment); static long getFragmentInMilliseconds(Calendar calendar, int fragment); static long getFragmentInSeconds(Calendar calendar, int fragment); static long getFragmentInMinutes(Calendar calendar, int fragment); static long getFragmentInHours(Calendar calendar, int fragment); static long getFragmentInDays(Calendar calendar, int fragment); static boolean truncatedEquals(Calendar cal1, Calendar cal2, int field); static boolean truncatedEquals(Date date1, Date date2, int field); static int truncatedCompareTo(Calendar cal1, Calendar cal2, int field); static int truncatedCompareTo(Date date1, Date date2, int field); static final TimeZone UTC_TIME_ZONE; static final long MILLIS_PER_SECOND; static final long MILLIS_PER_MINUTE; static final long MILLIS_PER_HOUR; static final long MILLIS_PER_DAY; final static int SEMI_MONTH; final static int RANGE_WEEK_SUNDAY; final static int RANGE_WEEK_MONDAY; final static int RANGE_WEEK_RELATIVE; final static int RANGE_WEEK_CENTER; final static int RANGE_MONTH_SUNDAY; final static int RANGE_MONTH_MONDAY; final static int MODIFY_TRUNCATE; final static int MODIFY_ROUND; final static int MODIFY_CEILING; }\n", "projects": [{"project": "Lang", "id": 21}]}
{"method": "// Focal method:\npublic class DateUtils { public static long getFragmentInSeconds(Calendar calendar, int fragment) { return getFragment(calendar, fragment, Calendar.SECOND); } DateUtils(); static boolean isSameDay(Date date1, Date date2); static boolean isSameDay(Calendar cal1, Calendar cal2); static boolean isSameInstant(Date date1, Date date2); static boolean isSameInstant(Calendar cal1, Calendar cal2); static boolean isSameLocalTime(Calendar cal1, Calendar cal2); static Date parseDate(String str, String... parsePatterns); static Date parseDateStrictly(String str, String... parsePatterns); static Date addYears(Date date, int amount); static Date addMonths(Date date, int amount); static Date addWeeks(Date date, int amount); static Date addDays(Date date, int amount); static Date addHours(Date date, int amount); static Date addMinutes(Date date, int amount); static Date addSeconds(Date date, int amount); static Date addMilliseconds(Date date, int amount); static Date setYears(Date date, int amount); static Date setMonths(Date date, int amount); static Date setDays(Date date, int amount); static Date setHours(Date date, int amount); static Date setMinutes(Date date, int amount); static Date setSeconds(Date date, int amount); static Date setMilliseconds(Date date, int amount); static Calendar toCalendar(Date date); static Date round(Date date, int field); static Calendar round(Calendar date, int field); static Date round(Object date, int field); static Date truncate(Date date, int field); static Calendar truncate(Calendar date, int field); static Date truncate(Object date, int field); static Date ceiling(Date date, int field); static Calendar ceiling(Calendar date, int field); static Date ceiling(Object date, int field); static Iterator<Calendar> iterator(Date focus, int rangeStyle); static Iterator<Calendar> iterator(Calendar focus, int rangeStyle); static Iterator<?> iterator(Object focus, int rangeStyle); static long getFragmentInMilliseconds(Date date, int fragment); static long getFragmentInSeconds(Date date, int fragment); static long getFragmentInMinutes(Date date, int fragment); static long getFragmentInHours(Date date, int fragment); static long getFragmentInDays(Date date, int fragment); static long getFragmentInMilliseconds(Calendar calendar, int fragment); static long getFragmentInSeconds(Calendar calendar, int fragment); static long getFragmentInMinutes(Calendar calendar, int fragment); static long getFragmentInHours(Calendar calendar, int fragment); static long getFragmentInDays(Calendar calendar, int fragment); static boolean truncatedEquals(Calendar cal1, Calendar cal2, int field); static boolean truncatedEquals(Date date1, Date date2, int field); static int truncatedCompareTo(Calendar cal1, Calendar cal2, int field); static int truncatedCompareTo(Date date1, Date date2, int field); static final TimeZone UTC_TIME_ZONE; static final long MILLIS_PER_SECOND; static final long MILLIS_PER_MINUTE; static final long MILLIS_PER_HOUR; static final long MILLIS_PER_DAY; final static int SEMI_MONTH; final static int RANGE_WEEK_SUNDAY; final static int RANGE_WEEK_MONDAY; final static int RANGE_WEEK_RELATIVE; final static int RANGE_WEEK_CENTER; final static int RANGE_MONTH_SUNDAY; final static int RANGE_MONTH_MONDAY; final static int MODIFY_TRUNCATE; final static int MODIFY_ROUND; final static int MODIFY_CEILING; }\n", "projects": [{"project": "Lang", "id": 21}]}
{"method": "// Focal method:\npublic class DateUtils { public static Date setDays(Date date, int amount) { return set(date, Calendar.DAY_OF_MONTH, amount); } DateUtils(); static boolean isSameDay(Date date1, Date date2); static boolean isSameDay(Calendar cal1, Calendar cal2); static boolean isSameInstant(Date date1, Date date2); static boolean isSameInstant(Calendar cal1, Calendar cal2); static boolean isSameLocalTime(Calendar cal1, Calendar cal2); static Date parseDate(String str, String... parsePatterns); static Date parseDateStrictly(String str, String... parsePatterns); static Date addYears(Date date, int amount); static Date addMonths(Date date, int amount); static Date addWeeks(Date date, int amount); static Date addDays(Date date, int amount); static Date addHours(Date date, int amount); static Date addMinutes(Date date, int amount); static Date addSeconds(Date date, int amount); static Date addMilliseconds(Date date, int amount); static Date setYears(Date date, int amount); static Date setMonths(Date date, int amount); static Date setDays(Date date, int amount); static Date setHours(Date date, int amount); static Date setMinutes(Date date, int amount); static Date setSeconds(Date date, int amount); static Date setMilliseconds(Date date, int amount); static Calendar toCalendar(Date date); static Date round(Date date, int field); static Calendar round(Calendar date, int field); static Date round(Object date, int field); static Date truncate(Date date, int field); static Calendar truncate(Calendar date, int field); static Date truncate(Object date, int field); static Date ceiling(Date date, int field); static Calendar ceiling(Calendar date, int field); static Date ceiling(Object date, int field); static Iterator<Calendar> iterator(Date focus, int rangeStyle); static Iterator<Calendar> iterator(Calendar focus, int rangeStyle); static Iterator<?> iterator(Object focus, int rangeStyle); static long getFragmentInMilliseconds(Date date, int fragment); static long getFragmentInSeconds(Date date, int fragment); static long getFragmentInMinutes(Date date, int fragment); static long getFragmentInHours(Date date, int fragment); static long getFragmentInDays(Date date, int fragment); static long getFragmentInMilliseconds(Calendar calendar, int fragment); static long getFragmentInSeconds(Calendar calendar, int fragment); static long getFragmentInMinutes(Calendar calendar, int fragment); static long getFragmentInHours(Calendar calendar, int fragment); static long getFragmentInDays(Calendar calendar, int fragment); static boolean truncatedEquals(Calendar cal1, Calendar cal2, int field); static boolean truncatedEquals(Date date1, Date date2, int field); static int truncatedCompareTo(Calendar cal1, Calendar cal2, int field); static int truncatedCompareTo(Date date1, Date date2, int field); static final TimeZone UTC_TIME_ZONE; static final long MILLIS_PER_SECOND; static final long MILLIS_PER_MINUTE; static final long MILLIS_PER_HOUR; static final long MILLIS_PER_DAY; final static int SEMI_MONTH; final static int RANGE_WEEK_SUNDAY; final static int RANGE_WEEK_MONDAY; final static int RANGE_WEEK_RELATIVE; final static int RANGE_WEEK_CENTER; final static int RANGE_MONTH_SUNDAY; final static int RANGE_MONTH_MONDAY; final static int MODIFY_TRUNCATE; final static int MODIFY_ROUND; final static int MODIFY_CEILING; }\n", "projects": [{"project": "Lang", "id": 21}]}
{"method": "// Focal method:\npublic class DateUtils { public static Date addDays(Date date, int amount) { return add(date, Calendar.DAY_OF_MONTH, amount); } DateUtils(); static boolean isSameDay(Date date1, Date date2); static boolean isSameDay(Calendar cal1, Calendar cal2); static boolean isSameInstant(Date date1, Date date2); static boolean isSameInstant(Calendar cal1, Calendar cal2); static boolean isSameLocalTime(Calendar cal1, Calendar cal2); static Date parseDate(String str, String... parsePatterns); static Date parseDateStrictly(String str, String... parsePatterns); static Date addYears(Date date, int amount); static Date addMonths(Date date, int amount); static Date addWeeks(Date date, int amount); static Date addDays(Date date, int amount); static Date addHours(Date date, int amount); static Date addMinutes(Date date, int amount); static Date addSeconds(Date date, int amount); static Date addMilliseconds(Date date, int amount); static Date setYears(Date date, int amount); static Date setMonths(Date date, int amount); static Date setDays(Date date, int amount); static Date setHours(Date date, int amount); static Date setMinutes(Date date, int amount); static Date setSeconds(Date date, int amount); static Date setMilliseconds(Date date, int amount); static Calendar toCalendar(Date date); static Date round(Date date, int field); static Calendar round(Calendar date, int field); static Date round(Object date, int field); static Date truncate(Date date, int field); static Calendar truncate(Calendar date, int field); static Date truncate(Object date, int field); static Date ceiling(Date date, int field); static Calendar ceiling(Calendar date, int field); static Date ceiling(Object date, int field); static Iterator<Calendar> iterator(Date focus, int rangeStyle); static Iterator<Calendar> iterator(Calendar focus, int rangeStyle); static Iterator<?> iterator(Object focus, int rangeStyle); static long getFragmentInMilliseconds(Date date, int fragment); static long getFragmentInSeconds(Date date, int fragment); static long getFragmentInMinutes(Date date, int fragment); static long getFragmentInHours(Date date, int fragment); static long getFragmentInDays(Date date, int fragment); static long getFragmentInMilliseconds(Calendar calendar, int fragment); static long getFragmentInSeconds(Calendar calendar, int fragment); static long getFragmentInMinutes(Calendar calendar, int fragment); static long getFragmentInHours(Calendar calendar, int fragment); static long getFragmentInDays(Calendar calendar, int fragment); static boolean truncatedEquals(Calendar cal1, Calendar cal2, int field); static boolean truncatedEquals(Date date1, Date date2, int field); static int truncatedCompareTo(Calendar cal1, Calendar cal2, int field); static int truncatedCompareTo(Date date1, Date date2, int field); static final TimeZone UTC_TIME_ZONE; static final long MILLIS_PER_SECOND; static final long MILLIS_PER_MINUTE; static final long MILLIS_PER_HOUR; static final long MILLIS_PER_DAY; final static int SEMI_MONTH; final static int RANGE_WEEK_SUNDAY; final static int RANGE_WEEK_MONDAY; final static int RANGE_WEEK_RELATIVE; final static int RANGE_WEEK_CENTER; final static int RANGE_MONTH_SUNDAY; final static int RANGE_MONTH_MONDAY; final static int MODIFY_TRUNCATE; final static int MODIFY_ROUND; final static int MODIFY_CEILING; }\n", "projects": [{"project": "Lang", "id": 21}]}
{"method": "// Focal method:\npublic class DateUtils { public static Date addMinutes(Date date, int amount) { return add(date, Calendar.MINUTE, amount); } DateUtils(); static boolean isSameDay(Date date1, Date date2); static boolean isSameDay(Calendar cal1, Calendar cal2); static boolean isSameInstant(Date date1, Date date2); static boolean isSameInstant(Calendar cal1, Calendar cal2); static boolean isSameLocalTime(Calendar cal1, Calendar cal2); static Date parseDate(String str, String... parsePatterns); static Date parseDateStrictly(String str, String... parsePatterns); static Date addYears(Date date, int amount); static Date addMonths(Date date, int amount); static Date addWeeks(Date date, int amount); static Date addDays(Date date, int amount); static Date addHours(Date date, int amount); static Date addMinutes(Date date, int amount); static Date addSeconds(Date date, int amount); static Date addMilliseconds(Date date, int amount); static Date setYears(Date date, int amount); static Date setMonths(Date date, int amount); static Date setDays(Date date, int amount); static Date setHours(Date date, int amount); static Date setMinutes(Date date, int amount); static Date setSeconds(Date date, int amount); static Date setMilliseconds(Date date, int amount); static Calendar toCalendar(Date date); static Date round(Date date, int field); static Calendar round(Calendar date, int field); static Date round(Object date, int field); static Date truncate(Date date, int field); static Calendar truncate(Calendar date, int field); static Date truncate(Object date, int field); static Date ceiling(Date date, int field); static Calendar ceiling(Calendar date, int field); static Date ceiling(Object date, int field); static Iterator<Calendar> iterator(Date focus, int rangeStyle); static Iterator<Calendar> iterator(Calendar focus, int rangeStyle); static Iterator<?> iterator(Object focus, int rangeStyle); static long getFragmentInMilliseconds(Date date, int fragment); static long getFragmentInSeconds(Date date, int fragment); static long getFragmentInMinutes(Date date, int fragment); static long getFragmentInHours(Date date, int fragment); static long getFragmentInDays(Date date, int fragment); static long getFragmentInMilliseconds(Calendar calendar, int fragment); static long getFragmentInSeconds(Calendar calendar, int fragment); static long getFragmentInMinutes(Calendar calendar, int fragment); static long getFragmentInHours(Calendar calendar, int fragment); static long getFragmentInDays(Calendar calendar, int fragment); static boolean truncatedEquals(Calendar cal1, Calendar cal2, int field); static boolean truncatedEquals(Date date1, Date date2, int field); static int truncatedCompareTo(Calendar cal1, Calendar cal2, int field); static int truncatedCompareTo(Date date1, Date date2, int field); static final TimeZone UTC_TIME_ZONE; static final long MILLIS_PER_SECOND; static final long MILLIS_PER_MINUTE; static final long MILLIS_PER_HOUR; static final long MILLIS_PER_DAY; final static int SEMI_MONTH; final static int RANGE_WEEK_SUNDAY; final static int RANGE_WEEK_MONDAY; final static int RANGE_WEEK_RELATIVE; final static int RANGE_WEEK_CENTER; final static int RANGE_MONTH_SUNDAY; final static int RANGE_MONTH_MONDAY; final static int MODIFY_TRUNCATE; final static int MODIFY_ROUND; final static int MODIFY_CEILING; }\n", "projects": [{"project": "Lang", "id": 21}]}
{"method": "// Focal method:\npublic class DateUtils { public static boolean truncatedEquals(Date date1, Date date2, int field) { return truncatedCompareTo(date1, date2, field) == 0; } DateUtils(); static boolean isSameDay(Date date1, Date date2); static boolean isSameDay(Calendar cal1, Calendar cal2); static boolean isSameInstant(Date date1, Date date2); static boolean isSameInstant(Calendar cal1, Calendar cal2); static boolean isSameLocalTime(Calendar cal1, Calendar cal2); static Date parseDate(String str, String... parsePatterns); static Date parseDateStrictly(String str, String... parsePatterns); static Date addYears(Date date, int amount); static Date addMonths(Date date, int amount); static Date addWeeks(Date date, int amount); static Date addDays(Date date, int amount); static Date addHours(Date date, int amount); static Date addMinutes(Date date, int amount); static Date addSeconds(Date date, int amount); static Date addMilliseconds(Date date, int amount); static Date setYears(Date date, int amount); static Date setMonths(Date date, int amount); static Date setDays(Date date, int amount); static Date setHours(Date date, int amount); static Date setMinutes(Date date, int amount); static Date setSeconds(Date date, int amount); static Date setMilliseconds(Date date, int amount); static Calendar toCalendar(Date date); static Date round(Date date, int field); static Calendar round(Calendar date, int field); static Date round(Object date, int field); static Date truncate(Date date, int field); static Calendar truncate(Calendar date, int field); static Date truncate(Object date, int field); static Date ceiling(Date date, int field); static Calendar ceiling(Calendar date, int field); static Date ceiling(Object date, int field); static Iterator<Calendar> iterator(Date focus, int rangeStyle); static Iterator<Calendar> iterator(Calendar focus, int rangeStyle); static Iterator<?> iterator(Object focus, int rangeStyle); static long getFragmentInMilliseconds(Date date, int fragment); static long getFragmentInSeconds(Date date, int fragment); static long getFragmentInMinutes(Date date, int fragment); static long getFragmentInHours(Date date, int fragment); static long getFragmentInDays(Date date, int fragment); static long getFragmentInMilliseconds(Calendar calendar, int fragment); static long getFragmentInSeconds(Calendar calendar, int fragment); static long getFragmentInMinutes(Calendar calendar, int fragment); static long getFragmentInHours(Calendar calendar, int fragment); static long getFragmentInDays(Calendar calendar, int fragment); static boolean truncatedEquals(Calendar cal1, Calendar cal2, int field); static boolean truncatedEquals(Date date1, Date date2, int field); static int truncatedCompareTo(Calendar cal1, Calendar cal2, int field); static int truncatedCompareTo(Date date1, Date date2, int field); static final TimeZone UTC_TIME_ZONE; static final long MILLIS_PER_SECOND; static final long MILLIS_PER_MINUTE; static final long MILLIS_PER_HOUR; static final long MILLIS_PER_DAY; final static int SEMI_MONTH; final static int RANGE_WEEK_SUNDAY; final static int RANGE_WEEK_MONDAY; final static int RANGE_WEEK_RELATIVE; final static int RANGE_WEEK_CENTER; final static int RANGE_MONTH_SUNDAY; final static int RANGE_MONTH_MONDAY; final static int MODIFY_TRUNCATE; final static int MODIFY_ROUND; final static int MODIFY_CEILING; }\n", "projects": [{"project": "Lang", "id": 21}]}
{"method": "// Focal method:\npublic class DateUtils { public static Date addWeeks(Date date, int amount) { return add(date, Calendar.WEEK_OF_YEAR, amount); } DateUtils(); static boolean isSameDay(Date date1, Date date2); static boolean isSameDay(Calendar cal1, Calendar cal2); static boolean isSameInstant(Date date1, Date date2); static boolean isSameInstant(Calendar cal1, Calendar cal2); static boolean isSameLocalTime(Calendar cal1, Calendar cal2); static Date parseDate(String str, String... parsePatterns); static Date parseDateStrictly(String str, String... parsePatterns); static Date addYears(Date date, int amount); static Date addMonths(Date date, int amount); static Date addWeeks(Date date, int amount); static Date addDays(Date date, int amount); static Date addHours(Date date, int amount); static Date addMinutes(Date date, int amount); static Date addSeconds(Date date, int amount); static Date addMilliseconds(Date date, int amount); static Date setYears(Date date, int amount); static Date setMonths(Date date, int amount); static Date setDays(Date date, int amount); static Date setHours(Date date, int amount); static Date setMinutes(Date date, int amount); static Date setSeconds(Date date, int amount); static Date setMilliseconds(Date date, int amount); static Calendar toCalendar(Date date); static Date round(Date date, int field); static Calendar round(Calendar date, int field); static Date round(Object date, int field); static Date truncate(Date date, int field); static Calendar truncate(Calendar date, int field); static Date truncate(Object date, int field); static Date ceiling(Date date, int field); static Calendar ceiling(Calendar date, int field); static Date ceiling(Object date, int field); static Iterator<Calendar> iterator(Date focus, int rangeStyle); static Iterator<Calendar> iterator(Calendar focus, int rangeStyle); static Iterator<?> iterator(Object focus, int rangeStyle); static long getFragmentInMilliseconds(Date date, int fragment); static long getFragmentInSeconds(Date date, int fragment); static long getFragmentInMinutes(Date date, int fragment); static long getFragmentInHours(Date date, int fragment); static long getFragmentInDays(Date date, int fragment); static long getFragmentInMilliseconds(Calendar calendar, int fragment); static long getFragmentInSeconds(Calendar calendar, int fragment); static long getFragmentInMinutes(Calendar calendar, int fragment); static long getFragmentInHours(Calendar calendar, int fragment); static long getFragmentInDays(Calendar calendar, int fragment); static boolean truncatedEquals(Calendar cal1, Calendar cal2, int field); static boolean truncatedEquals(Date date1, Date date2, int field); static int truncatedCompareTo(Calendar cal1, Calendar cal2, int field); static int truncatedCompareTo(Date date1, Date date2, int field); static final TimeZone UTC_TIME_ZONE; static final long MILLIS_PER_SECOND; static final long MILLIS_PER_MINUTE; static final long MILLIS_PER_HOUR; static final long MILLIS_PER_DAY; final static int SEMI_MONTH; final static int RANGE_WEEK_SUNDAY; final static int RANGE_WEEK_MONDAY; final static int RANGE_WEEK_RELATIVE; final static int RANGE_WEEK_CENTER; final static int RANGE_MONTH_SUNDAY; final static int RANGE_MONTH_MONDAY; final static int MODIFY_TRUNCATE; final static int MODIFY_ROUND; final static int MODIFY_CEILING; }\n", "projects": [{"project": "Lang", "id": 21}]}
{"method": "// Focal method:\npublic class DateUtils { public static long getFragmentInSeconds(Date date, int fragment) { return getFragment(date, fragment, Calendar.SECOND); } DateUtils(); static boolean isSameDay(Date date1, Date date2); static boolean isSameDay(Calendar cal1, Calendar cal2); static boolean isSameInstant(Date date1, Date date2); static boolean isSameInstant(Calendar cal1, Calendar cal2); static boolean isSameLocalTime(Calendar cal1, Calendar cal2); static Date parseDate(String str, String... parsePatterns); static Date parseDateStrictly(String str, String... parsePatterns); static Date addYears(Date date, int amount); static Date addMonths(Date date, int amount); static Date addWeeks(Date date, int amount); static Date addDays(Date date, int amount); static Date addHours(Date date, int amount); static Date addMinutes(Date date, int amount); static Date addSeconds(Date date, int amount); static Date addMilliseconds(Date date, int amount); static Date setYears(Date date, int amount); static Date setMonths(Date date, int amount); static Date setDays(Date date, int amount); static Date setHours(Date date, int amount); static Date setMinutes(Date date, int amount); static Date setSeconds(Date date, int amount); static Date setMilliseconds(Date date, int amount); static Calendar toCalendar(Date date); static Date round(Date date, int field); static Calendar round(Calendar date, int field); static Date round(Object date, int field); static Date truncate(Date date, int field); static Calendar truncate(Calendar date, int field); static Date truncate(Object date, int field); static Date ceiling(Date date, int field); static Calendar ceiling(Calendar date, int field); static Date ceiling(Object date, int field); static Iterator<Calendar> iterator(Date focus, int rangeStyle); static Iterator<Calendar> iterator(Calendar focus, int rangeStyle); static Iterator<?> iterator(Object focus, int rangeStyle); static long getFragmentInMilliseconds(Date date, int fragment); static long getFragmentInSeconds(Date date, int fragment); static long getFragmentInMinutes(Date date, int fragment); static long getFragmentInHours(Date date, int fragment); static long getFragmentInDays(Date date, int fragment); static long getFragmentInMilliseconds(Calendar calendar, int fragment); static long getFragmentInSeconds(Calendar calendar, int fragment); static long getFragmentInMinutes(Calendar calendar, int fragment); static long getFragmentInHours(Calendar calendar, int fragment); static long getFragmentInDays(Calendar calendar, int fragment); static boolean truncatedEquals(Calendar cal1, Calendar cal2, int field); static boolean truncatedEquals(Date date1, Date date2, int field); static int truncatedCompareTo(Calendar cal1, Calendar cal2, int field); static int truncatedCompareTo(Date date1, Date date2, int field); static final TimeZone UTC_TIME_ZONE; static final long MILLIS_PER_SECOND; static final long MILLIS_PER_MINUTE; static final long MILLIS_PER_HOUR; static final long MILLIS_PER_DAY; final static int SEMI_MONTH; final static int RANGE_WEEK_SUNDAY; final static int RANGE_WEEK_MONDAY; final static int RANGE_WEEK_RELATIVE; final static int RANGE_WEEK_CENTER; final static int RANGE_MONTH_SUNDAY; final static int RANGE_MONTH_MONDAY; final static int MODIFY_TRUNCATE; final static int MODIFY_ROUND; final static int MODIFY_CEILING; }\n", "projects": [{"project": "Lang", "id": 21}]}
{"method": "// Focal method:\npublic class DateUtils { public static Date truncate(Object date, int field) { if (date == null) { throw new IllegalArgumentException(\"The date must not be null\"); } if (date instanceof Date) { return truncate((Date) date, field); } else if (date instanceof Calendar) { return truncate((Calendar) date, field).getTime(); } else { throw new ClassCastException(\"Could not truncate \" + date); } } DateUtils(); static boolean isSameDay(Date date1, Date date2); static boolean isSameDay(Calendar cal1, Calendar cal2); static boolean isSameInstant(Date date1, Date date2); static boolean isSameInstant(Calendar cal1, Calendar cal2); static boolean isSameLocalTime(Calendar cal1, Calendar cal2); static Date parseDate(String str, String... parsePatterns); static Date parseDateStrictly(String str, String... parsePatterns); static Date addYears(Date date, int amount); static Date addMonths(Date date, int amount); static Date addWeeks(Date date, int amount); static Date addDays(Date date, int amount); static Date addHours(Date date, int amount); static Date addMinutes(Date date, int amount); static Date addSeconds(Date date, int amount); static Date addMilliseconds(Date date, int amount); static Date setYears(Date date, int amount); static Date setMonths(Date date, int amount); static Date setDays(Date date, int amount); static Date setHours(Date date, int amount); static Date setMinutes(Date date, int amount); static Date setSeconds(Date date, int amount); static Date setMilliseconds(Date date, int amount); static Calendar toCalendar(Date date); static Date round(Date date, int field); static Calendar round(Calendar date, int field); static Date round(Object date, int field); static Date truncate(Date date, int field); static Calendar truncate(Calendar date, int field); static Date truncate(Object date, int field); static Date ceiling(Date date, int field); static Calendar ceiling(Calendar date, int field); static Date ceiling(Object date, int field); static Iterator<Calendar> iterator(Date focus, int rangeStyle); static Iterator<Calendar> iterator(Calendar focus, int rangeStyle); static Iterator<?> iterator(Object focus, int rangeStyle); static long getFragmentInMilliseconds(Date date, int fragment); static long getFragmentInSeconds(Date date, int fragment); static long getFragmentInMinutes(Date date, int fragment); static long getFragmentInHours(Date date, int fragment); static long getFragmentInDays(Date date, int fragment); static long getFragmentInMilliseconds(Calendar calendar, int fragment); static long getFragmentInSeconds(Calendar calendar, int fragment); static long getFragmentInMinutes(Calendar calendar, int fragment); static long getFragmentInHours(Calendar calendar, int fragment); static long getFragmentInDays(Calendar calendar, int fragment); static boolean truncatedEquals(Calendar cal1, Calendar cal2, int field); static boolean truncatedEquals(Date date1, Date date2, int field); static int truncatedCompareTo(Calendar cal1, Calendar cal2, int field); static int truncatedCompareTo(Date date1, Date date2, int field); static final TimeZone UTC_TIME_ZONE; static final long MILLIS_PER_SECOND; static final long MILLIS_PER_MINUTE; static final long MILLIS_PER_HOUR; static final long MILLIS_PER_DAY; final static int SEMI_MONTH; final static int RANGE_WEEK_SUNDAY; final static int RANGE_WEEK_MONDAY; final static int RANGE_WEEK_RELATIVE; final static int RANGE_WEEK_CENTER; final static int RANGE_MONTH_SUNDAY; final static int RANGE_MONTH_MONDAY; final static int MODIFY_TRUNCATE; final static int MODIFY_ROUND; final static int MODIFY_CEILING; }\n", "projects": [{"project": "Lang", "id": 21}]}
{"method": "// Focal method:\npublic class DateUtils { public static Date addMonths(Date date, int amount) { return add(date, Calendar.MONTH, amount); } DateUtils(); static boolean isSameDay(Date date1, Date date2); static boolean isSameDay(Calendar cal1, Calendar cal2); static boolean isSameInstant(Date date1, Date date2); static boolean isSameInstant(Calendar cal1, Calendar cal2); static boolean isSameLocalTime(Calendar cal1, Calendar cal2); static Date parseDate(String str, String... parsePatterns); static Date parseDateStrictly(String str, String... parsePatterns); static Date addYears(Date date, int amount); static Date addMonths(Date date, int amount); static Date addWeeks(Date date, int amount); static Date addDays(Date date, int amount); static Date addHours(Date date, int amount); static Date addMinutes(Date date, int amount); static Date addSeconds(Date date, int amount); static Date addMilliseconds(Date date, int amount); static Date setYears(Date date, int amount); static Date setMonths(Date date, int amount); static Date setDays(Date date, int amount); static Date setHours(Date date, int amount); static Date setMinutes(Date date, int amount); static Date setSeconds(Date date, int amount); static Date setMilliseconds(Date date, int amount); static Calendar toCalendar(Date date); static Date round(Date date, int field); static Calendar round(Calendar date, int field); static Date round(Object date, int field); static Date truncate(Date date, int field); static Calendar truncate(Calendar date, int field); static Date truncate(Object date, int field); static Date ceiling(Date date, int field); static Calendar ceiling(Calendar date, int field); static Date ceiling(Object date, int field); static Iterator<Calendar> iterator(Date focus, int rangeStyle); static Iterator<Calendar> iterator(Calendar focus, int rangeStyle); static Iterator<?> iterator(Object focus, int rangeStyle); static long getFragmentInMilliseconds(Date date, int fragment); static long getFragmentInSeconds(Date date, int fragment); static long getFragmentInMinutes(Date date, int fragment); static long getFragmentInHours(Date date, int fragment); static long getFragmentInDays(Date date, int fragment); static long getFragmentInMilliseconds(Calendar calendar, int fragment); static long getFragmentInSeconds(Calendar calendar, int fragment); static long getFragmentInMinutes(Calendar calendar, int fragment); static long getFragmentInHours(Calendar calendar, int fragment); static long getFragmentInDays(Calendar calendar, int fragment); static boolean truncatedEquals(Calendar cal1, Calendar cal2, int field); static boolean truncatedEquals(Date date1, Date date2, int field); static int truncatedCompareTo(Calendar cal1, Calendar cal2, int field); static int truncatedCompareTo(Date date1, Date date2, int field); static final TimeZone UTC_TIME_ZONE; static final long MILLIS_PER_SECOND; static final long MILLIS_PER_MINUTE; static final long MILLIS_PER_HOUR; static final long MILLIS_PER_DAY; final static int SEMI_MONTH; final static int RANGE_WEEK_SUNDAY; final static int RANGE_WEEK_MONDAY; final static int RANGE_WEEK_RELATIVE; final static int RANGE_WEEK_CENTER; final static int RANGE_MONTH_SUNDAY; final static int RANGE_MONTH_MONDAY; final static int MODIFY_TRUNCATE; final static int MODIFY_ROUND; final static int MODIFY_CEILING; }\n", "projects": [{"project": "Lang", "id": 21}]}
{"method": "// Focal method:\npublic class DateUtils { public static Date parseDateStrictly(String str, String... parsePatterns) throws ParseException { return parseDateWithLeniency(str, parsePatterns, false); } DateUtils(); static boolean isSameDay(Date date1, Date date2); static boolean isSameDay(Calendar cal1, Calendar cal2); static boolean isSameInstant(Date date1, Date date2); static boolean isSameInstant(Calendar cal1, Calendar cal2); static boolean isSameLocalTime(Calendar cal1, Calendar cal2); static Date parseDate(String str, String... parsePatterns); static Date parseDateStrictly(String str, String... parsePatterns); static Date addYears(Date date, int amount); static Date addMonths(Date date, int amount); static Date addWeeks(Date date, int amount); static Date addDays(Date date, int amount); static Date addHours(Date date, int amount); static Date addMinutes(Date date, int amount); static Date addSeconds(Date date, int amount); static Date addMilliseconds(Date date, int amount); static Date setYears(Date date, int amount); static Date setMonths(Date date, int amount); static Date setDays(Date date, int amount); static Date setHours(Date date, int amount); static Date setMinutes(Date date, int amount); static Date setSeconds(Date date, int amount); static Date setMilliseconds(Date date, int amount); static Calendar toCalendar(Date date); static Date round(Date date, int field); static Calendar round(Calendar date, int field); static Date round(Object date, int field); static Date truncate(Date date, int field); static Calendar truncate(Calendar date, int field); static Date truncate(Object date, int field); static Date ceiling(Date date, int field); static Calendar ceiling(Calendar date, int field); static Date ceiling(Object date, int field); static Iterator<Calendar> iterator(Date focus, int rangeStyle); static Iterator<Calendar> iterator(Calendar focus, int rangeStyle); static Iterator<?> iterator(Object focus, int rangeStyle); static long getFragmentInMilliseconds(Date date, int fragment); static long getFragmentInSeconds(Date date, int fragment); static long getFragmentInMinutes(Date date, int fragment); static long getFragmentInHours(Date date, int fragment); static long getFragmentInDays(Date date, int fragment); static long getFragmentInMilliseconds(Calendar calendar, int fragment); static long getFragmentInSeconds(Calendar calendar, int fragment); static long getFragmentInMinutes(Calendar calendar, int fragment); static long getFragmentInHours(Calendar calendar, int fragment); static long getFragmentInDays(Calendar calendar, int fragment); static boolean truncatedEquals(Calendar cal1, Calendar cal2, int field); static boolean truncatedEquals(Date date1, Date date2, int field); static int truncatedCompareTo(Calendar cal1, Calendar cal2, int field); static int truncatedCompareTo(Date date1, Date date2, int field); static final TimeZone UTC_TIME_ZONE; static final long MILLIS_PER_SECOND; static final long MILLIS_PER_MINUTE; static final long MILLIS_PER_HOUR; static final long MILLIS_PER_DAY; final static int SEMI_MONTH; final static int RANGE_WEEK_SUNDAY; final static int RANGE_WEEK_MONDAY; final static int RANGE_WEEK_RELATIVE; final static int RANGE_WEEK_CENTER; final static int RANGE_MONTH_SUNDAY; final static int RANGE_MONTH_MONDAY; final static int MODIFY_TRUNCATE; final static int MODIFY_ROUND; final static int MODIFY_CEILING; }\n", "projects": [{"project": "Lang", "id": 21}]}
{"method": "// Focal method:\npublic class DateUtils { public static long getFragmentInMilliseconds(Calendar calendar, int fragment) { return getFragment(calendar, fragment, Calendar.MILLISECOND); } DateUtils(); static boolean isSameDay(Date date1, Date date2); static boolean isSameDay(Calendar cal1, Calendar cal2); static boolean isSameInstant(Date date1, Date date2); static boolean isSameInstant(Calendar cal1, Calendar cal2); static boolean isSameLocalTime(Calendar cal1, Calendar cal2); static Date parseDate(String str, String... parsePatterns); static Date parseDateStrictly(String str, String... parsePatterns); static Date addYears(Date date, int amount); static Date addMonths(Date date, int amount); static Date addWeeks(Date date, int amount); static Date addDays(Date date, int amount); static Date addHours(Date date, int amount); static Date addMinutes(Date date, int amount); static Date addSeconds(Date date, int amount); static Date addMilliseconds(Date date, int amount); static Date setYears(Date date, int amount); static Date setMonths(Date date, int amount); static Date setDays(Date date, int amount); static Date setHours(Date date, int amount); static Date setMinutes(Date date, int amount); static Date setSeconds(Date date, int amount); static Date setMilliseconds(Date date, int amount); static Calendar toCalendar(Date date); static Date round(Date date, int field); static Calendar round(Calendar date, int field); static Date round(Object date, int field); static Date truncate(Date date, int field); static Calendar truncate(Calendar date, int field); static Date truncate(Object date, int field); static Date ceiling(Date date, int field); static Calendar ceiling(Calendar date, int field); static Date ceiling(Object date, int field); static Iterator<Calendar> iterator(Date focus, int rangeStyle); static Iterator<Calendar> iterator(Calendar focus, int rangeStyle); static Iterator<?> iterator(Object focus, int rangeStyle); static long getFragmentInMilliseconds(Date date, int fragment); static long getFragmentInSeconds(Date date, int fragment); static long getFragmentInMinutes(Date date, int fragment); static long getFragmentInHours(Date date, int fragment); static long getFragmentInDays(Date date, int fragment); static long getFragmentInMilliseconds(Calendar calendar, int fragment); static long getFragmentInSeconds(Calendar calendar, int fragment); static long getFragmentInMinutes(Calendar calendar, int fragment); static long getFragmentInHours(Calendar calendar, int fragment); static long getFragmentInDays(Calendar calendar, int fragment); static boolean truncatedEquals(Calendar cal1, Calendar cal2, int field); static boolean truncatedEquals(Date date1, Date date2, int field); static int truncatedCompareTo(Calendar cal1, Calendar cal2, int field); static int truncatedCompareTo(Date date1, Date date2, int field); static final TimeZone UTC_TIME_ZONE; static final long MILLIS_PER_SECOND; static final long MILLIS_PER_MINUTE; static final long MILLIS_PER_HOUR; static final long MILLIS_PER_DAY; final static int SEMI_MONTH; final static int RANGE_WEEK_SUNDAY; final static int RANGE_WEEK_MONDAY; final static int RANGE_WEEK_RELATIVE; final static int RANGE_WEEK_CENTER; final static int RANGE_MONTH_SUNDAY; final static int RANGE_MONTH_MONDAY; final static int MODIFY_TRUNCATE; final static int MODIFY_ROUND; final static int MODIFY_CEILING; }\n", "projects": [{"project": "Lang", "id": 21}]}
{"method": "// Focal method:\npublic class DateUtils { public static long getFragmentInHours(Calendar calendar, int fragment) { return getFragment(calendar, fragment, Calendar.HOUR_OF_DAY); } DateUtils(); static boolean isSameDay(Date date1, Date date2); static boolean isSameDay(Calendar cal1, Calendar cal2); static boolean isSameInstant(Date date1, Date date2); static boolean isSameInstant(Calendar cal1, Calendar cal2); static boolean isSameLocalTime(Calendar cal1, Calendar cal2); static Date parseDate(String str, String... parsePatterns); static Date parseDateStrictly(String str, String... parsePatterns); static Date addYears(Date date, int amount); static Date addMonths(Date date, int amount); static Date addWeeks(Date date, int amount); static Date addDays(Date date, int amount); static Date addHours(Date date, int amount); static Date addMinutes(Date date, int amount); static Date addSeconds(Date date, int amount); static Date addMilliseconds(Date date, int amount); static Date setYears(Date date, int amount); static Date setMonths(Date date, int amount); static Date setDays(Date date, int amount); static Date setHours(Date date, int amount); static Date setMinutes(Date date, int amount); static Date setSeconds(Date date, int amount); static Date setMilliseconds(Date date, int amount); static Calendar toCalendar(Date date); static Date round(Date date, int field); static Calendar round(Calendar date, int field); static Date round(Object date, int field); static Date truncate(Date date, int field); static Calendar truncate(Calendar date, int field); static Date truncate(Object date, int field); static Date ceiling(Date date, int field); static Calendar ceiling(Calendar date, int field); static Date ceiling(Object date, int field); static Iterator<Calendar> iterator(Date focus, int rangeStyle); static Iterator<Calendar> iterator(Calendar focus, int rangeStyle); static Iterator<?> iterator(Object focus, int rangeStyle); static long getFragmentInMilliseconds(Date date, int fragment); static long getFragmentInSeconds(Date date, int fragment); static long getFragmentInMinutes(Date date, int fragment); static long getFragmentInHours(Date date, int fragment); static long getFragmentInDays(Date date, int fragment); static long getFragmentInMilliseconds(Calendar calendar, int fragment); static long getFragmentInSeconds(Calendar calendar, int fragment); static long getFragmentInMinutes(Calendar calendar, int fragment); static long getFragmentInHours(Calendar calendar, int fragment); static long getFragmentInDays(Calendar calendar, int fragment); static boolean truncatedEquals(Calendar cal1, Calendar cal2, int field); static boolean truncatedEquals(Date date1, Date date2, int field); static int truncatedCompareTo(Calendar cal1, Calendar cal2, int field); static int truncatedCompareTo(Date date1, Date date2, int field); static final TimeZone UTC_TIME_ZONE; static final long MILLIS_PER_SECOND; static final long MILLIS_PER_MINUTE; static final long MILLIS_PER_HOUR; static final long MILLIS_PER_DAY; final static int SEMI_MONTH; final static int RANGE_WEEK_SUNDAY; final static int RANGE_WEEK_MONDAY; final static int RANGE_WEEK_RELATIVE; final static int RANGE_WEEK_CENTER; final static int RANGE_MONTH_SUNDAY; final static int RANGE_MONTH_MONDAY; final static int MODIFY_TRUNCATE; final static int MODIFY_ROUND; final static int MODIFY_CEILING; }\n", "projects": [{"project": "Lang", "id": 21}]}
{"method": "// Focal method:\npublic class DateUtils { public static Date addHours(Date date, int amount) { return add(date, Calendar.HOUR_OF_DAY, amount); } DateUtils(); static boolean isSameDay(Date date1, Date date2); static boolean isSameDay(Calendar cal1, Calendar cal2); static boolean isSameInstant(Date date1, Date date2); static boolean isSameInstant(Calendar cal1, Calendar cal2); static boolean isSameLocalTime(Calendar cal1, Calendar cal2); static Date parseDate(String str, String... parsePatterns); static Date parseDateStrictly(String str, String... parsePatterns); static Date addYears(Date date, int amount); static Date addMonths(Date date, int amount); static Date addWeeks(Date date, int amount); static Date addDays(Date date, int amount); static Date addHours(Date date, int amount); static Date addMinutes(Date date, int amount); static Date addSeconds(Date date, int amount); static Date addMilliseconds(Date date, int amount); static Date setYears(Date date, int amount); static Date setMonths(Date date, int amount); static Date setDays(Date date, int amount); static Date setHours(Date date, int amount); static Date setMinutes(Date date, int amount); static Date setSeconds(Date date, int amount); static Date setMilliseconds(Date date, int amount); static Calendar toCalendar(Date date); static Date round(Date date, int field); static Calendar round(Calendar date, int field); static Date round(Object date, int field); static Date truncate(Date date, int field); static Calendar truncate(Calendar date, int field); static Date truncate(Object date, int field); static Date ceiling(Date date, int field); static Calendar ceiling(Calendar date, int field); static Date ceiling(Object date, int field); static Iterator<Calendar> iterator(Date focus, int rangeStyle); static Iterator<Calendar> iterator(Calendar focus, int rangeStyle); static Iterator<?> iterator(Object focus, int rangeStyle); static long getFragmentInMilliseconds(Date date, int fragment); static long getFragmentInSeconds(Date date, int fragment); static long getFragmentInMinutes(Date date, int fragment); static long getFragmentInHours(Date date, int fragment); static long getFragmentInDays(Date date, int fragment); static long getFragmentInMilliseconds(Calendar calendar, int fragment); static long getFragmentInSeconds(Calendar calendar, int fragment); static long getFragmentInMinutes(Calendar calendar, int fragment); static long getFragmentInHours(Calendar calendar, int fragment); static long getFragmentInDays(Calendar calendar, int fragment); static boolean truncatedEquals(Calendar cal1, Calendar cal2, int field); static boolean truncatedEquals(Date date1, Date date2, int field); static int truncatedCompareTo(Calendar cal1, Calendar cal2, int field); static int truncatedCompareTo(Date date1, Date date2, int field); static final TimeZone UTC_TIME_ZONE; static final long MILLIS_PER_SECOND; static final long MILLIS_PER_MINUTE; static final long MILLIS_PER_HOUR; static final long MILLIS_PER_DAY; final static int SEMI_MONTH; final static int RANGE_WEEK_SUNDAY; final static int RANGE_WEEK_MONDAY; final static int RANGE_WEEK_RELATIVE; final static int RANGE_WEEK_CENTER; final static int RANGE_MONTH_SUNDAY; final static int RANGE_MONTH_MONDAY; final static int MODIFY_TRUNCATE; final static int MODIFY_ROUND; final static int MODIFY_CEILING; }\n", "projects": [{"project": "Lang", "id": 21}]}
{"method": "// Focal method:\npublic class DateUtils { public static long getFragmentInMilliseconds(Date date, int fragment) { return getFragment(date, fragment, Calendar.MILLISECOND); } DateUtils(); static boolean isSameDay(Date date1, Date date2); static boolean isSameDay(Calendar cal1, Calendar cal2); static boolean isSameInstant(Date date1, Date date2); static boolean isSameInstant(Calendar cal1, Calendar cal2); static boolean isSameLocalTime(Calendar cal1, Calendar cal2); static Date parseDate(String str, String... parsePatterns); static Date parseDateStrictly(String str, String... parsePatterns); static Date addYears(Date date, int amount); static Date addMonths(Date date, int amount); static Date addWeeks(Date date, int amount); static Date addDays(Date date, int amount); static Date addHours(Date date, int amount); static Date addMinutes(Date date, int amount); static Date addSeconds(Date date, int amount); static Date addMilliseconds(Date date, int amount); static Date setYears(Date date, int amount); static Date setMonths(Date date, int amount); static Date setDays(Date date, int amount); static Date setHours(Date date, int amount); static Date setMinutes(Date date, int amount); static Date setSeconds(Date date, int amount); static Date setMilliseconds(Date date, int amount); static Calendar toCalendar(Date date); static Date round(Date date, int field); static Calendar round(Calendar date, int field); static Date round(Object date, int field); static Date truncate(Date date, int field); static Calendar truncate(Calendar date, int field); static Date truncate(Object date, int field); static Date ceiling(Date date, int field); static Calendar ceiling(Calendar date, int field); static Date ceiling(Object date, int field); static Iterator<Calendar> iterator(Date focus, int rangeStyle); static Iterator<Calendar> iterator(Calendar focus, int rangeStyle); static Iterator<?> iterator(Object focus, int rangeStyle); static long getFragmentInMilliseconds(Date date, int fragment); static long getFragmentInSeconds(Date date, int fragment); static long getFragmentInMinutes(Date date, int fragment); static long getFragmentInHours(Date date, int fragment); static long getFragmentInDays(Date date, int fragment); static long getFragmentInMilliseconds(Calendar calendar, int fragment); static long getFragmentInSeconds(Calendar calendar, int fragment); static long getFragmentInMinutes(Calendar calendar, int fragment); static long getFragmentInHours(Calendar calendar, int fragment); static long getFragmentInDays(Calendar calendar, int fragment); static boolean truncatedEquals(Calendar cal1, Calendar cal2, int field); static boolean truncatedEquals(Date date1, Date date2, int field); static int truncatedCompareTo(Calendar cal1, Calendar cal2, int field); static int truncatedCompareTo(Date date1, Date date2, int field); static final TimeZone UTC_TIME_ZONE; static final long MILLIS_PER_SECOND; static final long MILLIS_PER_MINUTE; static final long MILLIS_PER_HOUR; static final long MILLIS_PER_DAY; final static int SEMI_MONTH; final static int RANGE_WEEK_SUNDAY; final static int RANGE_WEEK_MONDAY; final static int RANGE_WEEK_RELATIVE; final static int RANGE_WEEK_CENTER; final static int RANGE_MONTH_SUNDAY; final static int RANGE_MONTH_MONDAY; final static int MODIFY_TRUNCATE; final static int MODIFY_ROUND; final static int MODIFY_CEILING; }\n", "projects": [{"project": "Lang", "id": 21}]}
{"method": "// Focal method:\npublic class DateUtils { public static Iterator<Calendar> iterator(Date focus, int rangeStyle) { if (focus == null) { throw new IllegalArgumentException(\"The date must not be null\"); } Calendar gval = Calendar.getInstance(); gval.setTime(focus); return iterator(gval, rangeStyle); } DateUtils(); static boolean isSameDay(Date date1, Date date2); static boolean isSameDay(Calendar cal1, Calendar cal2); static boolean isSameInstant(Date date1, Date date2); static boolean isSameInstant(Calendar cal1, Calendar cal2); static boolean isSameLocalTime(Calendar cal1, Calendar cal2); static Date parseDate(String str, String... parsePatterns); static Date parseDateStrictly(String str, String... parsePatterns); static Date addYears(Date date, int amount); static Date addMonths(Date date, int amount); static Date addWeeks(Date date, int amount); static Date addDays(Date date, int amount); static Date addHours(Date date, int amount); static Date addMinutes(Date date, int amount); static Date addSeconds(Date date, int amount); static Date addMilliseconds(Date date, int amount); static Date setYears(Date date, int amount); static Date setMonths(Date date, int amount); static Date setDays(Date date, int amount); static Date setHours(Date date, int amount); static Date setMinutes(Date date, int amount); static Date setSeconds(Date date, int amount); static Date setMilliseconds(Date date, int amount); static Calendar toCalendar(Date date); static Date round(Date date, int field); static Calendar round(Calendar date, int field); static Date round(Object date, int field); static Date truncate(Date date, int field); static Calendar truncate(Calendar date, int field); static Date truncate(Object date, int field); static Date ceiling(Date date, int field); static Calendar ceiling(Calendar date, int field); static Date ceiling(Object date, int field); static Iterator<Calendar> iterator(Date focus, int rangeStyle); static Iterator<Calendar> iterator(Calendar focus, int rangeStyle); static Iterator<?> iterator(Object focus, int rangeStyle); static long getFragmentInMilliseconds(Date date, int fragment); static long getFragmentInSeconds(Date date, int fragment); static long getFragmentInMinutes(Date date, int fragment); static long getFragmentInHours(Date date, int fragment); static long getFragmentInDays(Date date, int fragment); static long getFragmentInMilliseconds(Calendar calendar, int fragment); static long getFragmentInSeconds(Calendar calendar, int fragment); static long getFragmentInMinutes(Calendar calendar, int fragment); static long getFragmentInHours(Calendar calendar, int fragment); static long getFragmentInDays(Calendar calendar, int fragment); static boolean truncatedEquals(Calendar cal1, Calendar cal2, int field); static boolean truncatedEquals(Date date1, Date date2, int field); static int truncatedCompareTo(Calendar cal1, Calendar cal2, int field); static int truncatedCompareTo(Date date1, Date date2, int field); static final TimeZone UTC_TIME_ZONE; static final long MILLIS_PER_SECOND; static final long MILLIS_PER_MINUTE; static final long MILLIS_PER_HOUR; static final long MILLIS_PER_DAY; final static int SEMI_MONTH; final static int RANGE_WEEK_SUNDAY; final static int RANGE_WEEK_MONDAY; final static int RANGE_WEEK_RELATIVE; final static int RANGE_WEEK_CENTER; final static int RANGE_MONTH_SUNDAY; final static int RANGE_MONTH_MONDAY; final static int MODIFY_TRUNCATE; final static int MODIFY_ROUND; final static int MODIFY_CEILING; }\n", "projects": [{"project": "Lang", "id": 21}]}
{"method": "// Focal method:\npublic class DateUtils { public static Date setMinutes(Date date, int amount) { return set(date, Calendar.MINUTE, amount); } DateUtils(); static boolean isSameDay(Date date1, Date date2); static boolean isSameDay(Calendar cal1, Calendar cal2); static boolean isSameInstant(Date date1, Date date2); static boolean isSameInstant(Calendar cal1, Calendar cal2); static boolean isSameLocalTime(Calendar cal1, Calendar cal2); static Date parseDate(String str, String... parsePatterns); static Date parseDateStrictly(String str, String... parsePatterns); static Date addYears(Date date, int amount); static Date addMonths(Date date, int amount); static Date addWeeks(Date date, int amount); static Date addDays(Date date, int amount); static Date addHours(Date date, int amount); static Date addMinutes(Date date, int amount); static Date addSeconds(Date date, int amount); static Date addMilliseconds(Date date, int amount); static Date setYears(Date date, int amount); static Date setMonths(Date date, int amount); static Date setDays(Date date, int amount); static Date setHours(Date date, int amount); static Date setMinutes(Date date, int amount); static Date setSeconds(Date date, int amount); static Date setMilliseconds(Date date, int amount); static Calendar toCalendar(Date date); static Date round(Date date, int field); static Calendar round(Calendar date, int field); static Date round(Object date, int field); static Date truncate(Date date, int field); static Calendar truncate(Calendar date, int field); static Date truncate(Object date, int field); static Date ceiling(Date date, int field); static Calendar ceiling(Calendar date, int field); static Date ceiling(Object date, int field); static Iterator<Calendar> iterator(Date focus, int rangeStyle); static Iterator<Calendar> iterator(Calendar focus, int rangeStyle); static Iterator<?> iterator(Object focus, int rangeStyle); static long getFragmentInMilliseconds(Date date, int fragment); static long getFragmentInSeconds(Date date, int fragment); static long getFragmentInMinutes(Date date, int fragment); static long getFragmentInHours(Date date, int fragment); static long getFragmentInDays(Date date, int fragment); static long getFragmentInMilliseconds(Calendar calendar, int fragment); static long getFragmentInSeconds(Calendar calendar, int fragment); static long getFragmentInMinutes(Calendar calendar, int fragment); static long getFragmentInHours(Calendar calendar, int fragment); static long getFragmentInDays(Calendar calendar, int fragment); static boolean truncatedEquals(Calendar cal1, Calendar cal2, int field); static boolean truncatedEquals(Date date1, Date date2, int field); static int truncatedCompareTo(Calendar cal1, Calendar cal2, int field); static int truncatedCompareTo(Date date1, Date date2, int field); static final TimeZone UTC_TIME_ZONE; static final long MILLIS_PER_SECOND; static final long MILLIS_PER_MINUTE; static final long MILLIS_PER_HOUR; static final long MILLIS_PER_DAY; final static int SEMI_MONTH; final static int RANGE_WEEK_SUNDAY; final static int RANGE_WEEK_MONDAY; final static int RANGE_WEEK_RELATIVE; final static int RANGE_WEEK_CENTER; final static int RANGE_MONTH_SUNDAY; final static int RANGE_MONTH_MONDAY; final static int MODIFY_TRUNCATE; final static int MODIFY_ROUND; final static int MODIFY_CEILING; }\n", "projects": [{"project": "Lang", "id": 21}]}
{"method": "// Focal method:\npublic class DateUtils { public static long getFragmentInDays(Date date, int fragment) { return getFragment(date, fragment, Calendar.DAY_OF_YEAR); } DateUtils(); static boolean isSameDay(Date date1, Date date2); static boolean isSameDay(Calendar cal1, Calendar cal2); static boolean isSameInstant(Date date1, Date date2); static boolean isSameInstant(Calendar cal1, Calendar cal2); static boolean isSameLocalTime(Calendar cal1, Calendar cal2); static Date parseDate(String str, String... parsePatterns); static Date parseDateStrictly(String str, String... parsePatterns); static Date addYears(Date date, int amount); static Date addMonths(Date date, int amount); static Date addWeeks(Date date, int amount); static Date addDays(Date date, int amount); static Date addHours(Date date, int amount); static Date addMinutes(Date date, int amount); static Date addSeconds(Date date, int amount); static Date addMilliseconds(Date date, int amount); static Date setYears(Date date, int amount); static Date setMonths(Date date, int amount); static Date setDays(Date date, int amount); static Date setHours(Date date, int amount); static Date setMinutes(Date date, int amount); static Date setSeconds(Date date, int amount); static Date setMilliseconds(Date date, int amount); static Calendar toCalendar(Date date); static Date round(Date date, int field); static Calendar round(Calendar date, int field); static Date round(Object date, int field); static Date truncate(Date date, int field); static Calendar truncate(Calendar date, int field); static Date truncate(Object date, int field); static Date ceiling(Date date, int field); static Calendar ceiling(Calendar date, int field); static Date ceiling(Object date, int field); static Iterator<Calendar> iterator(Date focus, int rangeStyle); static Iterator<Calendar> iterator(Calendar focus, int rangeStyle); static Iterator<?> iterator(Object focus, int rangeStyle); static long getFragmentInMilliseconds(Date date, int fragment); static long getFragmentInSeconds(Date date, int fragment); static long getFragmentInMinutes(Date date, int fragment); static long getFragmentInHours(Date date, int fragment); static long getFragmentInDays(Date date, int fragment); static long getFragmentInMilliseconds(Calendar calendar, int fragment); static long getFragmentInSeconds(Calendar calendar, int fragment); static long getFragmentInMinutes(Calendar calendar, int fragment); static long getFragmentInHours(Calendar calendar, int fragment); static long getFragmentInDays(Calendar calendar, int fragment); static boolean truncatedEquals(Calendar cal1, Calendar cal2, int field); static boolean truncatedEquals(Date date1, Date date2, int field); static int truncatedCompareTo(Calendar cal1, Calendar cal2, int field); static int truncatedCompareTo(Date date1, Date date2, int field); static final TimeZone UTC_TIME_ZONE; static final long MILLIS_PER_SECOND; static final long MILLIS_PER_MINUTE; static final long MILLIS_PER_HOUR; static final long MILLIS_PER_DAY; final static int SEMI_MONTH; final static int RANGE_WEEK_SUNDAY; final static int RANGE_WEEK_MONDAY; final static int RANGE_WEEK_RELATIVE; final static int RANGE_WEEK_CENTER; final static int RANGE_MONTH_SUNDAY; final static int RANGE_MONTH_MONDAY; final static int MODIFY_TRUNCATE; final static int MODIFY_ROUND; final static int MODIFY_CEILING; }\n", "projects": [{"project": "Lang", "id": 21}]}
{"method": "// Focal method:\npublic class DateUtils { public static int truncatedCompareTo(Calendar cal1, Calendar cal2, int field) { Calendar truncatedCal1 = truncate(cal1, field); Calendar truncatedCal2 = truncate(cal2, field); return truncatedCal1.compareTo(truncatedCal2); } DateUtils(); static boolean isSameDay(Date date1, Date date2); static boolean isSameDay(Calendar cal1, Calendar cal2); static boolean isSameInstant(Date date1, Date date2); static boolean isSameInstant(Calendar cal1, Calendar cal2); static boolean isSameLocalTime(Calendar cal1, Calendar cal2); static Date parseDate(String str, String... parsePatterns); static Date parseDateStrictly(String str, String... parsePatterns); static Date addYears(Date date, int amount); static Date addMonths(Date date, int amount); static Date addWeeks(Date date, int amount); static Date addDays(Date date, int amount); static Date addHours(Date date, int amount); static Date addMinutes(Date date, int amount); static Date addSeconds(Date date, int amount); static Date addMilliseconds(Date date, int amount); static Date setYears(Date date, int amount); static Date setMonths(Date date, int amount); static Date setDays(Date date, int amount); static Date setHours(Date date, int amount); static Date setMinutes(Date date, int amount); static Date setSeconds(Date date, int amount); static Date setMilliseconds(Date date, int amount); static Calendar toCalendar(Date date); static Date round(Date date, int field); static Calendar round(Calendar date, int field); static Date round(Object date, int field); static Date truncate(Date date, int field); static Calendar truncate(Calendar date, int field); static Date truncate(Object date, int field); static Date ceiling(Date date, int field); static Calendar ceiling(Calendar date, int field); static Date ceiling(Object date, int field); static Iterator<Calendar> iterator(Date focus, int rangeStyle); static Iterator<Calendar> iterator(Calendar focus, int rangeStyle); static Iterator<?> iterator(Object focus, int rangeStyle); static long getFragmentInMilliseconds(Date date, int fragment); static long getFragmentInSeconds(Date date, int fragment); static long getFragmentInMinutes(Date date, int fragment); static long getFragmentInHours(Date date, int fragment); static long getFragmentInDays(Date date, int fragment); static long getFragmentInMilliseconds(Calendar calendar, int fragment); static long getFragmentInSeconds(Calendar calendar, int fragment); static long getFragmentInMinutes(Calendar calendar, int fragment); static long getFragmentInHours(Calendar calendar, int fragment); static long getFragmentInDays(Calendar calendar, int fragment); static boolean truncatedEquals(Calendar cal1, Calendar cal2, int field); static boolean truncatedEquals(Date date1, Date date2, int field); static int truncatedCompareTo(Calendar cal1, Calendar cal2, int field); static int truncatedCompareTo(Date date1, Date date2, int field); static final TimeZone UTC_TIME_ZONE; static final long MILLIS_PER_SECOND; static final long MILLIS_PER_MINUTE; static final long MILLIS_PER_HOUR; static final long MILLIS_PER_DAY; final static int SEMI_MONTH; final static int RANGE_WEEK_SUNDAY; final static int RANGE_WEEK_MONDAY; final static int RANGE_WEEK_RELATIVE; final static int RANGE_WEEK_CENTER; final static int RANGE_MONTH_SUNDAY; final static int RANGE_MONTH_MONDAY; final static int MODIFY_TRUNCATE; final static int MODIFY_ROUND; final static int MODIFY_CEILING; }\n", "projects": [{"project": "Lang", "id": 21}]}
{"method": "// Focal method:\npublic class DateUtils { public static int truncatedCompareTo(Date date1, Date date2, int field) { Date truncatedDate1 = truncate(date1, field); Date truncatedDate2 = truncate(date2, field); return truncatedDate1.compareTo(truncatedDate2); } DateUtils(); static boolean isSameDay(Date date1, Date date2); static boolean isSameDay(Calendar cal1, Calendar cal2); static boolean isSameInstant(Date date1, Date date2); static boolean isSameInstant(Calendar cal1, Calendar cal2); static boolean isSameLocalTime(Calendar cal1, Calendar cal2); static Date parseDate(String str, String... parsePatterns); static Date parseDateStrictly(String str, String... parsePatterns); static Date addYears(Date date, int amount); static Date addMonths(Date date, int amount); static Date addWeeks(Date date, int amount); static Date addDays(Date date, int amount); static Date addHours(Date date, int amount); static Date addMinutes(Date date, int amount); static Date addSeconds(Date date, int amount); static Date addMilliseconds(Date date, int amount); static Date setYears(Date date, int amount); static Date setMonths(Date date, int amount); static Date setDays(Date date, int amount); static Date setHours(Date date, int amount); static Date setMinutes(Date date, int amount); static Date setSeconds(Date date, int amount); static Date setMilliseconds(Date date, int amount); static Calendar toCalendar(Date date); static Date round(Date date, int field); static Calendar round(Calendar date, int field); static Date round(Object date, int field); static Date truncate(Date date, int field); static Calendar truncate(Calendar date, int field); static Date truncate(Object date, int field); static Date ceiling(Date date, int field); static Calendar ceiling(Calendar date, int field); static Date ceiling(Object date, int field); static Iterator<Calendar> iterator(Date focus, int rangeStyle); static Iterator<Calendar> iterator(Calendar focus, int rangeStyle); static Iterator<?> iterator(Object focus, int rangeStyle); static long getFragmentInMilliseconds(Date date, int fragment); static long getFragmentInSeconds(Date date, int fragment); static long getFragmentInMinutes(Date date, int fragment); static long getFragmentInHours(Date date, int fragment); static long getFragmentInDays(Date date, int fragment); static long getFragmentInMilliseconds(Calendar calendar, int fragment); static long getFragmentInSeconds(Calendar calendar, int fragment); static long getFragmentInMinutes(Calendar calendar, int fragment); static long getFragmentInHours(Calendar calendar, int fragment); static long getFragmentInDays(Calendar calendar, int fragment); static boolean truncatedEquals(Calendar cal1, Calendar cal2, int field); static boolean truncatedEquals(Date date1, Date date2, int field); static int truncatedCompareTo(Calendar cal1, Calendar cal2, int field); static int truncatedCompareTo(Date date1, Date date2, int field); static final TimeZone UTC_TIME_ZONE; static final long MILLIS_PER_SECOND; static final long MILLIS_PER_MINUTE; static final long MILLIS_PER_HOUR; static final long MILLIS_PER_DAY; final static int SEMI_MONTH; final static int RANGE_WEEK_SUNDAY; final static int RANGE_WEEK_MONDAY; final static int RANGE_WEEK_RELATIVE; final static int RANGE_WEEK_CENTER; final static int RANGE_MONTH_SUNDAY; final static int RANGE_MONTH_MONDAY; final static int MODIFY_TRUNCATE; final static int MODIFY_ROUND; final static int MODIFY_CEILING; }\n", "projects": [{"project": "Lang", "id": 21}]}
{"method": "// Focal method:\npublic class DateUtils { public static Date round(Date date, int field) { if (date == null) { throw new IllegalArgumentException(\"The date must not be null\"); } Calendar gval = Calendar.getInstance(); gval.setTime(date); modify(gval, field, MODIFY_ROUND); return gval.getTime(); } DateUtils(); static boolean isSameDay(Date date1, Date date2); static boolean isSameDay(Calendar cal1, Calendar cal2); static boolean isSameInstant(Date date1, Date date2); static boolean isSameInstant(Calendar cal1, Calendar cal2); static boolean isSameLocalTime(Calendar cal1, Calendar cal2); static Date parseDate(String str, String... parsePatterns); static Date parseDateStrictly(String str, String... parsePatterns); static Date addYears(Date date, int amount); static Date addMonths(Date date, int amount); static Date addWeeks(Date date, int amount); static Date addDays(Date date, int amount); static Date addHours(Date date, int amount); static Date addMinutes(Date date, int amount); static Date addSeconds(Date date, int amount); static Date addMilliseconds(Date date, int amount); static Date setYears(Date date, int amount); static Date setMonths(Date date, int amount); static Date setDays(Date date, int amount); static Date setHours(Date date, int amount); static Date setMinutes(Date date, int amount); static Date setSeconds(Date date, int amount); static Date setMilliseconds(Date date, int amount); static Calendar toCalendar(Date date); static Date round(Date date, int field); static Calendar round(Calendar date, int field); static Date round(Object date, int field); static Date truncate(Date date, int field); static Calendar truncate(Calendar date, int field); static Date truncate(Object date, int field); static Date ceiling(Date date, int field); static Calendar ceiling(Calendar date, int field); static Date ceiling(Object date, int field); static Iterator<Calendar> iterator(Date focus, int rangeStyle); static Iterator<Calendar> iterator(Calendar focus, int rangeStyle); static Iterator<?> iterator(Object focus, int rangeStyle); static long getFragmentInMilliseconds(Date date, int fragment); static long getFragmentInSeconds(Date date, int fragment); static long getFragmentInMinutes(Date date, int fragment); static long getFragmentInHours(Date date, int fragment); static long getFragmentInDays(Date date, int fragment); static long getFragmentInMilliseconds(Calendar calendar, int fragment); static long getFragmentInSeconds(Calendar calendar, int fragment); static long getFragmentInMinutes(Calendar calendar, int fragment); static long getFragmentInHours(Calendar calendar, int fragment); static long getFragmentInDays(Calendar calendar, int fragment); static boolean truncatedEquals(Calendar cal1, Calendar cal2, int field); static boolean truncatedEquals(Date date1, Date date2, int field); static int truncatedCompareTo(Calendar cal1, Calendar cal2, int field); static int truncatedCompareTo(Date date1, Date date2, int field); static final TimeZone UTC_TIME_ZONE; static final long MILLIS_PER_SECOND; static final long MILLIS_PER_MINUTE; static final long MILLIS_PER_HOUR; static final long MILLIS_PER_DAY; final static int SEMI_MONTH; final static int RANGE_WEEK_SUNDAY; final static int RANGE_WEEK_MONDAY; final static int RANGE_WEEK_RELATIVE; final static int RANGE_WEEK_CENTER; final static int RANGE_MONTH_SUNDAY; final static int RANGE_MONTH_MONDAY; final static int MODIFY_TRUNCATE; final static int MODIFY_ROUND; final static int MODIFY_CEILING; }\n", "projects": [{"project": "Lang", "id": 21}]}
{"method": "// Focal method:\npublic class DateUtils { public static Date setHours(Date date, int amount) { return set(date, Calendar.HOUR_OF_DAY, amount); } DateUtils(); static boolean isSameDay(Date date1, Date date2); static boolean isSameDay(Calendar cal1, Calendar cal2); static boolean isSameInstant(Date date1, Date date2); static boolean isSameInstant(Calendar cal1, Calendar cal2); static boolean isSameLocalTime(Calendar cal1, Calendar cal2); static Date parseDate(String str, String... parsePatterns); static Date parseDateStrictly(String str, String... parsePatterns); static Date addYears(Date date, int amount); static Date addMonths(Date date, int amount); static Date addWeeks(Date date, int amount); static Date addDays(Date date, int amount); static Date addHours(Date date, int amount); static Date addMinutes(Date date, int amount); static Date addSeconds(Date date, int amount); static Date addMilliseconds(Date date, int amount); static Date setYears(Date date, int amount); static Date setMonths(Date date, int amount); static Date setDays(Date date, int amount); static Date setHours(Date date, int amount); static Date setMinutes(Date date, int amount); static Date setSeconds(Date date, int amount); static Date setMilliseconds(Date date, int amount); static Calendar toCalendar(Date date); static Date round(Date date, int field); static Calendar round(Calendar date, int field); static Date round(Object date, int field); static Date truncate(Date date, int field); static Calendar truncate(Calendar date, int field); static Date truncate(Object date, int field); static Date ceiling(Date date, int field); static Calendar ceiling(Calendar date, int field); static Date ceiling(Object date, int field); static Iterator<Calendar> iterator(Date focus, int rangeStyle); static Iterator<Calendar> iterator(Calendar focus, int rangeStyle); static Iterator<?> iterator(Object focus, int rangeStyle); static long getFragmentInMilliseconds(Date date, int fragment); static long getFragmentInSeconds(Date date, int fragment); static long getFragmentInMinutes(Date date, int fragment); static long getFragmentInHours(Date date, int fragment); static long getFragmentInDays(Date date, int fragment); static long getFragmentInMilliseconds(Calendar calendar, int fragment); static long getFragmentInSeconds(Calendar calendar, int fragment); static long getFragmentInMinutes(Calendar calendar, int fragment); static long getFragmentInHours(Calendar calendar, int fragment); static long getFragmentInDays(Calendar calendar, int fragment); static boolean truncatedEquals(Calendar cal1, Calendar cal2, int field); static boolean truncatedEquals(Date date1, Date date2, int field); static int truncatedCompareTo(Calendar cal1, Calendar cal2, int field); static int truncatedCompareTo(Date date1, Date date2, int field); static final TimeZone UTC_TIME_ZONE; static final long MILLIS_PER_SECOND; static final long MILLIS_PER_MINUTE; static final long MILLIS_PER_HOUR; static final long MILLIS_PER_DAY; final static int SEMI_MONTH; final static int RANGE_WEEK_SUNDAY; final static int RANGE_WEEK_MONDAY; final static int RANGE_WEEK_RELATIVE; final static int RANGE_WEEK_CENTER; final static int RANGE_MONTH_SUNDAY; final static int RANGE_MONTH_MONDAY; final static int MODIFY_TRUNCATE; final static int MODIFY_ROUND; final static int MODIFY_CEILING; }\n", "projects": [{"project": "Lang", "id": 21}]}
{"method": "// Focal method:\npublic class DateUtils { public static boolean truncatedEquals(Calendar cal1, Calendar cal2, int field) { return truncatedCompareTo(cal1, cal2, field) == 0; } DateUtils(); static boolean isSameDay(Date date1, Date date2); static boolean isSameDay(Calendar cal1, Calendar cal2); static boolean isSameInstant(Date date1, Date date2); static boolean isSameInstant(Calendar cal1, Calendar cal2); static boolean isSameLocalTime(Calendar cal1, Calendar cal2); static Date parseDate(String str, String... parsePatterns); static Date parseDateStrictly(String str, String... parsePatterns); static Date addYears(Date date, int amount); static Date addMonths(Date date, int amount); static Date addWeeks(Date date, int amount); static Date addDays(Date date, int amount); static Date addHours(Date date, int amount); static Date addMinutes(Date date, int amount); static Date addSeconds(Date date, int amount); static Date addMilliseconds(Date date, int amount); static Date setYears(Date date, int amount); static Date setMonths(Date date, int amount); static Date setDays(Date date, int amount); static Date setHours(Date date, int amount); static Date setMinutes(Date date, int amount); static Date setSeconds(Date date, int amount); static Date setMilliseconds(Date date, int amount); static Calendar toCalendar(Date date); static Date round(Date date, int field); static Calendar round(Calendar date, int field); static Date round(Object date, int field); static Date truncate(Date date, int field); static Calendar truncate(Calendar date, int field); static Date truncate(Object date, int field); static Date ceiling(Date date, int field); static Calendar ceiling(Calendar date, int field); static Date ceiling(Object date, int field); static Iterator<Calendar> iterator(Date focus, int rangeStyle); static Iterator<Calendar> iterator(Calendar focus, int rangeStyle); static Iterator<?> iterator(Object focus, int rangeStyle); static long getFragmentInMilliseconds(Date date, int fragment); static long getFragmentInSeconds(Date date, int fragment); static long getFragmentInMinutes(Date date, int fragment); static long getFragmentInHours(Date date, int fragment); static long getFragmentInDays(Date date, int fragment); static long getFragmentInMilliseconds(Calendar calendar, int fragment); static long getFragmentInSeconds(Calendar calendar, int fragment); static long getFragmentInMinutes(Calendar calendar, int fragment); static long getFragmentInHours(Calendar calendar, int fragment); static long getFragmentInDays(Calendar calendar, int fragment); static boolean truncatedEquals(Calendar cal1, Calendar cal2, int field); static boolean truncatedEquals(Date date1, Date date2, int field); static int truncatedCompareTo(Calendar cal1, Calendar cal2, int field); static int truncatedCompareTo(Date date1, Date date2, int field); static final TimeZone UTC_TIME_ZONE; static final long MILLIS_PER_SECOND; static final long MILLIS_PER_MINUTE; static final long MILLIS_PER_HOUR; static final long MILLIS_PER_DAY; final static int SEMI_MONTH; final static int RANGE_WEEK_SUNDAY; final static int RANGE_WEEK_MONDAY; final static int RANGE_WEEK_RELATIVE; final static int RANGE_WEEK_CENTER; final static int RANGE_MONTH_SUNDAY; final static int RANGE_MONTH_MONDAY; final static int MODIFY_TRUNCATE; final static int MODIFY_ROUND; final static int MODIFY_CEILING; }\n", "projects": [{"project": "Lang", "id": 21}]}
{"method": "// Focal method:\npublic class DateUtils { public static Date setMonths(Date date, int amount) { return set(date, Calendar.MONTH, amount); } DateUtils(); static boolean isSameDay(Date date1, Date date2); static boolean isSameDay(Calendar cal1, Calendar cal2); static boolean isSameInstant(Date date1, Date date2); static boolean isSameInstant(Calendar cal1, Calendar cal2); static boolean isSameLocalTime(Calendar cal1, Calendar cal2); static Date parseDate(String str, String... parsePatterns); static Date parseDateStrictly(String str, String... parsePatterns); static Date addYears(Date date, int amount); static Date addMonths(Date date, int amount); static Date addWeeks(Date date, int amount); static Date addDays(Date date, int amount); static Date addHours(Date date, int amount); static Date addMinutes(Date date, int amount); static Date addSeconds(Date date, int amount); static Date addMilliseconds(Date date, int amount); static Date setYears(Date date, int amount); static Date setMonths(Date date, int amount); static Date setDays(Date date, int amount); static Date setHours(Date date, int amount); static Date setMinutes(Date date, int amount); static Date setSeconds(Date date, int amount); static Date setMilliseconds(Date date, int amount); static Calendar toCalendar(Date date); static Date round(Date date, int field); static Calendar round(Calendar date, int field); static Date round(Object date, int field); static Date truncate(Date date, int field); static Calendar truncate(Calendar date, int field); static Date truncate(Object date, int field); static Date ceiling(Date date, int field); static Calendar ceiling(Calendar date, int field); static Date ceiling(Object date, int field); static Iterator<Calendar> iterator(Date focus, int rangeStyle); static Iterator<Calendar> iterator(Calendar focus, int rangeStyle); static Iterator<?> iterator(Object focus, int rangeStyle); static long getFragmentInMilliseconds(Date date, int fragment); static long getFragmentInSeconds(Date date, int fragment); static long getFragmentInMinutes(Date date, int fragment); static long getFragmentInHours(Date date, int fragment); static long getFragmentInDays(Date date, int fragment); static long getFragmentInMilliseconds(Calendar calendar, int fragment); static long getFragmentInSeconds(Calendar calendar, int fragment); static long getFragmentInMinutes(Calendar calendar, int fragment); static long getFragmentInHours(Calendar calendar, int fragment); static long getFragmentInDays(Calendar calendar, int fragment); static boolean truncatedEquals(Calendar cal1, Calendar cal2, int field); static boolean truncatedEquals(Date date1, Date date2, int field); static int truncatedCompareTo(Calendar cal1, Calendar cal2, int field); static int truncatedCompareTo(Date date1, Date date2, int field); static final TimeZone UTC_TIME_ZONE; static final long MILLIS_PER_SECOND; static final long MILLIS_PER_MINUTE; static final long MILLIS_PER_HOUR; static final long MILLIS_PER_DAY; final static int SEMI_MONTH; final static int RANGE_WEEK_SUNDAY; final static int RANGE_WEEK_MONDAY; final static int RANGE_WEEK_RELATIVE; final static int RANGE_WEEK_CENTER; final static int RANGE_MONTH_SUNDAY; final static int RANGE_MONTH_MONDAY; final static int MODIFY_TRUNCATE; final static int MODIFY_ROUND; final static int MODIFY_CEILING; }\n", "projects": [{"project": "Lang", "id": 21}]}
{"method": "// Focal method:\npublic class DateUtils { public static Calendar ceiling(Calendar date, int field) { if (date == null) { throw new IllegalArgumentException(\"The date must not be null\"); } Calendar ceiled = (Calendar) date.clone(); modify(ceiled, field, MODIFY_CEILING); return ceiled; } DateUtils(); static boolean isSameDay(Date date1, Date date2); static boolean isSameDay(Calendar cal1, Calendar cal2); static boolean isSameInstant(Date date1, Date date2); static boolean isSameInstant(Calendar cal1, Calendar cal2); static boolean isSameLocalTime(Calendar cal1, Calendar cal2); static Date parseDate(String str, String... parsePatterns); static Date parseDateStrictly(String str, String... parsePatterns); static Date addYears(Date date, int amount); static Date addMonths(Date date, int amount); static Date addWeeks(Date date, int amount); static Date addDays(Date date, int amount); static Date addHours(Date date, int amount); static Date addMinutes(Date date, int amount); static Date addSeconds(Date date, int amount); static Date addMilliseconds(Date date, int amount); static Date setYears(Date date, int amount); static Date setMonths(Date date, int amount); static Date setDays(Date date, int amount); static Date setHours(Date date, int amount); static Date setMinutes(Date date, int amount); static Date setSeconds(Date date, int amount); static Date setMilliseconds(Date date, int amount); static Calendar toCalendar(Date date); static Date round(Date date, int field); static Calendar round(Calendar date, int field); static Date round(Object date, int field); static Date truncate(Date date, int field); static Calendar truncate(Calendar date, int field); static Date truncate(Object date, int field); static Date ceiling(Date date, int field); static Calendar ceiling(Calendar date, int field); static Date ceiling(Object date, int field); static Iterator<Calendar> iterator(Date focus, int rangeStyle); static Iterator<Calendar> iterator(Calendar focus, int rangeStyle); static Iterator<?> iterator(Object focus, int rangeStyle); static long getFragmentInMilliseconds(Date date, int fragment); static long getFragmentInSeconds(Date date, int fragment); static long getFragmentInMinutes(Date date, int fragment); static long getFragmentInHours(Date date, int fragment); static long getFragmentInDays(Date date, int fragment); static long getFragmentInMilliseconds(Calendar calendar, int fragment); static long getFragmentInSeconds(Calendar calendar, int fragment); static long getFragmentInMinutes(Calendar calendar, int fragment); static long getFragmentInHours(Calendar calendar, int fragment); static long getFragmentInDays(Calendar calendar, int fragment); static boolean truncatedEquals(Calendar cal1, Calendar cal2, int field); static boolean truncatedEquals(Date date1, Date date2, int field); static int truncatedCompareTo(Calendar cal1, Calendar cal2, int field); static int truncatedCompareTo(Date date1, Date date2, int field); static final TimeZone UTC_TIME_ZONE; static final long MILLIS_PER_SECOND; static final long MILLIS_PER_MINUTE; static final long MILLIS_PER_HOUR; static final long MILLIS_PER_DAY; final static int SEMI_MONTH; final static int RANGE_WEEK_SUNDAY; final static int RANGE_WEEK_MONDAY; final static int RANGE_WEEK_RELATIVE; final static int RANGE_WEEK_CENTER; final static int RANGE_MONTH_SUNDAY; final static int RANGE_MONTH_MONDAY; final static int MODIFY_TRUNCATE; final static int MODIFY_ROUND; final static int MODIFY_CEILING; }\n", "projects": [{"project": "Lang", "id": 21}]}
{"method": "// Focal method:\npublic class DateUtils { public static long getFragmentInHours(Date date, int fragment) { return getFragment(date, fragment, Calendar.HOUR_OF_DAY); } DateUtils(); static boolean isSameDay(Date date1, Date date2); static boolean isSameDay(Calendar cal1, Calendar cal2); static boolean isSameInstant(Date date1, Date date2); static boolean isSameInstant(Calendar cal1, Calendar cal2); static boolean isSameLocalTime(Calendar cal1, Calendar cal2); static Date parseDate(String str, String... parsePatterns); static Date parseDateStrictly(String str, String... parsePatterns); static Date addYears(Date date, int amount); static Date addMonths(Date date, int amount); static Date addWeeks(Date date, int amount); static Date addDays(Date date, int amount); static Date addHours(Date date, int amount); static Date addMinutes(Date date, int amount); static Date addSeconds(Date date, int amount); static Date addMilliseconds(Date date, int amount); static Date setYears(Date date, int amount); static Date setMonths(Date date, int amount); static Date setDays(Date date, int amount); static Date setHours(Date date, int amount); static Date setMinutes(Date date, int amount); static Date setSeconds(Date date, int amount); static Date setMilliseconds(Date date, int amount); static Calendar toCalendar(Date date); static Date round(Date date, int field); static Calendar round(Calendar date, int field); static Date round(Object date, int field); static Date truncate(Date date, int field); static Calendar truncate(Calendar date, int field); static Date truncate(Object date, int field); static Date ceiling(Date date, int field); static Calendar ceiling(Calendar date, int field); static Date ceiling(Object date, int field); static Iterator<Calendar> iterator(Date focus, int rangeStyle); static Iterator<Calendar> iterator(Calendar focus, int rangeStyle); static Iterator<?> iterator(Object focus, int rangeStyle); static long getFragmentInMilliseconds(Date date, int fragment); static long getFragmentInSeconds(Date date, int fragment); static long getFragmentInMinutes(Date date, int fragment); static long getFragmentInHours(Date date, int fragment); static long getFragmentInDays(Date date, int fragment); static long getFragmentInMilliseconds(Calendar calendar, int fragment); static long getFragmentInSeconds(Calendar calendar, int fragment); static long getFragmentInMinutes(Calendar calendar, int fragment); static long getFragmentInHours(Calendar calendar, int fragment); static long getFragmentInDays(Calendar calendar, int fragment); static boolean truncatedEquals(Calendar cal1, Calendar cal2, int field); static boolean truncatedEquals(Date date1, Date date2, int field); static int truncatedCompareTo(Calendar cal1, Calendar cal2, int field); static int truncatedCompareTo(Date date1, Date date2, int field); static final TimeZone UTC_TIME_ZONE; static final long MILLIS_PER_SECOND; static final long MILLIS_PER_MINUTE; static final long MILLIS_PER_HOUR; static final long MILLIS_PER_DAY; final static int SEMI_MONTH; final static int RANGE_WEEK_SUNDAY; final static int RANGE_WEEK_MONDAY; final static int RANGE_WEEK_RELATIVE; final static int RANGE_WEEK_CENTER; final static int RANGE_MONTH_SUNDAY; final static int RANGE_MONTH_MONDAY; final static int MODIFY_TRUNCATE; final static int MODIFY_ROUND; final static int MODIFY_CEILING; }\n", "projects": [{"project": "Lang", "id": 21}]}
{"method": "// Focal method:\npublic class DateUtils { public static Calendar truncate(Calendar date, int field) { if (date == null) { throw new IllegalArgumentException(\"The date must not be null\"); } Calendar truncated = (Calendar) date.clone(); modify(truncated, field, MODIFY_TRUNCATE); return truncated; } DateUtils(); static boolean isSameDay(Date date1, Date date2); static boolean isSameDay(Calendar cal1, Calendar cal2); static boolean isSameInstant(Date date1, Date date2); static boolean isSameInstant(Calendar cal1, Calendar cal2); static boolean isSameLocalTime(Calendar cal1, Calendar cal2); static Date parseDate(String str, String... parsePatterns); static Date parseDateStrictly(String str, String... parsePatterns); static Date addYears(Date date, int amount); static Date addMonths(Date date, int amount); static Date addWeeks(Date date, int amount); static Date addDays(Date date, int amount); static Date addHours(Date date, int amount); static Date addMinutes(Date date, int amount); static Date addSeconds(Date date, int amount); static Date addMilliseconds(Date date, int amount); static Date setYears(Date date, int amount); static Date setMonths(Date date, int amount); static Date setDays(Date date, int amount); static Date setHours(Date date, int amount); static Date setMinutes(Date date, int amount); static Date setSeconds(Date date, int amount); static Date setMilliseconds(Date date, int amount); static Calendar toCalendar(Date date); static Date round(Date date, int field); static Calendar round(Calendar date, int field); static Date round(Object date, int field); static Date truncate(Date date, int field); static Calendar truncate(Calendar date, int field); static Date truncate(Object date, int field); static Date ceiling(Date date, int field); static Calendar ceiling(Calendar date, int field); static Date ceiling(Object date, int field); static Iterator<Calendar> iterator(Date focus, int rangeStyle); static Iterator<Calendar> iterator(Calendar focus, int rangeStyle); static Iterator<?> iterator(Object focus, int rangeStyle); static long getFragmentInMilliseconds(Date date, int fragment); static long getFragmentInSeconds(Date date, int fragment); static long getFragmentInMinutes(Date date, int fragment); static long getFragmentInHours(Date date, int fragment); static long getFragmentInDays(Date date, int fragment); static long getFragmentInMilliseconds(Calendar calendar, int fragment); static long getFragmentInSeconds(Calendar calendar, int fragment); static long getFragmentInMinutes(Calendar calendar, int fragment); static long getFragmentInHours(Calendar calendar, int fragment); static long getFragmentInDays(Calendar calendar, int fragment); static boolean truncatedEquals(Calendar cal1, Calendar cal2, int field); static boolean truncatedEquals(Date date1, Date date2, int field); static int truncatedCompareTo(Calendar cal1, Calendar cal2, int field); static int truncatedCompareTo(Date date1, Date date2, int field); static final TimeZone UTC_TIME_ZONE; static final long MILLIS_PER_SECOND; static final long MILLIS_PER_MINUTE; static final long MILLIS_PER_HOUR; static final long MILLIS_PER_DAY; final static int SEMI_MONTH; final static int RANGE_WEEK_SUNDAY; final static int RANGE_WEEK_MONDAY; final static int RANGE_WEEK_RELATIVE; final static int RANGE_WEEK_CENTER; final static int RANGE_MONTH_SUNDAY; final static int RANGE_MONTH_MONDAY; final static int MODIFY_TRUNCATE; final static int MODIFY_ROUND; final static int MODIFY_CEILING; }\n", "projects": [{"project": "Lang", "id": 21}]}
{"method": "// Focal method:\npublic class DateUtils { public static boolean isSameInstant(Date date1, Date date2) { if (date1 == null || date2 == null) { throw new IllegalArgumentException(\"The date must not be null\"); } return date1.getTime() == date2.getTime(); } DateUtils(); static boolean isSameDay(Date date1, Date date2); static boolean isSameDay(Calendar cal1, Calendar cal2); static boolean isSameInstant(Date date1, Date date2); static boolean isSameInstant(Calendar cal1, Calendar cal2); static boolean isSameLocalTime(Calendar cal1, Calendar cal2); static Date parseDate(String str, String... parsePatterns); static Date parseDateStrictly(String str, String... parsePatterns); static Date addYears(Date date, int amount); static Date addMonths(Date date, int amount); static Date addWeeks(Date date, int amount); static Date addDays(Date date, int amount); static Date addHours(Date date, int amount); static Date addMinutes(Date date, int amount); static Date addSeconds(Date date, int amount); static Date addMilliseconds(Date date, int amount); static Date setYears(Date date, int amount); static Date setMonths(Date date, int amount); static Date setDays(Date date, int amount); static Date setHours(Date date, int amount); static Date setMinutes(Date date, int amount); static Date setSeconds(Date date, int amount); static Date setMilliseconds(Date date, int amount); static Calendar toCalendar(Date date); static Date round(Date date, int field); static Calendar round(Calendar date, int field); static Date round(Object date, int field); static Date truncate(Date date, int field); static Calendar truncate(Calendar date, int field); static Date truncate(Object date, int field); static Date ceiling(Date date, int field); static Calendar ceiling(Calendar date, int field); static Date ceiling(Object date, int field); static Iterator<Calendar> iterator(Date focus, int rangeStyle); static Iterator<Calendar> iterator(Calendar focus, int rangeStyle); static Iterator<?> iterator(Object focus, int rangeStyle); static long getFragmentInMilliseconds(Date date, int fragment); static long getFragmentInSeconds(Date date, int fragment); static long getFragmentInMinutes(Date date, int fragment); static long getFragmentInHours(Date date, int fragment); static long getFragmentInDays(Date date, int fragment); static long getFragmentInMilliseconds(Calendar calendar, int fragment); static long getFragmentInSeconds(Calendar calendar, int fragment); static long getFragmentInMinutes(Calendar calendar, int fragment); static long getFragmentInHours(Calendar calendar, int fragment); static long getFragmentInDays(Calendar calendar, int fragment); static boolean truncatedEquals(Calendar cal1, Calendar cal2, int field); static boolean truncatedEquals(Date date1, Date date2, int field); static int truncatedCompareTo(Calendar cal1, Calendar cal2, int field); static int truncatedCompareTo(Date date1, Date date2, int field); static final TimeZone UTC_TIME_ZONE; static final long MILLIS_PER_SECOND; static final long MILLIS_PER_MINUTE; static final long MILLIS_PER_HOUR; static final long MILLIS_PER_DAY; final static int SEMI_MONTH; final static int RANGE_WEEK_SUNDAY; final static int RANGE_WEEK_MONDAY; final static int RANGE_WEEK_RELATIVE; final static int RANGE_WEEK_CENTER; final static int RANGE_MONTH_SUNDAY; final static int RANGE_MONTH_MONDAY; final static int MODIFY_TRUNCATE; final static int MODIFY_ROUND; final static int MODIFY_CEILING; }\n", "projects": [{"project": "Lang", "id": 21}]}
{"method": "// Focal method:\npublic class DateUtils { public static Date truncate(Date date, int field) { if (date == null) { throw new IllegalArgumentException(\"The date must not be null\"); } Calendar gval = Calendar.getInstance(); gval.setTime(date); modify(gval, field, MODIFY_TRUNCATE); return gval.getTime(); } DateUtils(); static boolean isSameDay(Date date1, Date date2); static boolean isSameDay(Calendar cal1, Calendar cal2); static boolean isSameInstant(Date date1, Date date2); static boolean isSameInstant(Calendar cal1, Calendar cal2); static boolean isSameLocalTime(Calendar cal1, Calendar cal2); static Date parseDate(String str, String... parsePatterns); static Date parseDateStrictly(String str, String... parsePatterns); static Date addYears(Date date, int amount); static Date addMonths(Date date, int amount); static Date addWeeks(Date date, int amount); static Date addDays(Date date, int amount); static Date addHours(Date date, int amount); static Date addMinutes(Date date, int amount); static Date addSeconds(Date date, int amount); static Date addMilliseconds(Date date, int amount); static Date setYears(Date date, int amount); static Date setMonths(Date date, int amount); static Date setDays(Date date, int amount); static Date setHours(Date date, int amount); static Date setMinutes(Date date, int amount); static Date setSeconds(Date date, int amount); static Date setMilliseconds(Date date, int amount); static Calendar toCalendar(Date date); static Date round(Date date, int field); static Calendar round(Calendar date, int field); static Date round(Object date, int field); static Date truncate(Date date, int field); static Calendar truncate(Calendar date, int field); static Date truncate(Object date, int field); static Date ceiling(Date date, int field); static Calendar ceiling(Calendar date, int field); static Date ceiling(Object date, int field); static Iterator<Calendar> iterator(Date focus, int rangeStyle); static Iterator<Calendar> iterator(Calendar focus, int rangeStyle); static Iterator<?> iterator(Object focus, int rangeStyle); static long getFragmentInMilliseconds(Date date, int fragment); static long getFragmentInSeconds(Date date, int fragment); static long getFragmentInMinutes(Date date, int fragment); static long getFragmentInHours(Date date, int fragment); static long getFragmentInDays(Date date, int fragment); static long getFragmentInMilliseconds(Calendar calendar, int fragment); static long getFragmentInSeconds(Calendar calendar, int fragment); static long getFragmentInMinutes(Calendar calendar, int fragment); static long getFragmentInHours(Calendar calendar, int fragment); static long getFragmentInDays(Calendar calendar, int fragment); static boolean truncatedEquals(Calendar cal1, Calendar cal2, int field); static boolean truncatedEquals(Date date1, Date date2, int field); static int truncatedCompareTo(Calendar cal1, Calendar cal2, int field); static int truncatedCompareTo(Date date1, Date date2, int field); static final TimeZone UTC_TIME_ZONE; static final long MILLIS_PER_SECOND; static final long MILLIS_PER_MINUTE; static final long MILLIS_PER_HOUR; static final long MILLIS_PER_DAY; final static int SEMI_MONTH; final static int RANGE_WEEK_SUNDAY; final static int RANGE_WEEK_MONDAY; final static int RANGE_WEEK_RELATIVE; final static int RANGE_WEEK_CENTER; final static int RANGE_MONTH_SUNDAY; final static int RANGE_MONTH_MONDAY; final static int MODIFY_TRUNCATE; final static int MODIFY_ROUND; final static int MODIFY_CEILING; }\n", "projects": [{"project": "Lang", "id": 21}]}
{"method": "// Focal method:\npublic class DateUtils { public static boolean isSameLocalTime(Calendar cal1, Calendar cal2) { if (cal1 == null || cal2 == null) { throw new IllegalArgumentException(\"The date must not be null\"); } return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()); } DateUtils(); static boolean isSameDay(Date date1, Date date2); static boolean isSameDay(Calendar cal1, Calendar cal2); static boolean isSameInstant(Date date1, Date date2); static boolean isSameInstant(Calendar cal1, Calendar cal2); static boolean isSameLocalTime(Calendar cal1, Calendar cal2); static Date parseDate(String str, String... parsePatterns); static Date parseDateStrictly(String str, String... parsePatterns); static Date addYears(Date date, int amount); static Date addMonths(Date date, int amount); static Date addWeeks(Date date, int amount); static Date addDays(Date date, int amount); static Date addHours(Date date, int amount); static Date addMinutes(Date date, int amount); static Date addSeconds(Date date, int amount); static Date addMilliseconds(Date date, int amount); static Date setYears(Date date, int amount); static Date setMonths(Date date, int amount); static Date setDays(Date date, int amount); static Date setHours(Date date, int amount); static Date setMinutes(Date date, int amount); static Date setSeconds(Date date, int amount); static Date setMilliseconds(Date date, int amount); static Calendar toCalendar(Date date); static Date round(Date date, int field); static Calendar round(Calendar date, int field); static Date round(Object date, int field); static Date truncate(Date date, int field); static Calendar truncate(Calendar date, int field); static Date truncate(Object date, int field); static Date ceiling(Date date, int field); static Calendar ceiling(Calendar date, int field); static Date ceiling(Object date, int field); static Iterator<Calendar> iterator(Date focus, int rangeStyle); static Iterator<Calendar> iterator(Calendar focus, int rangeStyle); static Iterator<?> iterator(Object focus, int rangeStyle); static long getFragmentInMilliseconds(Date date, int fragment); static long getFragmentInSeconds(Date date, int fragment); static long getFragmentInMinutes(Date date, int fragment); static long getFragmentInHours(Date date, int fragment); static long getFragmentInDays(Date date, int fragment); static long getFragmentInMilliseconds(Calendar calendar, int fragment); static long getFragmentInSeconds(Calendar calendar, int fragment); static long getFragmentInMinutes(Calendar calendar, int fragment); static long getFragmentInHours(Calendar calendar, int fragment); static long getFragmentInDays(Calendar calendar, int fragment); static boolean truncatedEquals(Calendar cal1, Calendar cal2, int field); static boolean truncatedEquals(Date date1, Date date2, int field); static int truncatedCompareTo(Calendar cal1, Calendar cal2, int field); static int truncatedCompareTo(Date date1, Date date2, int field); static final TimeZone UTC_TIME_ZONE; static final long MILLIS_PER_SECOND; static final long MILLIS_PER_MINUTE; static final long MILLIS_PER_HOUR; static final long MILLIS_PER_DAY; final static int SEMI_MONTH; final static int RANGE_WEEK_SUNDAY; final static int RANGE_WEEK_MONDAY; final static int RANGE_WEEK_RELATIVE; final static int RANGE_WEEK_CENTER; final static int RANGE_MONTH_SUNDAY; final static int RANGE_MONTH_MONDAY; final static int MODIFY_TRUNCATE; final static int MODIFY_ROUND; final static int MODIFY_CEILING; }\n", "projects": [{"project": "Lang", "id": 21}]}
{"method": "// Focal method:\npublic class DateUtils { public static boolean isSameDay(Date date1, Date date2) { if (date1 == null || date2 == null) { throw new IllegalArgumentException(\"The date must not be null\"); } Calendar cal1 = Calendar.getInstance(); cal1.setTime(date1); Calendar cal2 = Calendar.getInstance(); cal2.setTime(date2); return isSameDay(cal1, cal2); } DateUtils(); static boolean isSameDay(Date date1, Date date2); static boolean isSameDay(Calendar cal1, Calendar cal2); static boolean isSameInstant(Date date1, Date date2); static boolean isSameInstant(Calendar cal1, Calendar cal2); static boolean isSameLocalTime(Calendar cal1, Calendar cal2); static Date parseDate(String str, String... parsePatterns); static Date parseDateStrictly(String str, String... parsePatterns); static Date addYears(Date date, int amount); static Date addMonths(Date date, int amount); static Date addWeeks(Date date, int amount); static Date addDays(Date date, int amount); static Date addHours(Date date, int amount); static Date addMinutes(Date date, int amount); static Date addSeconds(Date date, int amount); static Date addMilliseconds(Date date, int amount); static Date setYears(Date date, int amount); static Date setMonths(Date date, int amount); static Date setDays(Date date, int amount); static Date setHours(Date date, int amount); static Date setMinutes(Date date, int amount); static Date setSeconds(Date date, int amount); static Date setMilliseconds(Date date, int amount); static Calendar toCalendar(Date date); static Date round(Date date, int field); static Calendar round(Calendar date, int field); static Date round(Object date, int field); static Date truncate(Date date, int field); static Calendar truncate(Calendar date, int field); static Date truncate(Object date, int field); static Date ceiling(Date date, int field); static Calendar ceiling(Calendar date, int field); static Date ceiling(Object date, int field); static Iterator<Calendar> iterator(Date focus, int rangeStyle); static Iterator<Calendar> iterator(Calendar focus, int rangeStyle); static Iterator<?> iterator(Object focus, int rangeStyle); static long getFragmentInMilliseconds(Date date, int fragment); static long getFragmentInSeconds(Date date, int fragment); static long getFragmentInMinutes(Date date, int fragment); static long getFragmentInHours(Date date, int fragment); static long getFragmentInDays(Date date, int fragment); static long getFragmentInMilliseconds(Calendar calendar, int fragment); static long getFragmentInSeconds(Calendar calendar, int fragment); static long getFragmentInMinutes(Calendar calendar, int fragment); static long getFragmentInHours(Calendar calendar, int fragment); static long getFragmentInDays(Calendar calendar, int fragment); static boolean truncatedEquals(Calendar cal1, Calendar cal2, int field); static boolean truncatedEquals(Date date1, Date date2, int field); static int truncatedCompareTo(Calendar cal1, Calendar cal2, int field); static int truncatedCompareTo(Date date1, Date date2, int field); static final TimeZone UTC_TIME_ZONE; static final long MILLIS_PER_SECOND; static final long MILLIS_PER_MINUTE; static final long MILLIS_PER_HOUR; static final long MILLIS_PER_DAY; final static int SEMI_MONTH; final static int RANGE_WEEK_SUNDAY; final static int RANGE_WEEK_MONDAY; final static int RANGE_WEEK_RELATIVE; final static int RANGE_WEEK_CENTER; final static int RANGE_MONTH_SUNDAY; final static int RANGE_MONTH_MONDAY; final static int MODIFY_TRUNCATE; final static int MODIFY_ROUND; final static int MODIFY_CEILING; }\n", "projects": [{"project": "Lang", "id": 21}]}
{"method": "// Focal method:\npublic class DateUtils { public static boolean isSameInstant(Calendar cal1, Calendar cal2) { if (cal1 == null || cal2 == null) { throw new IllegalArgumentException(\"The date must not be null\"); } return cal1.getTime().getTime() == cal2.getTime().getTime(); } DateUtils(); static boolean isSameDay(Date date1, Date date2); static boolean isSameDay(Calendar cal1, Calendar cal2); static boolean isSameInstant(Date date1, Date date2); static boolean isSameInstant(Calendar cal1, Calendar cal2); static boolean isSameLocalTime(Calendar cal1, Calendar cal2); static Date parseDate(String str, String... parsePatterns); static Date parseDateStrictly(String str, String... parsePatterns); static Date addYears(Date date, int amount); static Date addMonths(Date date, int amount); static Date addWeeks(Date date, int amount); static Date addDays(Date date, int amount); static Date addHours(Date date, int amount); static Date addMinutes(Date date, int amount); static Date addSeconds(Date date, int amount); static Date addMilliseconds(Date date, int amount); static Date setYears(Date date, int amount); static Date setMonths(Date date, int amount); static Date setDays(Date date, int amount); static Date setHours(Date date, int amount); static Date setMinutes(Date date, int amount); static Date setSeconds(Date date, int amount); static Date setMilliseconds(Date date, int amount); static Calendar toCalendar(Date date); static Date round(Date date, int field); static Calendar round(Calendar date, int field); static Date round(Object date, int field); static Date truncate(Date date, int field); static Calendar truncate(Calendar date, int field); static Date truncate(Object date, int field); static Date ceiling(Date date, int field); static Calendar ceiling(Calendar date, int field); static Date ceiling(Object date, int field); static Iterator<Calendar> iterator(Date focus, int rangeStyle); static Iterator<Calendar> iterator(Calendar focus, int rangeStyle); static Iterator<?> iterator(Object focus, int rangeStyle); static long getFragmentInMilliseconds(Date date, int fragment); static long getFragmentInSeconds(Date date, int fragment); static long getFragmentInMinutes(Date date, int fragment); static long getFragmentInHours(Date date, int fragment); static long getFragmentInDays(Date date, int fragment); static long getFragmentInMilliseconds(Calendar calendar, int fragment); static long getFragmentInSeconds(Calendar calendar, int fragment); static long getFragmentInMinutes(Calendar calendar, int fragment); static long getFragmentInHours(Calendar calendar, int fragment); static long getFragmentInDays(Calendar calendar, int fragment); static boolean truncatedEquals(Calendar cal1, Calendar cal2, int field); static boolean truncatedEquals(Date date1, Date date2, int field); static int truncatedCompareTo(Calendar cal1, Calendar cal2, int field); static int truncatedCompareTo(Date date1, Date date2, int field); static final TimeZone UTC_TIME_ZONE; static final long MILLIS_PER_SECOND; static final long MILLIS_PER_MINUTE; static final long MILLIS_PER_HOUR; static final long MILLIS_PER_DAY; final static int SEMI_MONTH; final static int RANGE_WEEK_SUNDAY; final static int RANGE_WEEK_MONDAY; final static int RANGE_WEEK_RELATIVE; final static int RANGE_WEEK_CENTER; final static int RANGE_MONTH_SUNDAY; final static int RANGE_MONTH_MONDAY; final static int MODIFY_TRUNCATE; final static int MODIFY_ROUND; final static int MODIFY_CEILING; }\n", "projects": [{"project": "Lang", "id": 21}]}
{"method": "// Focal method:\npublic class DateUtils { public static Date ceiling(Date date, int field) { if (date == null) { throw new IllegalArgumentException(\"The date must not be null\"); } Calendar gval = Calendar.getInstance(); gval.setTime(date); modify(gval, field, MODIFY_CEILING); return gval.getTime(); } DateUtils(); static boolean isSameDay(Date date1, Date date2); static boolean isSameDay(Calendar cal1, Calendar cal2); static boolean isSameInstant(Date date1, Date date2); static boolean isSameInstant(Calendar cal1, Calendar cal2); static boolean isSameLocalTime(Calendar cal1, Calendar cal2); static Date parseDate(String str, String... parsePatterns); static Date parseDateStrictly(String str, String... parsePatterns); static Date addYears(Date date, int amount); static Date addMonths(Date date, int amount); static Date addWeeks(Date date, int amount); static Date addDays(Date date, int amount); static Date addHours(Date date, int amount); static Date addMinutes(Date date, int amount); static Date addSeconds(Date date, int amount); static Date addMilliseconds(Date date, int amount); static Date setYears(Date date, int amount); static Date setMonths(Date date, int amount); static Date setDays(Date date, int amount); static Date setHours(Date date, int amount); static Date setMinutes(Date date, int amount); static Date setSeconds(Date date, int amount); static Date setMilliseconds(Date date, int amount); static Calendar toCalendar(Date date); static Date round(Date date, int field); static Calendar round(Calendar date, int field); static Date round(Object date, int field); static Date truncate(Date date, int field); static Calendar truncate(Calendar date, int field); static Date truncate(Object date, int field); static Date ceiling(Date date, int field); static Calendar ceiling(Calendar date, int field); static Date ceiling(Object date, int field); static Iterator<Calendar> iterator(Date focus, int rangeStyle); static Iterator<Calendar> iterator(Calendar focus, int rangeStyle); static Iterator<?> iterator(Object focus, int rangeStyle); static long getFragmentInMilliseconds(Date date, int fragment); static long getFragmentInSeconds(Date date, int fragment); static long getFragmentInMinutes(Date date, int fragment); static long getFragmentInHours(Date date, int fragment); static long getFragmentInDays(Date date, int fragment); static long getFragmentInMilliseconds(Calendar calendar, int fragment); static long getFragmentInSeconds(Calendar calendar, int fragment); static long getFragmentInMinutes(Calendar calendar, int fragment); static long getFragmentInHours(Calendar calendar, int fragment); static long getFragmentInDays(Calendar calendar, int fragment); static boolean truncatedEquals(Calendar cal1, Calendar cal2, int field); static boolean truncatedEquals(Date date1, Date date2, int field); static int truncatedCompareTo(Calendar cal1, Calendar cal2, int field); static int truncatedCompareTo(Date date1, Date date2, int field); static final TimeZone UTC_TIME_ZONE; static final long MILLIS_PER_SECOND; static final long MILLIS_PER_MINUTE; static final long MILLIS_PER_HOUR; static final long MILLIS_PER_DAY; final static int SEMI_MONTH; final static int RANGE_WEEK_SUNDAY; final static int RANGE_WEEK_MONDAY; final static int RANGE_WEEK_RELATIVE; final static int RANGE_WEEK_CENTER; final static int RANGE_MONTH_SUNDAY; final static int RANGE_MONTH_MONDAY; final static int MODIFY_TRUNCATE; final static int MODIFY_ROUND; final static int MODIFY_CEILING; }\n", "projects": [{"project": "Lang", "id": 21}]}
{"method": "// Focal method:\npublic class DateUtils { public static Date addYears(Date date, int amount) { return add(date, Calendar.YEAR, amount); } DateUtils(); static boolean isSameDay(Date date1, Date date2); static boolean isSameDay(Calendar cal1, Calendar cal2); static boolean isSameInstant(Date date1, Date date2); static boolean isSameInstant(Calendar cal1, Calendar cal2); static boolean isSameLocalTime(Calendar cal1, Calendar cal2); static Date parseDate(String str, String... parsePatterns); static Date parseDateStrictly(String str, String... parsePatterns); static Date addYears(Date date, int amount); static Date addMonths(Date date, int amount); static Date addWeeks(Date date, int amount); static Date addDays(Date date, int amount); static Date addHours(Date date, int amount); static Date addMinutes(Date date, int amount); static Date addSeconds(Date date, int amount); static Date addMilliseconds(Date date, int amount); static Date setYears(Date date, int amount); static Date setMonths(Date date, int amount); static Date setDays(Date date, int amount); static Date setHours(Date date, int amount); static Date setMinutes(Date date, int amount); static Date setSeconds(Date date, int amount); static Date setMilliseconds(Date date, int amount); static Calendar toCalendar(Date date); static Date round(Date date, int field); static Calendar round(Calendar date, int field); static Date round(Object date, int field); static Date truncate(Date date, int field); static Calendar truncate(Calendar date, int field); static Date truncate(Object date, int field); static Date ceiling(Date date, int field); static Calendar ceiling(Calendar date, int field); static Date ceiling(Object date, int field); static Iterator<Calendar> iterator(Date focus, int rangeStyle); static Iterator<Calendar> iterator(Calendar focus, int rangeStyle); static Iterator<?> iterator(Object focus, int rangeStyle); static long getFragmentInMilliseconds(Date date, int fragment); static long getFragmentInSeconds(Date date, int fragment); static long getFragmentInMinutes(Date date, int fragment); static long getFragmentInHours(Date date, int fragment); static long getFragmentInDays(Date date, int fragment); static long getFragmentInMilliseconds(Calendar calendar, int fragment); static long getFragmentInSeconds(Calendar calendar, int fragment); static long getFragmentInMinutes(Calendar calendar, int fragment); static long getFragmentInHours(Calendar calendar, int fragment); static long getFragmentInDays(Calendar calendar, int fragment); static boolean truncatedEquals(Calendar cal1, Calendar cal2, int field); static boolean truncatedEquals(Date date1, Date date2, int field); static int truncatedCompareTo(Calendar cal1, Calendar cal2, int field); static int truncatedCompareTo(Date date1, Date date2, int field); static final TimeZone UTC_TIME_ZONE; static final long MILLIS_PER_SECOND; static final long MILLIS_PER_MINUTE; static final long MILLIS_PER_HOUR; static final long MILLIS_PER_DAY; final static int SEMI_MONTH; final static int RANGE_WEEK_SUNDAY; final static int RANGE_WEEK_MONDAY; final static int RANGE_WEEK_RELATIVE; final static int RANGE_WEEK_CENTER; final static int RANGE_MONTH_SUNDAY; final static int RANGE_MONTH_MONDAY; final static int MODIFY_TRUNCATE; final static int MODIFY_ROUND; final static int MODIFY_CEILING; }\n", "projects": [{"project": "Lang", "id": 21}]}
{"method": "// Focal method:\npublic class DateUtils { public static Date setSeconds(Date date, int amount) { return set(date, Calendar.SECOND, amount); } DateUtils(); static boolean isSameDay(Date date1, Date date2); static boolean isSameDay(Calendar cal1, Calendar cal2); static boolean isSameInstant(Date date1, Date date2); static boolean isSameInstant(Calendar cal1, Calendar cal2); static boolean isSameLocalTime(Calendar cal1, Calendar cal2); static Date parseDate(String str, String... parsePatterns); static Date parseDateStrictly(String str, String... parsePatterns); static Date addYears(Date date, int amount); static Date addMonths(Date date, int amount); static Date addWeeks(Date date, int amount); static Date addDays(Date date, int amount); static Date addHours(Date date, int amount); static Date addMinutes(Date date, int amount); static Date addSeconds(Date date, int amount); static Date addMilliseconds(Date date, int amount); static Date setYears(Date date, int amount); static Date setMonths(Date date, int amount); static Date setDays(Date date, int amount); static Date setHours(Date date, int amount); static Date setMinutes(Date date, int amount); static Date setSeconds(Date date, int amount); static Date setMilliseconds(Date date, int amount); static Calendar toCalendar(Date date); static Date round(Date date, int field); static Calendar round(Calendar date, int field); static Date round(Object date, int field); static Date truncate(Date date, int field); static Calendar truncate(Calendar date, int field); static Date truncate(Object date, int field); static Date ceiling(Date date, int field); static Calendar ceiling(Calendar date, int field); static Date ceiling(Object date, int field); static Iterator<Calendar> iterator(Date focus, int rangeStyle); static Iterator<Calendar> iterator(Calendar focus, int rangeStyle); static Iterator<?> iterator(Object focus, int rangeStyle); static long getFragmentInMilliseconds(Date date, int fragment); static long getFragmentInSeconds(Date date, int fragment); static long getFragmentInMinutes(Date date, int fragment); static long getFragmentInHours(Date date, int fragment); static long getFragmentInDays(Date date, int fragment); static long getFragmentInMilliseconds(Calendar calendar, int fragment); static long getFragmentInSeconds(Calendar calendar, int fragment); static long getFragmentInMinutes(Calendar calendar, int fragment); static long getFragmentInHours(Calendar calendar, int fragment); static long getFragmentInDays(Calendar calendar, int fragment); static boolean truncatedEquals(Calendar cal1, Calendar cal2, int field); static boolean truncatedEquals(Date date1, Date date2, int field); static int truncatedCompareTo(Calendar cal1, Calendar cal2, int field); static int truncatedCompareTo(Date date1, Date date2, int field); static final TimeZone UTC_TIME_ZONE; static final long MILLIS_PER_SECOND; static final long MILLIS_PER_MINUTE; static final long MILLIS_PER_HOUR; static final long MILLIS_PER_DAY; final static int SEMI_MONTH; final static int RANGE_WEEK_SUNDAY; final static int RANGE_WEEK_MONDAY; final static int RANGE_WEEK_RELATIVE; final static int RANGE_WEEK_CENTER; final static int RANGE_MONTH_SUNDAY; final static int RANGE_MONTH_MONDAY; final static int MODIFY_TRUNCATE; final static int MODIFY_ROUND; final static int MODIFY_CEILING; }\n", "projects": [{"project": "Lang", "id": 21}]}
{"method": "// Focal method:\npublic class DateUtils { public static Date addSeconds(Date date, int amount) { return add(date, Calendar.SECOND, amount); } DateUtils(); static boolean isSameDay(Date date1, Date date2); static boolean isSameDay(Calendar cal1, Calendar cal2); static boolean isSameInstant(Date date1, Date date2); static boolean isSameInstant(Calendar cal1, Calendar cal2); static boolean isSameLocalTime(Calendar cal1, Calendar cal2); static Date parseDate(String str, String... parsePatterns); static Date parseDateStrictly(String str, String... parsePatterns); static Date addYears(Date date, int amount); static Date addMonths(Date date, int amount); static Date addWeeks(Date date, int amount); static Date addDays(Date date, int amount); static Date addHours(Date date, int amount); static Date addMinutes(Date date, int amount); static Date addSeconds(Date date, int amount); static Date addMilliseconds(Date date, int amount); static Date setYears(Date date, int amount); static Date setMonths(Date date, int amount); static Date setDays(Date date, int amount); static Date setHours(Date date, int amount); static Date setMinutes(Date date, int amount); static Date setSeconds(Date date, int amount); static Date setMilliseconds(Date date, int amount); static Calendar toCalendar(Date date); static Date round(Date date, int field); static Calendar round(Calendar date, int field); static Date round(Object date, int field); static Date truncate(Date date, int field); static Calendar truncate(Calendar date, int field); static Date truncate(Object date, int field); static Date ceiling(Date date, int field); static Calendar ceiling(Calendar date, int field); static Date ceiling(Object date, int field); static Iterator<Calendar> iterator(Date focus, int rangeStyle); static Iterator<Calendar> iterator(Calendar focus, int rangeStyle); static Iterator<?> iterator(Object focus, int rangeStyle); static long getFragmentInMilliseconds(Date date, int fragment); static long getFragmentInSeconds(Date date, int fragment); static long getFragmentInMinutes(Date date, int fragment); static long getFragmentInHours(Date date, int fragment); static long getFragmentInDays(Date date, int fragment); static long getFragmentInMilliseconds(Calendar calendar, int fragment); static long getFragmentInSeconds(Calendar calendar, int fragment); static long getFragmentInMinutes(Calendar calendar, int fragment); static long getFragmentInHours(Calendar calendar, int fragment); static long getFragmentInDays(Calendar calendar, int fragment); static boolean truncatedEquals(Calendar cal1, Calendar cal2, int field); static boolean truncatedEquals(Date date1, Date date2, int field); static int truncatedCompareTo(Calendar cal1, Calendar cal2, int field); static int truncatedCompareTo(Date date1, Date date2, int field); static final TimeZone UTC_TIME_ZONE; static final long MILLIS_PER_SECOND; static final long MILLIS_PER_MINUTE; static final long MILLIS_PER_HOUR; static final long MILLIS_PER_DAY; final static int SEMI_MONTH; final static int RANGE_WEEK_SUNDAY; final static int RANGE_WEEK_MONDAY; final static int RANGE_WEEK_RELATIVE; final static int RANGE_WEEK_CENTER; final static int RANGE_MONTH_SUNDAY; final static int RANGE_MONTH_MONDAY; final static int MODIFY_TRUNCATE; final static int MODIFY_ROUND; final static int MODIFY_CEILING; }\n", "projects": [{"project": "Lang", "id": 21}]}
{"method": "// Focal method:\npublic class DateUtils { public static Calendar round(Calendar date, int field) { if (date == null) { throw new IllegalArgumentException(\"The date must not be null\"); } Calendar rounded = (Calendar) date.clone(); modify(rounded, field, MODIFY_ROUND); return rounded; } DateUtils(); static boolean isSameDay(Date date1, Date date2); static boolean isSameDay(Calendar cal1, Calendar cal2); static boolean isSameInstant(Date date1, Date date2); static boolean isSameInstant(Calendar cal1, Calendar cal2); static boolean isSameLocalTime(Calendar cal1, Calendar cal2); static Date parseDate(String str, String... parsePatterns); static Date parseDateStrictly(String str, String... parsePatterns); static Date addYears(Date date, int amount); static Date addMonths(Date date, int amount); static Date addWeeks(Date date, int amount); static Date addDays(Date date, int amount); static Date addHours(Date date, int amount); static Date addMinutes(Date date, int amount); static Date addSeconds(Date date, int amount); static Date addMilliseconds(Date date, int amount); static Date setYears(Date date, int amount); static Date setMonths(Date date, int amount); static Date setDays(Date date, int amount); static Date setHours(Date date, int amount); static Date setMinutes(Date date, int amount); static Date setSeconds(Date date, int amount); static Date setMilliseconds(Date date, int amount); static Calendar toCalendar(Date date); static Date round(Date date, int field); static Calendar round(Calendar date, int field); static Date round(Object date, int field); static Date truncate(Date date, int field); static Calendar truncate(Calendar date, int field); static Date truncate(Object date, int field); static Date ceiling(Date date, int field); static Calendar ceiling(Calendar date, int field); static Date ceiling(Object date, int field); static Iterator<Calendar> iterator(Date focus, int rangeStyle); static Iterator<Calendar> iterator(Calendar focus, int rangeStyle); static Iterator<?> iterator(Object focus, int rangeStyle); static long getFragmentInMilliseconds(Date date, int fragment); static long getFragmentInSeconds(Date date, int fragment); static long getFragmentInMinutes(Date date, int fragment); static long getFragmentInHours(Date date, int fragment); static long getFragmentInDays(Date date, int fragment); static long getFragmentInMilliseconds(Calendar calendar, int fragment); static long getFragmentInSeconds(Calendar calendar, int fragment); static long getFragmentInMinutes(Calendar calendar, int fragment); static long getFragmentInHours(Calendar calendar, int fragment); static long getFragmentInDays(Calendar calendar, int fragment); static boolean truncatedEquals(Calendar cal1, Calendar cal2, int field); static boolean truncatedEquals(Date date1, Date date2, int field); static int truncatedCompareTo(Calendar cal1, Calendar cal2, int field); static int truncatedCompareTo(Date date1, Date date2, int field); static final TimeZone UTC_TIME_ZONE; static final long MILLIS_PER_SECOND; static final long MILLIS_PER_MINUTE; static final long MILLIS_PER_HOUR; static final long MILLIS_PER_DAY; final static int SEMI_MONTH; final static int RANGE_WEEK_SUNDAY; final static int RANGE_WEEK_MONDAY; final static int RANGE_WEEK_RELATIVE; final static int RANGE_WEEK_CENTER; final static int RANGE_MONTH_SUNDAY; final static int RANGE_MONTH_MONDAY; final static int MODIFY_TRUNCATE; final static int MODIFY_ROUND; final static int MODIFY_CEILING; }\n", "projects": [{"project": "Lang", "id": 21}]}
{"method": "// Focal method:\npublic class DateUtils { public static Calendar toCalendar(Date date) { Calendar c = Calendar.getInstance(); c.setTime(date); return c; } DateUtils(); static boolean isSameDay(Date date1, Date date2); static boolean isSameDay(Calendar cal1, Calendar cal2); static boolean isSameInstant(Date date1, Date date2); static boolean isSameInstant(Calendar cal1, Calendar cal2); static boolean isSameLocalTime(Calendar cal1, Calendar cal2); static Date parseDate(String str, String... parsePatterns); static Date parseDateStrictly(String str, String... parsePatterns); static Date addYears(Date date, int amount); static Date addMonths(Date date, int amount); static Date addWeeks(Date date, int amount); static Date addDays(Date date, int amount); static Date addHours(Date date, int amount); static Date addMinutes(Date date, int amount); static Date addSeconds(Date date, int amount); static Date addMilliseconds(Date date, int amount); static Date setYears(Date date, int amount); static Date setMonths(Date date, int amount); static Date setDays(Date date, int amount); static Date setHours(Date date, int amount); static Date setMinutes(Date date, int amount); static Date setSeconds(Date date, int amount); static Date setMilliseconds(Date date, int amount); static Calendar toCalendar(Date date); static Date round(Date date, int field); static Calendar round(Calendar date, int field); static Date round(Object date, int field); static Date truncate(Date date, int field); static Calendar truncate(Calendar date, int field); static Date truncate(Object date, int field); static Date ceiling(Date date, int field); static Calendar ceiling(Calendar date, int field); static Date ceiling(Object date, int field); static Iterator<Calendar> iterator(Date focus, int rangeStyle); static Iterator<Calendar> iterator(Calendar focus, int rangeStyle); static Iterator<?> iterator(Object focus, int rangeStyle); static long getFragmentInMilliseconds(Date date, int fragment); static long getFragmentInSeconds(Date date, int fragment); static long getFragmentInMinutes(Date date, int fragment); static long getFragmentInHours(Date date, int fragment); static long getFragmentInDays(Date date, int fragment); static long getFragmentInMilliseconds(Calendar calendar, int fragment); static long getFragmentInSeconds(Calendar calendar, int fragment); static long getFragmentInMinutes(Calendar calendar, int fragment); static long getFragmentInHours(Calendar calendar, int fragment); static long getFragmentInDays(Calendar calendar, int fragment); static boolean truncatedEquals(Calendar cal1, Calendar cal2, int field); static boolean truncatedEquals(Date date1, Date date2, int field); static int truncatedCompareTo(Calendar cal1, Calendar cal2, int field); static int truncatedCompareTo(Date date1, Date date2, int field); static final TimeZone UTC_TIME_ZONE; static final long MILLIS_PER_SECOND; static final long MILLIS_PER_MINUTE; static final long MILLIS_PER_HOUR; static final long MILLIS_PER_DAY; final static int SEMI_MONTH; final static int RANGE_WEEK_SUNDAY; final static int RANGE_WEEK_MONDAY; final static int RANGE_WEEK_RELATIVE; final static int RANGE_WEEK_CENTER; final static int RANGE_MONTH_SUNDAY; final static int RANGE_MONTH_MONDAY; final static int MODIFY_TRUNCATE; final static int MODIFY_ROUND; final static int MODIFY_CEILING; }\n", "projects": [{"project": "Lang", "id": 21}]}
{"method": "// Focal method:\npublic class DateUtils { public static Date ceiling(Object date, int field) { if (date == null) { throw new IllegalArgumentException(\"The date must not be null\"); } if (date instanceof Date) { return ceiling((Date) date, field); } else if (date instanceof Calendar) { return ceiling((Calendar) date, field).getTime(); } else { throw new ClassCastException(\"Could not find ceiling of for type: \" + date.getClass()); } } DateUtils(); static boolean isSameDay(Date date1, Date date2); static boolean isSameDay(Calendar cal1, Calendar cal2); static boolean isSameInstant(Date date1, Date date2); static boolean isSameInstant(Calendar cal1, Calendar cal2); static boolean isSameLocalTime(Calendar cal1, Calendar cal2); static Date parseDate(String str, String... parsePatterns); static Date parseDateStrictly(String str, String... parsePatterns); static Date addYears(Date date, int amount); static Date addMonths(Date date, int amount); static Date addWeeks(Date date, int amount); static Date addDays(Date date, int amount); static Date addHours(Date date, int amount); static Date addMinutes(Date date, int amount); static Date addSeconds(Date date, int amount); static Date addMilliseconds(Date date, int amount); static Date setYears(Date date, int amount); static Date setMonths(Date date, int amount); static Date setDays(Date date, int amount); static Date setHours(Date date, int amount); static Date setMinutes(Date date, int amount); static Date setSeconds(Date date, int amount); static Date setMilliseconds(Date date, int amount); static Calendar toCalendar(Date date); static Date round(Date date, int field); static Calendar round(Calendar date, int field); static Date round(Object date, int field); static Date truncate(Date date, int field); static Calendar truncate(Calendar date, int field); static Date truncate(Object date, int field); static Date ceiling(Date date, int field); static Calendar ceiling(Calendar date, int field); static Date ceiling(Object date, int field); static Iterator<Calendar> iterator(Date focus, int rangeStyle); static Iterator<Calendar> iterator(Calendar focus, int rangeStyle); static Iterator<?> iterator(Object focus, int rangeStyle); static long getFragmentInMilliseconds(Date date, int fragment); static long getFragmentInSeconds(Date date, int fragment); static long getFragmentInMinutes(Date date, int fragment); static long getFragmentInHours(Date date, int fragment); static long getFragmentInDays(Date date, int fragment); static long getFragmentInMilliseconds(Calendar calendar, int fragment); static long getFragmentInSeconds(Calendar calendar, int fragment); static long getFragmentInMinutes(Calendar calendar, int fragment); static long getFragmentInHours(Calendar calendar, int fragment); static long getFragmentInDays(Calendar calendar, int fragment); static boolean truncatedEquals(Calendar cal1, Calendar cal2, int field); static boolean truncatedEquals(Date date1, Date date2, int field); static int truncatedCompareTo(Calendar cal1, Calendar cal2, int field); static int truncatedCompareTo(Date date1, Date date2, int field); static final TimeZone UTC_TIME_ZONE; static final long MILLIS_PER_SECOND; static final long MILLIS_PER_MINUTE; static final long MILLIS_PER_HOUR; static final long MILLIS_PER_DAY; final static int SEMI_MONTH; final static int RANGE_WEEK_SUNDAY; final static int RANGE_WEEK_MONDAY; final static int RANGE_WEEK_RELATIVE; final static int RANGE_WEEK_CENTER; final static int RANGE_MONTH_SUNDAY; final static int RANGE_MONTH_MONDAY; final static int MODIFY_TRUNCATE; final static int MODIFY_ROUND; final static int MODIFY_CEILING; }\n", "projects": [{"project": "Lang", "id": 21}]}
{"method": "// Focal method:\npublic class DateUtils { public static Date round(Object date, int field) { if (date == null) { throw new IllegalArgumentException(\"The date must not be null\"); } if (date instanceof Date) { return round((Date) date, field); } else if (date instanceof Calendar) { return round((Calendar) date, field).getTime(); } else { throw new ClassCastException(\"Could not round \" + date); } } DateUtils(); static boolean isSameDay(Date date1, Date date2); static boolean isSameDay(Calendar cal1, Calendar cal2); static boolean isSameInstant(Date date1, Date date2); static boolean isSameInstant(Calendar cal1, Calendar cal2); static boolean isSameLocalTime(Calendar cal1, Calendar cal2); static Date parseDate(String str, String... parsePatterns); static Date parseDateStrictly(String str, String... parsePatterns); static Date addYears(Date date, int amount); static Date addMonths(Date date, int amount); static Date addWeeks(Date date, int amount); static Date addDays(Date date, int amount); static Date addHours(Date date, int amount); static Date addMinutes(Date date, int amount); static Date addSeconds(Date date, int amount); static Date addMilliseconds(Date date, int amount); static Date setYears(Date date, int amount); static Date setMonths(Date date, int amount); static Date setDays(Date date, int amount); static Date setHours(Date date, int amount); static Date setMinutes(Date date, int amount); static Date setSeconds(Date date, int amount); static Date setMilliseconds(Date date, int amount); static Calendar toCalendar(Date date); static Date round(Date date, int field); static Calendar round(Calendar date, int field); static Date round(Object date, int field); static Date truncate(Date date, int field); static Calendar truncate(Calendar date, int field); static Date truncate(Object date, int field); static Date ceiling(Date date, int field); static Calendar ceiling(Calendar date, int field); static Date ceiling(Object date, int field); static Iterator<Calendar> iterator(Date focus, int rangeStyle); static Iterator<Calendar> iterator(Calendar focus, int rangeStyle); static Iterator<?> iterator(Object focus, int rangeStyle); static long getFragmentInMilliseconds(Date date, int fragment); static long getFragmentInSeconds(Date date, int fragment); static long getFragmentInMinutes(Date date, int fragment); static long getFragmentInHours(Date date, int fragment); static long getFragmentInDays(Date date, int fragment); static long getFragmentInMilliseconds(Calendar calendar, int fragment); static long getFragmentInSeconds(Calendar calendar, int fragment); static long getFragmentInMinutes(Calendar calendar, int fragment); static long getFragmentInHours(Calendar calendar, int fragment); static long getFragmentInDays(Calendar calendar, int fragment); static boolean truncatedEquals(Calendar cal1, Calendar cal2, int field); static boolean truncatedEquals(Date date1, Date date2, int field); static int truncatedCompareTo(Calendar cal1, Calendar cal2, int field); static int truncatedCompareTo(Date date1, Date date2, int field); static final TimeZone UTC_TIME_ZONE; static final long MILLIS_PER_SECOND; static final long MILLIS_PER_MINUTE; static final long MILLIS_PER_HOUR; static final long MILLIS_PER_DAY; final static int SEMI_MONTH; final static int RANGE_WEEK_SUNDAY; final static int RANGE_WEEK_MONDAY; final static int RANGE_WEEK_RELATIVE; final static int RANGE_WEEK_CENTER; final static int RANGE_MONTH_SUNDAY; final static int RANGE_MONTH_MONDAY; final static int MODIFY_TRUNCATE; final static int MODIFY_ROUND; final static int MODIFY_CEILING; }\n", "projects": [{"project": "Lang", "id": 21}]}
{"method": "// Focal method:\npublic class DateUtils { public static Iterator<?> iterator(Object focus, int rangeStyle) { if (focus == null) { throw new IllegalArgumentException(\"The date must not be null\"); } if (focus instanceof Date) { return iterator((Date) focus, rangeStyle); } else if (focus instanceof Calendar) { return iterator((Calendar) focus, rangeStyle); } else { throw new ClassCastException(\"Could not iterate based on \" + focus); } } DateUtils(); static boolean isSameDay(Date date1, Date date2); static boolean isSameDay(Calendar cal1, Calendar cal2); static boolean isSameInstant(Date date1, Date date2); static boolean isSameInstant(Calendar cal1, Calendar cal2); static boolean isSameLocalTime(Calendar cal1, Calendar cal2); static Date parseDate(String str, String... parsePatterns); static Date parseDateStrictly(String str, String... parsePatterns); static Date addYears(Date date, int amount); static Date addMonths(Date date, int amount); static Date addWeeks(Date date, int amount); static Date addDays(Date date, int amount); static Date addHours(Date date, int amount); static Date addMinutes(Date date, int amount); static Date addSeconds(Date date, int amount); static Date addMilliseconds(Date date, int amount); static Date setYears(Date date, int amount); static Date setMonths(Date date, int amount); static Date setDays(Date date, int amount); static Date setHours(Date date, int amount); static Date setMinutes(Date date, int amount); static Date setSeconds(Date date, int amount); static Date setMilliseconds(Date date, int amount); static Calendar toCalendar(Date date); static Date round(Date date, int field); static Calendar round(Calendar date, int field); static Date round(Object date, int field); static Date truncate(Date date, int field); static Calendar truncate(Calendar date, int field); static Date truncate(Object date, int field); static Date ceiling(Date date, int field); static Calendar ceiling(Calendar date, int field); static Date ceiling(Object date, int field); static Iterator<Calendar> iterator(Date focus, int rangeStyle); static Iterator<Calendar> iterator(Calendar focus, int rangeStyle); static Iterator<?> iterator(Object focus, int rangeStyle); static long getFragmentInMilliseconds(Date date, int fragment); static long getFragmentInSeconds(Date date, int fragment); static long getFragmentInMinutes(Date date, int fragment); static long getFragmentInHours(Date date, int fragment); static long getFragmentInDays(Date date, int fragment); static long getFragmentInMilliseconds(Calendar calendar, int fragment); static long getFragmentInSeconds(Calendar calendar, int fragment); static long getFragmentInMinutes(Calendar calendar, int fragment); static long getFragmentInHours(Calendar calendar, int fragment); static long getFragmentInDays(Calendar calendar, int fragment); static boolean truncatedEquals(Calendar cal1, Calendar cal2, int field); static boolean truncatedEquals(Date date1, Date date2, int field); static int truncatedCompareTo(Calendar cal1, Calendar cal2, int field); static int truncatedCompareTo(Date date1, Date date2, int field); static final TimeZone UTC_TIME_ZONE; static final long MILLIS_PER_SECOND; static final long MILLIS_PER_MINUTE; static final long MILLIS_PER_HOUR; static final long MILLIS_PER_DAY; final static int SEMI_MONTH; final static int RANGE_WEEK_SUNDAY; final static int RANGE_WEEK_MONDAY; final static int RANGE_WEEK_RELATIVE; final static int RANGE_WEEK_CENTER; final static int RANGE_MONTH_SUNDAY; final static int RANGE_MONTH_MONDAY; final static int MODIFY_TRUNCATE; final static int MODIFY_ROUND; final static int MODIFY_CEILING; }\n", "projects": [{"project": "Lang", "id": 21}]}
{"method": "// Focal method:\npublic class DateUtils { public static Date setYears(Date date, int amount) { return set(date, Calendar.YEAR, amount); } DateUtils(); static boolean isSameDay(Date date1, Date date2); static boolean isSameDay(Calendar cal1, Calendar cal2); static boolean isSameInstant(Date date1, Date date2); static boolean isSameInstant(Calendar cal1, Calendar cal2); static boolean isSameLocalTime(Calendar cal1, Calendar cal2); static Date parseDate(String str, String... parsePatterns); static Date parseDateStrictly(String str, String... parsePatterns); static Date addYears(Date date, int amount); static Date addMonths(Date date, int amount); static Date addWeeks(Date date, int amount); static Date addDays(Date date, int amount); static Date addHours(Date date, int amount); static Date addMinutes(Date date, int amount); static Date addSeconds(Date date, int amount); static Date addMilliseconds(Date date, int amount); static Date setYears(Date date, int amount); static Date setMonths(Date date, int amount); static Date setDays(Date date, int amount); static Date setHours(Date date, int amount); static Date setMinutes(Date date, int amount); static Date setSeconds(Date date, int amount); static Date setMilliseconds(Date date, int amount); static Calendar toCalendar(Date date); static Date round(Date date, int field); static Calendar round(Calendar date, int field); static Date round(Object date, int field); static Date truncate(Date date, int field); static Calendar truncate(Calendar date, int field); static Date truncate(Object date, int field); static Date ceiling(Date date, int field); static Calendar ceiling(Calendar date, int field); static Date ceiling(Object date, int field); static Iterator<Calendar> iterator(Date focus, int rangeStyle); static Iterator<Calendar> iterator(Calendar focus, int rangeStyle); static Iterator<?> iterator(Object focus, int rangeStyle); static long getFragmentInMilliseconds(Date date, int fragment); static long getFragmentInSeconds(Date date, int fragment); static long getFragmentInMinutes(Date date, int fragment); static long getFragmentInHours(Date date, int fragment); static long getFragmentInDays(Date date, int fragment); static long getFragmentInMilliseconds(Calendar calendar, int fragment); static long getFragmentInSeconds(Calendar calendar, int fragment); static long getFragmentInMinutes(Calendar calendar, int fragment); static long getFragmentInHours(Calendar calendar, int fragment); static long getFragmentInDays(Calendar calendar, int fragment); static boolean truncatedEquals(Calendar cal1, Calendar cal2, int field); static boolean truncatedEquals(Date date1, Date date2, int field); static int truncatedCompareTo(Calendar cal1, Calendar cal2, int field); static int truncatedCompareTo(Date date1, Date date2, int field); static final TimeZone UTC_TIME_ZONE; static final long MILLIS_PER_SECOND; static final long MILLIS_PER_MINUTE; static final long MILLIS_PER_HOUR; static final long MILLIS_PER_DAY; final static int SEMI_MONTH; final static int RANGE_WEEK_SUNDAY; final static int RANGE_WEEK_MONDAY; final static int RANGE_WEEK_RELATIVE; final static int RANGE_WEEK_CENTER; final static int RANGE_MONTH_SUNDAY; final static int RANGE_MONTH_MONDAY; final static int MODIFY_TRUNCATE; final static int MODIFY_ROUND; final static int MODIFY_CEILING; }\n", "projects": [{"project": "Lang", "id": 21}]}
{"method": "// Focal method:\npublic class DateUtils { public static boolean isSameDay(Calendar cal1, Calendar cal2) { if (cal1 == null || cal2 == null) { throw new IllegalArgumentException(\"The date must not be null\"); } return (cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR)); } DateUtils(); static boolean isSameDay(Date date1, Date date2); static boolean isSameDay(Calendar cal1, Calendar cal2); static boolean isSameInstant(Date date1, Date date2); static boolean isSameInstant(Calendar cal1, Calendar cal2); static boolean isSameLocalTime(Calendar cal1, Calendar cal2); static Date parseDate(String str, String... parsePatterns); static Date parseDateStrictly(String str, String... parsePatterns); static Date addYears(Date date, int amount); static Date addMonths(Date date, int amount); static Date addWeeks(Date date, int amount); static Date addDays(Date date, int amount); static Date addHours(Date date, int amount); static Date addMinutes(Date date, int amount); static Date addSeconds(Date date, int amount); static Date addMilliseconds(Date date, int amount); static Date setYears(Date date, int amount); static Date setMonths(Date date, int amount); static Date setDays(Date date, int amount); static Date setHours(Date date, int amount); static Date setMinutes(Date date, int amount); static Date setSeconds(Date date, int amount); static Date setMilliseconds(Date date, int amount); static Calendar toCalendar(Date date); static Date round(Date date, int field); static Calendar round(Calendar date, int field); static Date round(Object date, int field); static Date truncate(Date date, int field); static Calendar truncate(Calendar date, int field); static Date truncate(Object date, int field); static Date ceiling(Date date, int field); static Calendar ceiling(Calendar date, int field); static Date ceiling(Object date, int field); static Iterator<Calendar> iterator(Date focus, int rangeStyle); static Iterator<Calendar> iterator(Calendar focus, int rangeStyle); static Iterator<?> iterator(Object focus, int rangeStyle); static long getFragmentInMilliseconds(Date date, int fragment); static long getFragmentInSeconds(Date date, int fragment); static long getFragmentInMinutes(Date date, int fragment); static long getFragmentInHours(Date date, int fragment); static long getFragmentInDays(Date date, int fragment); static long getFragmentInMilliseconds(Calendar calendar, int fragment); static long getFragmentInSeconds(Calendar calendar, int fragment); static long getFragmentInMinutes(Calendar calendar, int fragment); static long getFragmentInHours(Calendar calendar, int fragment); static long getFragmentInDays(Calendar calendar, int fragment); static boolean truncatedEquals(Calendar cal1, Calendar cal2, int field); static boolean truncatedEquals(Date date1, Date date2, int field); static int truncatedCompareTo(Calendar cal1, Calendar cal2, int field); static int truncatedCompareTo(Date date1, Date date2, int field); static final TimeZone UTC_TIME_ZONE; static final long MILLIS_PER_SECOND; static final long MILLIS_PER_MINUTE; static final long MILLIS_PER_HOUR; static final long MILLIS_PER_DAY; final static int SEMI_MONTH; final static int RANGE_WEEK_SUNDAY; final static int RANGE_WEEK_MONDAY; final static int RANGE_WEEK_RELATIVE; final static int RANGE_WEEK_CENTER; final static int RANGE_MONTH_SUNDAY; final static int RANGE_MONTH_MONDAY; final static int MODIFY_TRUNCATE; final static int MODIFY_ROUND; final static int MODIFY_CEILING; }\n", "projects": [{"project": "Lang", "id": 21}]}
{"method": "// Focal method:\npublic class DateUtils { public static Date addMilliseconds(Date date, int amount) { return add(date, Calendar.MILLISECOND, amount); } DateUtils(); static boolean isSameDay(Date date1, Date date2); static boolean isSameDay(Calendar cal1, Calendar cal2); static boolean isSameInstant(Date date1, Date date2); static boolean isSameInstant(Calendar cal1, Calendar cal2); static boolean isSameLocalTime(Calendar cal1, Calendar cal2); static Date parseDate(String str, String... parsePatterns); static Date parseDateStrictly(String str, String... parsePatterns); static Date addYears(Date date, int amount); static Date addMonths(Date date, int amount); static Date addWeeks(Date date, int amount); static Date addDays(Date date, int amount); static Date addHours(Date date, int amount); static Date addMinutes(Date date, int amount); static Date addSeconds(Date date, int amount); static Date addMilliseconds(Date date, int amount); static Date setYears(Date date, int amount); static Date setMonths(Date date, int amount); static Date setDays(Date date, int amount); static Date setHours(Date date, int amount); static Date setMinutes(Date date, int amount); static Date setSeconds(Date date, int amount); static Date setMilliseconds(Date date, int amount); static Calendar toCalendar(Date date); static Date round(Date date, int field); static Calendar round(Calendar date, int field); static Date round(Object date, int field); static Date truncate(Date date, int field); static Calendar truncate(Calendar date, int field); static Date truncate(Object date, int field); static Date ceiling(Date date, int field); static Calendar ceiling(Calendar date, int field); static Date ceiling(Object date, int field); static Iterator<Calendar> iterator(Date focus, int rangeStyle); static Iterator<Calendar> iterator(Calendar focus, int rangeStyle); static Iterator<?> iterator(Object focus, int rangeStyle); static long getFragmentInMilliseconds(Date date, int fragment); static long getFragmentInSeconds(Date date, int fragment); static long getFragmentInMinutes(Date date, int fragment); static long getFragmentInHours(Date date, int fragment); static long getFragmentInDays(Date date, int fragment); static long getFragmentInMilliseconds(Calendar calendar, int fragment); static long getFragmentInSeconds(Calendar calendar, int fragment); static long getFragmentInMinutes(Calendar calendar, int fragment); static long getFragmentInHours(Calendar calendar, int fragment); static long getFragmentInDays(Calendar calendar, int fragment); static boolean truncatedEquals(Calendar cal1, Calendar cal2, int field); static boolean truncatedEquals(Date date1, Date date2, int field); static int truncatedCompareTo(Calendar cal1, Calendar cal2, int field); static int truncatedCompareTo(Date date1, Date date2, int field); static final TimeZone UTC_TIME_ZONE; static final long MILLIS_PER_SECOND; static final long MILLIS_PER_MINUTE; static final long MILLIS_PER_HOUR; static final long MILLIS_PER_DAY; final static int SEMI_MONTH; final static int RANGE_WEEK_SUNDAY; final static int RANGE_WEEK_MONDAY; final static int RANGE_WEEK_RELATIVE; final static int RANGE_WEEK_CENTER; final static int RANGE_MONTH_SUNDAY; final static int RANGE_MONTH_MONDAY; final static int MODIFY_TRUNCATE; final static int MODIFY_ROUND; final static int MODIFY_CEILING; }\n", "projects": [{"project": "Lang", "id": 21}]}
{"method": "// Focal method:\npublic abstract class ToStringStyle implements Serializable { public void append(StringBuffer buffer, String fieldName, boolean[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected ToStringStyle(); void appendSuper(StringBuffer buffer, String superToString); void appendToString(StringBuffer buffer, String toString); void appendStart(StringBuffer buffer, Object object); void appendEnd(StringBuffer buffer, Object object); void append(StringBuffer buffer, String fieldName, Object value, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, long value); void append(StringBuffer buffer, String fieldName, int value); void append(StringBuffer buffer, String fieldName, short value); void append(StringBuffer buffer, String fieldName, byte value); void append(StringBuffer buffer, String fieldName, char value); void append(StringBuffer buffer, String fieldName, double value); void append(StringBuffer buffer, String fieldName, float value); void append(StringBuffer buffer, String fieldName, boolean value); void append(StringBuffer buffer, String fieldName, Object[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, long[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, int[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, short[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, byte[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, char[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, double[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, float[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, boolean[] array, Boolean fullDetail); static final ToStringStyle DEFAULT_STYLE; static final ToStringStyle MULTI_LINE_STYLE; static final ToStringStyle NO_FIELD_NAMES_STYLE; static final ToStringStyle SHORT_PREFIX_STYLE; static final ToStringStyle SIMPLE_STYLE; }\n// Avaible SubClasses:\n// public class StandardToStringStyle extends ToStringStyle {\n// public abstract class ToStringStyle implements Serializable { public static final ToStringStyle DEFAULT_STYLE = new DefaultToStringStyle(); public static final ToStringStyle MULTI_LINE_STYLE = new MultiLineToStringStyle(); public static final ToStringStyle NO_FIELD_NAMES_STYLE = new NoFieldNameToStringStyle(); public static final ToStringStyle SHORT_PREFIX_STYLE = new ShortPrefixToStringStyle(); public static final ToStringStyle SIMPLE_STYLE = new SimpleToStringStyle(); private static final ThreadLocal<WeakHashMap<Object, Object>> REGISTRY = new ThreadLocal<WeakHashMap<Object,Object>>(); static Map<Object, Object> getRegistry() { return REGISTRY.get() != null ? REGISTRY.get() : Collections.<Object, Object>emptyMap(); } static boolean isRegistered(Object value) { Map<Object, Object> m = getRegistry(); return m.containsKey(value); } static void register(Object value) { if (value != null) { WeakHashMap<Object, Object> m; synchronized (ToStringStyle.class) { m = REGISTRY.get(); if (m == null) { m = new WeakHashMap<Object, Object>(); REGISTRY.set(m); } } m.put(value, null); } } static void unregister(Object value) { if (value != null) { WeakHashMap<Object, Object> m; synchronized (ToStringStyle.class) { m = REGISTRY.get(); if (m != null) { m.remove(value); if (m.isEmpty()) { REGISTRY.remove(); } } } } } private boolean useFieldNames = true; private boolean useClassName = true; private boolean useShortClassName = false; private boolean useIdentityHashCode = true; private String contentStart = \"[\"; private String contentEnd = \"]\"; private String fieldNameValueSeparator = \"=\"; private boolean fieldSeparatorAtStart = false; private boolean fieldSeparatorAtEnd = false; private String fieldSeparator = \",\"; private String arrayStart = \"{\"; private String arraySeparator = \",\"; private boolean arrayContentDetail = true; private String arrayEnd = \"}\"; private boolean defaultFullDetail = true; private String nullText = \"<null>\"; private String sizeStartText = \"<size=\"; private String sizeEndText = \">\"; private String summaryObjectStartText = \"<\"; private String summaryObjectEndText = \">\"; protected ToStringStyle() { super(); } public void appendSuper(StringBuffer buffer, String superToString) { appendToString(buffer, superToString); } public void appendToString(StringBuffer buffer, String toString) { if (toString != null) { int pos1 = toString.indexOf(contentStart) + contentStart.length(); int pos2 = toString.lastIndexOf(contentEnd); if (pos1 != pos2 && pos1 >= 0 && pos2 >= 0) { String data = toString.substring(pos1, pos2); if (fieldSeparatorAtStart) { removeLastFieldSeparator(buffer); } buffer.append(data); appendFieldSeparator(buffer); } } } public void appendStart(StringBuffer buffer, Object object) { if (object != null) { appendClassName(buffer, object); appendIdentityHashCode(buffer, object); appendContentStart(buffer); if (fieldSeparatorAtStart) { appendFieldSeparator(buffer); } } } public void appendEnd(StringBuffer buffer, Object object) { if (this.fieldSeparatorAtEnd == false) { removeLastFieldSeparator(buffer); } appendContentEnd(buffer); unregister(object); } protected void removeLastFieldSeparator(StringBuffer buffer) { int len = buffer.length(); int sepLen = fieldSeparator.length(); if (len > 0 && sepLen > 0 && len >= sepLen) { boolean match = true; for (int i = 0; i < sepLen; i++) { if (buffer.charAt(len - 1 - i) != fieldSeparator.charAt(sepLen - 1 - i)) { match = false; break; } } if (match) { buffer.setLength(len - sepLen); } } } public void append(StringBuffer buffer, String fieldName, Object value, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (value == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, value, isFullDetail(fullDetail)); } appendFieldEnd(buffer, fieldName); } protected void appendInternal(StringBuffer buffer, String fieldName, Object value, boolean detail) { if (isRegistered(value) && !(value instanceof Number || value instanceof Boolean || value instanceof Character)) { appendCyclicObject(buffer, fieldName, value); return; } register(value); try { if (value instanceof Collection<?>) { if (detail) { appendDetail(buffer, fieldName, (Collection<?>) value); } else { appendSummarySize(buffer, fieldName, ((Collection<?>) value).size()); } } else if (value instanceof Map<?, ?>) { if (detail) { appendDetail(buffer, fieldName, (Map<?, ?>) value); } else { appendSummarySize(buffer, fieldName, ((Map<?, ?>) value).size()); } } else if (value instanceof long[]) { if (detail) { appendDetail(buffer, fieldName, (long[]) value); } else { appendSummary(buffer, fieldName, (long[]) value); } } else if (value instanceof int[]) { if (detail) { appendDetail(buffer, fieldName, (int[]) value); } else { appendSummary(buffer, fieldName, (int[]) value); } } else if (value instanceof short[]) { if (detail) { appendDetail(buffer, fieldName, (short[]) value); } else { appendSummary(buffer, fieldName, (short[]) value); } } else if (value instanceof byte[]) { if (detail) { appendDetail(buffer, fieldName, (byte[]) value); } else { appendSummary(buffer, fieldName, (byte[]) value); } } else if (value instanceof char[]) { if (detail) { appendDetail(buffer, fieldName, (char[]) value); } else { appendSummary(buffer, fieldName, (char[]) value); } } else if (value instanceof double[]) { if (detail) { appendDetail(buffer, fieldName, (double[]) value); } else { appendSummary(buffer, fieldName, (double[]) value); } } else if (value instanceof float[]) { if (detail) { appendDetail(buffer, fieldName, (float[]) value); } else { appendSummary(buffer, fieldName, (float[]) value); } } else if (value instanceof boolean[]) { if (detail) { appendDetail(buffer, fieldName, (boolean[]) value); } else { appendSummary(buffer, fieldName, (boolean[]) value); } } else if (value.getClass().isArray()) { if (detail) { appendDetail(buffer, fieldName, (Object[]) value); } else { appendSummary(buffer, fieldName, (Object[]) value); } } else { if (detail) { appendDetail(buffer, fieldName, value); } else { appendSummary(buffer, fieldName, value); } } } finally { unregister(value); } } protected void appendCyclicObject(StringBuffer buffer, String fieldName, Object value) { ObjectUtils.identityToString(buffer, value); } protected void appendDetail(StringBuffer buffer, String fieldName, Object value) { buffer.append(value); } protected void appendDetail(StringBuffer buffer, String fieldName, Collection<?> coll) { buffer.append(coll); } protected void appendDetail(StringBuffer buffer, String fieldName, Map<?, ?> map) { buffer.append(map); } protected void appendSummary(StringBuffer buffer, String fieldName, Object value) { buffer.append(summaryObjectStartText); buffer.append(getShortClassName(value.getClass())); buffer.append(summaryObjectEndText); } public void append(StringBuffer buffer, String fieldName, long value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, long value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, int value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, int value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, short value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, short value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, byte value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, byte value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, char value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, char value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, double value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, double value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, float value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, float value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, boolean value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, boolean value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, Object[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, Object[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { Object item = array[i]; if (i > 0) { buffer.append(arraySeparator); } if (item == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, item, arrayContentDetail); } } buffer.append(arrayEnd); } protected void reflectionAppendArrayDetail(StringBuffer buffer, String fieldName, Object array) { buffer.append(arrayStart); int length = Array.getLength(array); for (int i = 0; i < length; i++) { Object item = Array.get(array, i); if (i > 0) { buffer.append(arraySeparator); } if (item == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, item, arrayContentDetail); } } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, Object[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, long[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, long[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, long[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, int[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, int[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, int[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, short[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, short[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, short[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, byte[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, byte[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, byte[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, char[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, char[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, char[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, double[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, double[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, double[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, float[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, float[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, float[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, boolean[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, boolean[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, boolean[] array) { appendSummarySize(buffer, fieldName, array.length); } protected void appendClassName(StringBuffer buffer, Object object) { if (useClassName && object != null) { register(object); if (useShortClassName) { buffer.append(getShortClassName(object.getClass())); } else { buffer.append(object.getClass().getName()); } } } protected void appendIdentityHashCode(StringBuffer buffer, Object object) { if (this.isUseIdentityHashCode() && object!=null) { register(object); buffer.append('@'); buffer.append(Integer.toHexString(System.identityHashCode(object))); } } protected void appendContentStart(StringBuffer buffer) { buffer.append(contentStart); } protected void appendContentEnd(StringBuffer buffer) { buffer.append(contentEnd); } protected void appendNullText(StringBuffer buffer, String fieldName) { buffer.append(nullText); } protected void appendFieldSeparator(StringBuffer buffer) { buffer.append(fieldSeparator); } protected void appendFieldStart(StringBuffer buffer, String fieldName) { if (useFieldNames && fieldName != null) { buffer.append(fieldName); buffer.append(fieldNameValueSeparator); } } protected void appendFieldEnd(StringBuffer buffer, String fieldName) { appendFieldSeparator(buffer); } protected void appendSummarySize(StringBuffer buffer, String fieldName, int size) { buffer.append(sizeStartText); buffer.append(size); buffer.append(sizeEndText); } protected boolean isFullDetail(Boolean fullDetailRequest) { if (fullDetailRequest == null) { return defaultFullDetail; } return fullDetailRequest.booleanValue(); } protected String getShortClassName(Class<?> cls) { return ClassUtils.getShortClassName(cls); } protected boolean isUseClassName() { return useClassName; } protected void setUseClassName(boolean useClassName) { this.useClassName = useClassName; } protected boolean isUseShortClassName() { return useShortClassName; } protected void setUseShortClassName(boolean useShortClassName) { this.useShortClassName = useShortClassName; } protected boolean isUseIdentityHashCode() { return useIdentityHashCode; } protected void setUseIdentityHashCode(boolean useIdentityHashCode) { this.useIdentityHashCode = useIdentityHashCode; } protected boolean isUseFieldNames() { return useFieldNames; } protected void setUseFieldNames(boolean useFieldNames) { this.useFieldNames = useFieldNames; } protected boolean isDefaultFullDetail() { return defaultFullDetail; } protected void setDefaultFullDetail(boolean defaultFullDetail) { this.defaultFullDetail = defaultFullDetail; } protected boolean isArrayContentDetail() { return arrayContentDetail; } protected void setArrayContentDetail(boolean arrayContentDetail) { this.arrayContentDetail = arrayContentDetail; } protected String getArrayStart() { return arrayStart; } protected void setArrayStart(String arrayStart) { if (arrayStart == null) { arrayStart = \"\"; } this.arrayStart = arrayStart; } protected String getArrayEnd() { return arrayEnd; } protected void setArrayEnd(String arrayEnd) { if (arrayEnd == null) { arrayEnd = \"\"; } this.arrayEnd = arrayEnd; } protected String getArraySeparator() { return arraySeparator; } protected void setArraySeparator(String arraySeparator) { if (arraySeparator == null) { arraySeparator = \"\"; } this.arraySeparator = arraySeparator; } protected String getContentStart() { return contentStart; } protected void setContentStart(String contentStart) { if (contentStart == null) { contentStart = \"\"; } this.contentStart = contentStart; } protected String getContentEnd() { return contentEnd; } protected void setContentEnd(String contentEnd) { if (contentEnd == null) { contentEnd = \"\"; } this.contentEnd = contentEnd; } protected String getFieldNameValueSeparator() { return fieldNameValueSeparator; } protected void setFieldNameValueSeparator(String fieldNameValueSeparator) { if (fieldNameValueSeparator == null) { fieldNameValueSeparator = \"\"; } this.fieldNameValueSeparator = fieldNameValueSeparator; } protected String getFieldSeparator() { return fieldSeparator; } protected void setFieldSeparator(String fieldSeparator) { if (fieldSeparator == null) { fieldSeparator = \"\"; } this.fieldSeparator = fieldSeparator; } protected boolean isFieldSeparatorAtStart() { return fieldSeparatorAtStart; } protected void setFieldSeparatorAtStart(boolean fieldSeparatorAtStart) { this.fieldSeparatorAtStart = fieldSeparatorAtStart; } protected boolean isFieldSeparatorAtEnd() { return fieldSeparatorAtEnd; } protected void setFieldSeparatorAtEnd(boolean fieldSeparatorAtEnd) { this.fieldSeparatorAtEnd = fieldSeparatorAtEnd; } protected String getNullText() { return nullText; } protected void setNullText(String nullText) { if (nullText == null) { nullText = \"\"; } this.nullText = nullText; } protected String getSizeStartText() { return sizeStartText; } protected void setSizeStartText(String sizeStartText) { if (sizeStartText == null) { sizeStartText = \"\"; } this.sizeStartText = sizeStartText; } protected String getSizeEndText() { return sizeEndText; } protected void setSizeEndText(String sizeEndText) { if (sizeEndText == null) { sizeEndText = \"\"; } this.sizeEndText = sizeEndText; } protected String getSummaryObjectStartText() { return summaryObjectStartText; } protected void setSummaryObjectStartText(String summaryObjectStartText) { if (summaryObjectStartText == null) { summaryObjectStartText = \"\"; } this.summaryObjectStartText = summaryObjectStartText; } protected String getSummaryObjectEndText() { return summaryObjectEndText; } protected void setSummaryObjectEndText(String summaryObjectEndText) { if (summaryObjectEndText == null) { summaryObjectEndText = \"\"; } this.summaryObjectEndText = summaryObjectEndText; } private static final class DefaultToStringStyle extends ToStringStyle {\n", "projects": [{"project": "Lang", "id": 34}]}
{"method": "// Focal method:\npublic abstract class ToStringStyle implements Serializable { public void append(StringBuffer buffer, String fieldName, long value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected ToStringStyle(); void appendSuper(StringBuffer buffer, String superToString); void appendToString(StringBuffer buffer, String toString); void appendStart(StringBuffer buffer, Object object); void appendEnd(StringBuffer buffer, Object object); void append(StringBuffer buffer, String fieldName, Object value, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, long value); void append(StringBuffer buffer, String fieldName, int value); void append(StringBuffer buffer, String fieldName, short value); void append(StringBuffer buffer, String fieldName, byte value); void append(StringBuffer buffer, String fieldName, char value); void append(StringBuffer buffer, String fieldName, double value); void append(StringBuffer buffer, String fieldName, float value); void append(StringBuffer buffer, String fieldName, boolean value); void append(StringBuffer buffer, String fieldName, Object[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, long[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, int[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, short[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, byte[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, char[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, double[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, float[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, boolean[] array, Boolean fullDetail); static final ToStringStyle DEFAULT_STYLE; static final ToStringStyle MULTI_LINE_STYLE; static final ToStringStyle NO_FIELD_NAMES_STYLE; static final ToStringStyle SHORT_PREFIX_STYLE; static final ToStringStyle SIMPLE_STYLE; }\n// Avaible SubClasses:\n// public class StandardToStringStyle extends ToStringStyle {\n// public abstract class ToStringStyle implements Serializable { public static final ToStringStyle DEFAULT_STYLE = new DefaultToStringStyle(); public static final ToStringStyle MULTI_LINE_STYLE = new MultiLineToStringStyle(); public static final ToStringStyle NO_FIELD_NAMES_STYLE = new NoFieldNameToStringStyle(); public static final ToStringStyle SHORT_PREFIX_STYLE = new ShortPrefixToStringStyle(); public static final ToStringStyle SIMPLE_STYLE = new SimpleToStringStyle(); private static final ThreadLocal<WeakHashMap<Object, Object>> REGISTRY = new ThreadLocal<WeakHashMap<Object,Object>>(); static Map<Object, Object> getRegistry() { return REGISTRY.get() != null ? REGISTRY.get() : Collections.<Object, Object>emptyMap(); } static boolean isRegistered(Object value) { Map<Object, Object> m = getRegistry(); return m.containsKey(value); } static void register(Object value) { if (value != null) { WeakHashMap<Object, Object> m; synchronized (ToStringStyle.class) { m = REGISTRY.get(); if (m == null) { m = new WeakHashMap<Object, Object>(); REGISTRY.set(m); } } m.put(value, null); } } static void unregister(Object value) { if (value != null) { WeakHashMap<Object, Object> m; synchronized (ToStringStyle.class) { m = REGISTRY.get(); if (m != null) { m.remove(value); if (m.isEmpty()) { REGISTRY.remove(); } } } } } private boolean useFieldNames = true; private boolean useClassName = true; private boolean useShortClassName = false; private boolean useIdentityHashCode = true; private String contentStart = \"[\"; private String contentEnd = \"]\"; private String fieldNameValueSeparator = \"=\"; private boolean fieldSeparatorAtStart = false; private boolean fieldSeparatorAtEnd = false; private String fieldSeparator = \",\"; private String arrayStart = \"{\"; private String arraySeparator = \",\"; private boolean arrayContentDetail = true; private String arrayEnd = \"}\"; private boolean defaultFullDetail = true; private String nullText = \"<null>\"; private String sizeStartText = \"<size=\"; private String sizeEndText = \">\"; private String summaryObjectStartText = \"<\"; private String summaryObjectEndText = \">\"; protected ToStringStyle() { super(); } public void appendSuper(StringBuffer buffer, String superToString) { appendToString(buffer, superToString); } public void appendToString(StringBuffer buffer, String toString) { if (toString != null) { int pos1 = toString.indexOf(contentStart) + contentStart.length(); int pos2 = toString.lastIndexOf(contentEnd); if (pos1 != pos2 && pos1 >= 0 && pos2 >= 0) { String data = toString.substring(pos1, pos2); if (fieldSeparatorAtStart) { removeLastFieldSeparator(buffer); } buffer.append(data); appendFieldSeparator(buffer); } } } public void appendStart(StringBuffer buffer, Object object) { if (object != null) { appendClassName(buffer, object); appendIdentityHashCode(buffer, object); appendContentStart(buffer); if (fieldSeparatorAtStart) { appendFieldSeparator(buffer); } } } public void appendEnd(StringBuffer buffer, Object object) { if (this.fieldSeparatorAtEnd == false) { removeLastFieldSeparator(buffer); } appendContentEnd(buffer); unregister(object); } protected void removeLastFieldSeparator(StringBuffer buffer) { int len = buffer.length(); int sepLen = fieldSeparator.length(); if (len > 0 && sepLen > 0 && len >= sepLen) { boolean match = true; for (int i = 0; i < sepLen; i++) { if (buffer.charAt(len - 1 - i) != fieldSeparator.charAt(sepLen - 1 - i)) { match = false; break; } } if (match) { buffer.setLength(len - sepLen); } } } public void append(StringBuffer buffer, String fieldName, Object value, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (value == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, value, isFullDetail(fullDetail)); } appendFieldEnd(buffer, fieldName); } protected void appendInternal(StringBuffer buffer, String fieldName, Object value, boolean detail) { if (isRegistered(value) && !(value instanceof Number || value instanceof Boolean || value instanceof Character)) { appendCyclicObject(buffer, fieldName, value); return; } register(value); try { if (value instanceof Collection<?>) { if (detail) { appendDetail(buffer, fieldName, (Collection<?>) value); } else { appendSummarySize(buffer, fieldName, ((Collection<?>) value).size()); } } else if (value instanceof Map<?, ?>) { if (detail) { appendDetail(buffer, fieldName, (Map<?, ?>) value); } else { appendSummarySize(buffer, fieldName, ((Map<?, ?>) value).size()); } } else if (value instanceof long[]) { if (detail) { appendDetail(buffer, fieldName, (long[]) value); } else { appendSummary(buffer, fieldName, (long[]) value); } } else if (value instanceof int[]) { if (detail) { appendDetail(buffer, fieldName, (int[]) value); } else { appendSummary(buffer, fieldName, (int[]) value); } } else if (value instanceof short[]) { if (detail) { appendDetail(buffer, fieldName, (short[]) value); } else { appendSummary(buffer, fieldName, (short[]) value); } } else if (value instanceof byte[]) { if (detail) { appendDetail(buffer, fieldName, (byte[]) value); } else { appendSummary(buffer, fieldName, (byte[]) value); } } else if (value instanceof char[]) { if (detail) { appendDetail(buffer, fieldName, (char[]) value); } else { appendSummary(buffer, fieldName, (char[]) value); } } else if (value instanceof double[]) { if (detail) { appendDetail(buffer, fieldName, (double[]) value); } else { appendSummary(buffer, fieldName, (double[]) value); } } else if (value instanceof float[]) { if (detail) { appendDetail(buffer, fieldName, (float[]) value); } else { appendSummary(buffer, fieldName, (float[]) value); } } else if (value instanceof boolean[]) { if (detail) { appendDetail(buffer, fieldName, (boolean[]) value); } else { appendSummary(buffer, fieldName, (boolean[]) value); } } else if (value.getClass().isArray()) { if (detail) { appendDetail(buffer, fieldName, (Object[]) value); } else { appendSummary(buffer, fieldName, (Object[]) value); } } else { if (detail) { appendDetail(buffer, fieldName, value); } else { appendSummary(buffer, fieldName, value); } } } finally { unregister(value); } } protected void appendCyclicObject(StringBuffer buffer, String fieldName, Object value) { ObjectUtils.identityToString(buffer, value); } protected void appendDetail(StringBuffer buffer, String fieldName, Object value) { buffer.append(value); } protected void appendDetail(StringBuffer buffer, String fieldName, Collection<?> coll) { buffer.append(coll); } protected void appendDetail(StringBuffer buffer, String fieldName, Map<?, ?> map) { buffer.append(map); } protected void appendSummary(StringBuffer buffer, String fieldName, Object value) { buffer.append(summaryObjectStartText); buffer.append(getShortClassName(value.getClass())); buffer.append(summaryObjectEndText); } public void append(StringBuffer buffer, String fieldName, long value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, long value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, int value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, int value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, short value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, short value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, byte value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, byte value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, char value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, char value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, double value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, double value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, float value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, float value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, boolean value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, boolean value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, Object[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, Object[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { Object item = array[i]; if (i > 0) { buffer.append(arraySeparator); } if (item == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, item, arrayContentDetail); } } buffer.append(arrayEnd); } protected void reflectionAppendArrayDetail(StringBuffer buffer, String fieldName, Object array) { buffer.append(arrayStart); int length = Array.getLength(array); for (int i = 0; i < length; i++) { Object item = Array.get(array, i); if (i > 0) { buffer.append(arraySeparator); } if (item == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, item, arrayContentDetail); } } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, Object[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, long[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, long[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, long[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, int[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, int[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, int[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, short[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, short[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, short[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, byte[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, byte[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, byte[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, char[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, char[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, char[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, double[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, double[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, double[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, float[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, float[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, float[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, boolean[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, boolean[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, boolean[] array) { appendSummarySize(buffer, fieldName, array.length); } protected void appendClassName(StringBuffer buffer, Object object) { if (useClassName && object != null) { register(object); if (useShortClassName) { buffer.append(getShortClassName(object.getClass())); } else { buffer.append(object.getClass().getName()); } } } protected void appendIdentityHashCode(StringBuffer buffer, Object object) { if (this.isUseIdentityHashCode() && object!=null) { register(object); buffer.append('@'); buffer.append(Integer.toHexString(System.identityHashCode(object))); } } protected void appendContentStart(StringBuffer buffer) { buffer.append(contentStart); } protected void appendContentEnd(StringBuffer buffer) { buffer.append(contentEnd); } protected void appendNullText(StringBuffer buffer, String fieldName) { buffer.append(nullText); } protected void appendFieldSeparator(StringBuffer buffer) { buffer.append(fieldSeparator); } protected void appendFieldStart(StringBuffer buffer, String fieldName) { if (useFieldNames && fieldName != null) { buffer.append(fieldName); buffer.append(fieldNameValueSeparator); } } protected void appendFieldEnd(StringBuffer buffer, String fieldName) { appendFieldSeparator(buffer); } protected void appendSummarySize(StringBuffer buffer, String fieldName, int size) { buffer.append(sizeStartText); buffer.append(size); buffer.append(sizeEndText); } protected boolean isFullDetail(Boolean fullDetailRequest) { if (fullDetailRequest == null) { return defaultFullDetail; } return fullDetailRequest.booleanValue(); } protected String getShortClassName(Class<?> cls) { return ClassUtils.getShortClassName(cls); } protected boolean isUseClassName() { return useClassName; } protected void setUseClassName(boolean useClassName) { this.useClassName = useClassName; } protected boolean isUseShortClassName() { return useShortClassName; } protected void setUseShortClassName(boolean useShortClassName) { this.useShortClassName = useShortClassName; } protected boolean isUseIdentityHashCode() { return useIdentityHashCode; } protected void setUseIdentityHashCode(boolean useIdentityHashCode) { this.useIdentityHashCode = useIdentityHashCode; } protected boolean isUseFieldNames() { return useFieldNames; } protected void setUseFieldNames(boolean useFieldNames) { this.useFieldNames = useFieldNames; } protected boolean isDefaultFullDetail() { return defaultFullDetail; } protected void setDefaultFullDetail(boolean defaultFullDetail) { this.defaultFullDetail = defaultFullDetail; } protected boolean isArrayContentDetail() { return arrayContentDetail; } protected void setArrayContentDetail(boolean arrayContentDetail) { this.arrayContentDetail = arrayContentDetail; } protected String getArrayStart() { return arrayStart; } protected void setArrayStart(String arrayStart) { if (arrayStart == null) { arrayStart = \"\"; } this.arrayStart = arrayStart; } protected String getArrayEnd() { return arrayEnd; } protected void setArrayEnd(String arrayEnd) { if (arrayEnd == null) { arrayEnd = \"\"; } this.arrayEnd = arrayEnd; } protected String getArraySeparator() { return arraySeparator; } protected void setArraySeparator(String arraySeparator) { if (arraySeparator == null) { arraySeparator = \"\"; } this.arraySeparator = arraySeparator; } protected String getContentStart() { return contentStart; } protected void setContentStart(String contentStart) { if (contentStart == null) { contentStart = \"\"; } this.contentStart = contentStart; } protected String getContentEnd() { return contentEnd; } protected void setContentEnd(String contentEnd) { if (contentEnd == null) { contentEnd = \"\"; } this.contentEnd = contentEnd; } protected String getFieldNameValueSeparator() { return fieldNameValueSeparator; } protected void setFieldNameValueSeparator(String fieldNameValueSeparator) { if (fieldNameValueSeparator == null) { fieldNameValueSeparator = \"\"; } this.fieldNameValueSeparator = fieldNameValueSeparator; } protected String getFieldSeparator() { return fieldSeparator; } protected void setFieldSeparator(String fieldSeparator) { if (fieldSeparator == null) { fieldSeparator = \"\"; } this.fieldSeparator = fieldSeparator; } protected boolean isFieldSeparatorAtStart() { return fieldSeparatorAtStart; } protected void setFieldSeparatorAtStart(boolean fieldSeparatorAtStart) { this.fieldSeparatorAtStart = fieldSeparatorAtStart; } protected boolean isFieldSeparatorAtEnd() { return fieldSeparatorAtEnd; } protected void setFieldSeparatorAtEnd(boolean fieldSeparatorAtEnd) { this.fieldSeparatorAtEnd = fieldSeparatorAtEnd; } protected String getNullText() { return nullText; } protected void setNullText(String nullText) { if (nullText == null) { nullText = \"\"; } this.nullText = nullText; } protected String getSizeStartText() { return sizeStartText; } protected void setSizeStartText(String sizeStartText) { if (sizeStartText == null) { sizeStartText = \"\"; } this.sizeStartText = sizeStartText; } protected String getSizeEndText() { return sizeEndText; } protected void setSizeEndText(String sizeEndText) { if (sizeEndText == null) { sizeEndText = \"\"; } this.sizeEndText = sizeEndText; } protected String getSummaryObjectStartText() { return summaryObjectStartText; } protected void setSummaryObjectStartText(String summaryObjectStartText) { if (summaryObjectStartText == null) { summaryObjectStartText = \"\"; } this.summaryObjectStartText = summaryObjectStartText; } protected String getSummaryObjectEndText() { return summaryObjectEndText; } protected void setSummaryObjectEndText(String summaryObjectEndText) { if (summaryObjectEndText == null) { summaryObjectEndText = \"\"; } this.summaryObjectEndText = summaryObjectEndText; } private static final class DefaultToStringStyle extends ToStringStyle {\n", "projects": [{"project": "Lang", "id": 34}]}
{"method": "// Focal method:\npublic abstract class ToStringStyle implements Serializable { public void append(StringBuffer buffer, String fieldName, byte[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected ToStringStyle(); void appendSuper(StringBuffer buffer, String superToString); void appendToString(StringBuffer buffer, String toString); void appendStart(StringBuffer buffer, Object object); void appendEnd(StringBuffer buffer, Object object); void append(StringBuffer buffer, String fieldName, Object value, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, long value); void append(StringBuffer buffer, String fieldName, int value); void append(StringBuffer buffer, String fieldName, short value); void append(StringBuffer buffer, String fieldName, byte value); void append(StringBuffer buffer, String fieldName, char value); void append(StringBuffer buffer, String fieldName, double value); void append(StringBuffer buffer, String fieldName, float value); void append(StringBuffer buffer, String fieldName, boolean value); void append(StringBuffer buffer, String fieldName, Object[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, long[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, int[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, short[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, byte[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, char[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, double[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, float[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, boolean[] array, Boolean fullDetail); static final ToStringStyle DEFAULT_STYLE; static final ToStringStyle MULTI_LINE_STYLE; static final ToStringStyle NO_FIELD_NAMES_STYLE; static final ToStringStyle SHORT_PREFIX_STYLE; static final ToStringStyle SIMPLE_STYLE; }\n// Avaible SubClasses:\n// public class StandardToStringStyle extends ToStringStyle {\n// public abstract class ToStringStyle implements Serializable { public static final ToStringStyle DEFAULT_STYLE = new DefaultToStringStyle(); public static final ToStringStyle MULTI_LINE_STYLE = new MultiLineToStringStyle(); public static final ToStringStyle NO_FIELD_NAMES_STYLE = new NoFieldNameToStringStyle(); public static final ToStringStyle SHORT_PREFIX_STYLE = new ShortPrefixToStringStyle(); public static final ToStringStyle SIMPLE_STYLE = new SimpleToStringStyle(); private static final ThreadLocal<WeakHashMap<Object, Object>> REGISTRY = new ThreadLocal<WeakHashMap<Object,Object>>(); static Map<Object, Object> getRegistry() { return REGISTRY.get() != null ? REGISTRY.get() : Collections.<Object, Object>emptyMap(); } static boolean isRegistered(Object value) { Map<Object, Object> m = getRegistry(); return m.containsKey(value); } static void register(Object value) { if (value != null) { WeakHashMap<Object, Object> m; synchronized (ToStringStyle.class) { m = REGISTRY.get(); if (m == null) { m = new WeakHashMap<Object, Object>(); REGISTRY.set(m); } } m.put(value, null); } } static void unregister(Object value) { if (value != null) { WeakHashMap<Object, Object> m; synchronized (ToStringStyle.class) { m = REGISTRY.get(); if (m != null) { m.remove(value); if (m.isEmpty()) { REGISTRY.remove(); } } } } } private boolean useFieldNames = true; private boolean useClassName = true; private boolean useShortClassName = false; private boolean useIdentityHashCode = true; private String contentStart = \"[\"; private String contentEnd = \"]\"; private String fieldNameValueSeparator = \"=\"; private boolean fieldSeparatorAtStart = false; private boolean fieldSeparatorAtEnd = false; private String fieldSeparator = \",\"; private String arrayStart = \"{\"; private String arraySeparator = \",\"; private boolean arrayContentDetail = true; private String arrayEnd = \"}\"; private boolean defaultFullDetail = true; private String nullText = \"<null>\"; private String sizeStartText = \"<size=\"; private String sizeEndText = \">\"; private String summaryObjectStartText = \"<\"; private String summaryObjectEndText = \">\"; protected ToStringStyle() { super(); } public void appendSuper(StringBuffer buffer, String superToString) { appendToString(buffer, superToString); } public void appendToString(StringBuffer buffer, String toString) { if (toString != null) { int pos1 = toString.indexOf(contentStart) + contentStart.length(); int pos2 = toString.lastIndexOf(contentEnd); if (pos1 != pos2 && pos1 >= 0 && pos2 >= 0) { String data = toString.substring(pos1, pos2); if (fieldSeparatorAtStart) { removeLastFieldSeparator(buffer); } buffer.append(data); appendFieldSeparator(buffer); } } } public void appendStart(StringBuffer buffer, Object object) { if (object != null) { appendClassName(buffer, object); appendIdentityHashCode(buffer, object); appendContentStart(buffer); if (fieldSeparatorAtStart) { appendFieldSeparator(buffer); } } } public void appendEnd(StringBuffer buffer, Object object) { if (this.fieldSeparatorAtEnd == false) { removeLastFieldSeparator(buffer); } appendContentEnd(buffer); unregister(object); } protected void removeLastFieldSeparator(StringBuffer buffer) { int len = buffer.length(); int sepLen = fieldSeparator.length(); if (len > 0 && sepLen > 0 && len >= sepLen) { boolean match = true; for (int i = 0; i < sepLen; i++) { if (buffer.charAt(len - 1 - i) != fieldSeparator.charAt(sepLen - 1 - i)) { match = false; break; } } if (match) { buffer.setLength(len - sepLen); } } } public void append(StringBuffer buffer, String fieldName, Object value, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (value == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, value, isFullDetail(fullDetail)); } appendFieldEnd(buffer, fieldName); } protected void appendInternal(StringBuffer buffer, String fieldName, Object value, boolean detail) { if (isRegistered(value) && !(value instanceof Number || value instanceof Boolean || value instanceof Character)) { appendCyclicObject(buffer, fieldName, value); return; } register(value); try { if (value instanceof Collection<?>) { if (detail) { appendDetail(buffer, fieldName, (Collection<?>) value); } else { appendSummarySize(buffer, fieldName, ((Collection<?>) value).size()); } } else if (value instanceof Map<?, ?>) { if (detail) { appendDetail(buffer, fieldName, (Map<?, ?>) value); } else { appendSummarySize(buffer, fieldName, ((Map<?, ?>) value).size()); } } else if (value instanceof long[]) { if (detail) { appendDetail(buffer, fieldName, (long[]) value); } else { appendSummary(buffer, fieldName, (long[]) value); } } else if (value instanceof int[]) { if (detail) { appendDetail(buffer, fieldName, (int[]) value); } else { appendSummary(buffer, fieldName, (int[]) value); } } else if (value instanceof short[]) { if (detail) { appendDetail(buffer, fieldName, (short[]) value); } else { appendSummary(buffer, fieldName, (short[]) value); } } else if (value instanceof byte[]) { if (detail) { appendDetail(buffer, fieldName, (byte[]) value); } else { appendSummary(buffer, fieldName, (byte[]) value); } } else if (value instanceof char[]) { if (detail) { appendDetail(buffer, fieldName, (char[]) value); } else { appendSummary(buffer, fieldName, (char[]) value); } } else if (value instanceof double[]) { if (detail) { appendDetail(buffer, fieldName, (double[]) value); } else { appendSummary(buffer, fieldName, (double[]) value); } } else if (value instanceof float[]) { if (detail) { appendDetail(buffer, fieldName, (float[]) value); } else { appendSummary(buffer, fieldName, (float[]) value); } } else if (value instanceof boolean[]) { if (detail) { appendDetail(buffer, fieldName, (boolean[]) value); } else { appendSummary(buffer, fieldName, (boolean[]) value); } } else if (value.getClass().isArray()) { if (detail) { appendDetail(buffer, fieldName, (Object[]) value); } else { appendSummary(buffer, fieldName, (Object[]) value); } } else { if (detail) { appendDetail(buffer, fieldName, value); } else { appendSummary(buffer, fieldName, value); } } } finally { unregister(value); } } protected void appendCyclicObject(StringBuffer buffer, String fieldName, Object value) { ObjectUtils.identityToString(buffer, value); } protected void appendDetail(StringBuffer buffer, String fieldName, Object value) { buffer.append(value); } protected void appendDetail(StringBuffer buffer, String fieldName, Collection<?> coll) { buffer.append(coll); } protected void appendDetail(StringBuffer buffer, String fieldName, Map<?, ?> map) { buffer.append(map); } protected void appendSummary(StringBuffer buffer, String fieldName, Object value) { buffer.append(summaryObjectStartText); buffer.append(getShortClassName(value.getClass())); buffer.append(summaryObjectEndText); } public void append(StringBuffer buffer, String fieldName, long value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, long value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, int value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, int value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, short value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, short value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, byte value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, byte value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, char value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, char value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, double value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, double value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, float value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, float value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, boolean value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, boolean value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, Object[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, Object[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { Object item = array[i]; if (i > 0) { buffer.append(arraySeparator); } if (item == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, item, arrayContentDetail); } } buffer.append(arrayEnd); } protected void reflectionAppendArrayDetail(StringBuffer buffer, String fieldName, Object array) { buffer.append(arrayStart); int length = Array.getLength(array); for (int i = 0; i < length; i++) { Object item = Array.get(array, i); if (i > 0) { buffer.append(arraySeparator); } if (item == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, item, arrayContentDetail); } } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, Object[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, long[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, long[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, long[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, int[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, int[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, int[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, short[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, short[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, short[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, byte[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, byte[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, byte[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, char[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, char[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, char[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, double[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, double[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, double[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, float[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, float[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, float[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, boolean[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, boolean[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, boolean[] array) { appendSummarySize(buffer, fieldName, array.length); } protected void appendClassName(StringBuffer buffer, Object object) { if (useClassName && object != null) { register(object); if (useShortClassName) { buffer.append(getShortClassName(object.getClass())); } else { buffer.append(object.getClass().getName()); } } } protected void appendIdentityHashCode(StringBuffer buffer, Object object) { if (this.isUseIdentityHashCode() && object!=null) { register(object); buffer.append('@'); buffer.append(Integer.toHexString(System.identityHashCode(object))); } } protected void appendContentStart(StringBuffer buffer) { buffer.append(contentStart); } protected void appendContentEnd(StringBuffer buffer) { buffer.append(contentEnd); } protected void appendNullText(StringBuffer buffer, String fieldName) { buffer.append(nullText); } protected void appendFieldSeparator(StringBuffer buffer) { buffer.append(fieldSeparator); } protected void appendFieldStart(StringBuffer buffer, String fieldName) { if (useFieldNames && fieldName != null) { buffer.append(fieldName); buffer.append(fieldNameValueSeparator); } } protected void appendFieldEnd(StringBuffer buffer, String fieldName) { appendFieldSeparator(buffer); } protected void appendSummarySize(StringBuffer buffer, String fieldName, int size) { buffer.append(sizeStartText); buffer.append(size); buffer.append(sizeEndText); } protected boolean isFullDetail(Boolean fullDetailRequest) { if (fullDetailRequest == null) { return defaultFullDetail; } return fullDetailRequest.booleanValue(); } protected String getShortClassName(Class<?> cls) { return ClassUtils.getShortClassName(cls); } protected boolean isUseClassName() { return useClassName; } protected void setUseClassName(boolean useClassName) { this.useClassName = useClassName; } protected boolean isUseShortClassName() { return useShortClassName; } protected void setUseShortClassName(boolean useShortClassName) { this.useShortClassName = useShortClassName; } protected boolean isUseIdentityHashCode() { return useIdentityHashCode; } protected void setUseIdentityHashCode(boolean useIdentityHashCode) { this.useIdentityHashCode = useIdentityHashCode; } protected boolean isUseFieldNames() { return useFieldNames; } protected void setUseFieldNames(boolean useFieldNames) { this.useFieldNames = useFieldNames; } protected boolean isDefaultFullDetail() { return defaultFullDetail; } protected void setDefaultFullDetail(boolean defaultFullDetail) { this.defaultFullDetail = defaultFullDetail; } protected boolean isArrayContentDetail() { return arrayContentDetail; } protected void setArrayContentDetail(boolean arrayContentDetail) { this.arrayContentDetail = arrayContentDetail; } protected String getArrayStart() { return arrayStart; } protected void setArrayStart(String arrayStart) { if (arrayStart == null) { arrayStart = \"\"; } this.arrayStart = arrayStart; } protected String getArrayEnd() { return arrayEnd; } protected void setArrayEnd(String arrayEnd) { if (arrayEnd == null) { arrayEnd = \"\"; } this.arrayEnd = arrayEnd; } protected String getArraySeparator() { return arraySeparator; } protected void setArraySeparator(String arraySeparator) { if (arraySeparator == null) { arraySeparator = \"\"; } this.arraySeparator = arraySeparator; } protected String getContentStart() { return contentStart; } protected void setContentStart(String contentStart) { if (contentStart == null) { contentStart = \"\"; } this.contentStart = contentStart; } protected String getContentEnd() { return contentEnd; } protected void setContentEnd(String contentEnd) { if (contentEnd == null) { contentEnd = \"\"; } this.contentEnd = contentEnd; } protected String getFieldNameValueSeparator() { return fieldNameValueSeparator; } protected void setFieldNameValueSeparator(String fieldNameValueSeparator) { if (fieldNameValueSeparator == null) { fieldNameValueSeparator = \"\"; } this.fieldNameValueSeparator = fieldNameValueSeparator; } protected String getFieldSeparator() { return fieldSeparator; } protected void setFieldSeparator(String fieldSeparator) { if (fieldSeparator == null) { fieldSeparator = \"\"; } this.fieldSeparator = fieldSeparator; } protected boolean isFieldSeparatorAtStart() { return fieldSeparatorAtStart; } protected void setFieldSeparatorAtStart(boolean fieldSeparatorAtStart) { this.fieldSeparatorAtStart = fieldSeparatorAtStart; } protected boolean isFieldSeparatorAtEnd() { return fieldSeparatorAtEnd; } protected void setFieldSeparatorAtEnd(boolean fieldSeparatorAtEnd) { this.fieldSeparatorAtEnd = fieldSeparatorAtEnd; } protected String getNullText() { return nullText; } protected void setNullText(String nullText) { if (nullText == null) { nullText = \"\"; } this.nullText = nullText; } protected String getSizeStartText() { return sizeStartText; } protected void setSizeStartText(String sizeStartText) { if (sizeStartText == null) { sizeStartText = \"\"; } this.sizeStartText = sizeStartText; } protected String getSizeEndText() { return sizeEndText; } protected void setSizeEndText(String sizeEndText) { if (sizeEndText == null) { sizeEndText = \"\"; } this.sizeEndText = sizeEndText; } protected String getSummaryObjectStartText() { return summaryObjectStartText; } protected void setSummaryObjectStartText(String summaryObjectStartText) { if (summaryObjectStartText == null) { summaryObjectStartText = \"\"; } this.summaryObjectStartText = summaryObjectStartText; } protected String getSummaryObjectEndText() { return summaryObjectEndText; } protected void setSummaryObjectEndText(String summaryObjectEndText) { if (summaryObjectEndText == null) { summaryObjectEndText = \"\"; } this.summaryObjectEndText = summaryObjectEndText; } private static final class DefaultToStringStyle extends ToStringStyle {\n", "projects": [{"project": "Lang", "id": 34}]}
{"method": "// Focal method:\npublic abstract class ToStringStyle implements Serializable { public void append(StringBuffer buffer, String fieldName, double value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected ToStringStyle(); void appendSuper(StringBuffer buffer, String superToString); void appendToString(StringBuffer buffer, String toString); void appendStart(StringBuffer buffer, Object object); void appendEnd(StringBuffer buffer, Object object); void append(StringBuffer buffer, String fieldName, Object value, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, long value); void append(StringBuffer buffer, String fieldName, int value); void append(StringBuffer buffer, String fieldName, short value); void append(StringBuffer buffer, String fieldName, byte value); void append(StringBuffer buffer, String fieldName, char value); void append(StringBuffer buffer, String fieldName, double value); void append(StringBuffer buffer, String fieldName, float value); void append(StringBuffer buffer, String fieldName, boolean value); void append(StringBuffer buffer, String fieldName, Object[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, long[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, int[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, short[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, byte[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, char[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, double[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, float[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, boolean[] array, Boolean fullDetail); static final ToStringStyle DEFAULT_STYLE; static final ToStringStyle MULTI_LINE_STYLE; static final ToStringStyle NO_FIELD_NAMES_STYLE; static final ToStringStyle SHORT_PREFIX_STYLE; static final ToStringStyle SIMPLE_STYLE; }\n// Avaible SubClasses:\n// public class StandardToStringStyle extends ToStringStyle {\n// public abstract class ToStringStyle implements Serializable { public static final ToStringStyle DEFAULT_STYLE = new DefaultToStringStyle(); public static final ToStringStyle MULTI_LINE_STYLE = new MultiLineToStringStyle(); public static final ToStringStyle NO_FIELD_NAMES_STYLE = new NoFieldNameToStringStyle(); public static final ToStringStyle SHORT_PREFIX_STYLE = new ShortPrefixToStringStyle(); public static final ToStringStyle SIMPLE_STYLE = new SimpleToStringStyle(); private static final ThreadLocal<WeakHashMap<Object, Object>> REGISTRY = new ThreadLocal<WeakHashMap<Object,Object>>(); static Map<Object, Object> getRegistry() { return REGISTRY.get() != null ? REGISTRY.get() : Collections.<Object, Object>emptyMap(); } static boolean isRegistered(Object value) { Map<Object, Object> m = getRegistry(); return m.containsKey(value); } static void register(Object value) { if (value != null) { WeakHashMap<Object, Object> m; synchronized (ToStringStyle.class) { m = REGISTRY.get(); if (m == null) { m = new WeakHashMap<Object, Object>(); REGISTRY.set(m); } } m.put(value, null); } } static void unregister(Object value) { if (value != null) { WeakHashMap<Object, Object> m; synchronized (ToStringStyle.class) { m = REGISTRY.get(); if (m != null) { m.remove(value); if (m.isEmpty()) { REGISTRY.remove(); } } } } } private boolean useFieldNames = true; private boolean useClassName = true; private boolean useShortClassName = false; private boolean useIdentityHashCode = true; private String contentStart = \"[\"; private String contentEnd = \"]\"; private String fieldNameValueSeparator = \"=\"; private boolean fieldSeparatorAtStart = false; private boolean fieldSeparatorAtEnd = false; private String fieldSeparator = \",\"; private String arrayStart = \"{\"; private String arraySeparator = \",\"; private boolean arrayContentDetail = true; private String arrayEnd = \"}\"; private boolean defaultFullDetail = true; private String nullText = \"<null>\"; private String sizeStartText = \"<size=\"; private String sizeEndText = \">\"; private String summaryObjectStartText = \"<\"; private String summaryObjectEndText = \">\"; protected ToStringStyle() { super(); } public void appendSuper(StringBuffer buffer, String superToString) { appendToString(buffer, superToString); } public void appendToString(StringBuffer buffer, String toString) { if (toString != null) { int pos1 = toString.indexOf(contentStart) + contentStart.length(); int pos2 = toString.lastIndexOf(contentEnd); if (pos1 != pos2 && pos1 >= 0 && pos2 >= 0) { String data = toString.substring(pos1, pos2); if (fieldSeparatorAtStart) { removeLastFieldSeparator(buffer); } buffer.append(data); appendFieldSeparator(buffer); } } } public void appendStart(StringBuffer buffer, Object object) { if (object != null) { appendClassName(buffer, object); appendIdentityHashCode(buffer, object); appendContentStart(buffer); if (fieldSeparatorAtStart) { appendFieldSeparator(buffer); } } } public void appendEnd(StringBuffer buffer, Object object) { if (this.fieldSeparatorAtEnd == false) { removeLastFieldSeparator(buffer); } appendContentEnd(buffer); unregister(object); } protected void removeLastFieldSeparator(StringBuffer buffer) { int len = buffer.length(); int sepLen = fieldSeparator.length(); if (len > 0 && sepLen > 0 && len >= sepLen) { boolean match = true; for (int i = 0; i < sepLen; i++) { if (buffer.charAt(len - 1 - i) != fieldSeparator.charAt(sepLen - 1 - i)) { match = false; break; } } if (match) { buffer.setLength(len - sepLen); } } } public void append(StringBuffer buffer, String fieldName, Object value, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (value == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, value, isFullDetail(fullDetail)); } appendFieldEnd(buffer, fieldName); } protected void appendInternal(StringBuffer buffer, String fieldName, Object value, boolean detail) { if (isRegistered(value) && !(value instanceof Number || value instanceof Boolean || value instanceof Character)) { appendCyclicObject(buffer, fieldName, value); return; } register(value); try { if (value instanceof Collection<?>) { if (detail) { appendDetail(buffer, fieldName, (Collection<?>) value); } else { appendSummarySize(buffer, fieldName, ((Collection<?>) value).size()); } } else if (value instanceof Map<?, ?>) { if (detail) { appendDetail(buffer, fieldName, (Map<?, ?>) value); } else { appendSummarySize(buffer, fieldName, ((Map<?, ?>) value).size()); } } else if (value instanceof long[]) { if (detail) { appendDetail(buffer, fieldName, (long[]) value); } else { appendSummary(buffer, fieldName, (long[]) value); } } else if (value instanceof int[]) { if (detail) { appendDetail(buffer, fieldName, (int[]) value); } else { appendSummary(buffer, fieldName, (int[]) value); } } else if (value instanceof short[]) { if (detail) { appendDetail(buffer, fieldName, (short[]) value); } else { appendSummary(buffer, fieldName, (short[]) value); } } else if (value instanceof byte[]) { if (detail) { appendDetail(buffer, fieldName, (byte[]) value); } else { appendSummary(buffer, fieldName, (byte[]) value); } } else if (value instanceof char[]) { if (detail) { appendDetail(buffer, fieldName, (char[]) value); } else { appendSummary(buffer, fieldName, (char[]) value); } } else if (value instanceof double[]) { if (detail) { appendDetail(buffer, fieldName, (double[]) value); } else { appendSummary(buffer, fieldName, (double[]) value); } } else if (value instanceof float[]) { if (detail) { appendDetail(buffer, fieldName, (float[]) value); } else { appendSummary(buffer, fieldName, (float[]) value); } } else if (value instanceof boolean[]) { if (detail) { appendDetail(buffer, fieldName, (boolean[]) value); } else { appendSummary(buffer, fieldName, (boolean[]) value); } } else if (value.getClass().isArray()) { if (detail) { appendDetail(buffer, fieldName, (Object[]) value); } else { appendSummary(buffer, fieldName, (Object[]) value); } } else { if (detail) { appendDetail(buffer, fieldName, value); } else { appendSummary(buffer, fieldName, value); } } } finally { unregister(value); } } protected void appendCyclicObject(StringBuffer buffer, String fieldName, Object value) { ObjectUtils.identityToString(buffer, value); } protected void appendDetail(StringBuffer buffer, String fieldName, Object value) { buffer.append(value); } protected void appendDetail(StringBuffer buffer, String fieldName, Collection<?> coll) { buffer.append(coll); } protected void appendDetail(StringBuffer buffer, String fieldName, Map<?, ?> map) { buffer.append(map); } protected void appendSummary(StringBuffer buffer, String fieldName, Object value) { buffer.append(summaryObjectStartText); buffer.append(getShortClassName(value.getClass())); buffer.append(summaryObjectEndText); } public void append(StringBuffer buffer, String fieldName, long value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, long value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, int value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, int value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, short value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, short value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, byte value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, byte value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, char value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, char value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, double value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, double value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, float value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, float value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, boolean value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, boolean value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, Object[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, Object[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { Object item = array[i]; if (i > 0) { buffer.append(arraySeparator); } if (item == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, item, arrayContentDetail); } } buffer.append(arrayEnd); } protected void reflectionAppendArrayDetail(StringBuffer buffer, String fieldName, Object array) { buffer.append(arrayStart); int length = Array.getLength(array); for (int i = 0; i < length; i++) { Object item = Array.get(array, i); if (i > 0) { buffer.append(arraySeparator); } if (item == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, item, arrayContentDetail); } } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, Object[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, long[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, long[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, long[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, int[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, int[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, int[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, short[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, short[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, short[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, byte[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, byte[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, byte[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, char[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, char[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, char[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, double[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, double[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, double[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, float[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, float[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, float[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, boolean[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, boolean[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, boolean[] array) { appendSummarySize(buffer, fieldName, array.length); } protected void appendClassName(StringBuffer buffer, Object object) { if (useClassName && object != null) { register(object); if (useShortClassName) { buffer.append(getShortClassName(object.getClass())); } else { buffer.append(object.getClass().getName()); } } } protected void appendIdentityHashCode(StringBuffer buffer, Object object) { if (this.isUseIdentityHashCode() && object!=null) { register(object); buffer.append('@'); buffer.append(Integer.toHexString(System.identityHashCode(object))); } } protected void appendContentStart(StringBuffer buffer) { buffer.append(contentStart); } protected void appendContentEnd(StringBuffer buffer) { buffer.append(contentEnd); } protected void appendNullText(StringBuffer buffer, String fieldName) { buffer.append(nullText); } protected void appendFieldSeparator(StringBuffer buffer) { buffer.append(fieldSeparator); } protected void appendFieldStart(StringBuffer buffer, String fieldName) { if (useFieldNames && fieldName != null) { buffer.append(fieldName); buffer.append(fieldNameValueSeparator); } } protected void appendFieldEnd(StringBuffer buffer, String fieldName) { appendFieldSeparator(buffer); } protected void appendSummarySize(StringBuffer buffer, String fieldName, int size) { buffer.append(sizeStartText); buffer.append(size); buffer.append(sizeEndText); } protected boolean isFullDetail(Boolean fullDetailRequest) { if (fullDetailRequest == null) { return defaultFullDetail; } return fullDetailRequest.booleanValue(); } protected String getShortClassName(Class<?> cls) { return ClassUtils.getShortClassName(cls); } protected boolean isUseClassName() { return useClassName; } protected void setUseClassName(boolean useClassName) { this.useClassName = useClassName; } protected boolean isUseShortClassName() { return useShortClassName; } protected void setUseShortClassName(boolean useShortClassName) { this.useShortClassName = useShortClassName; } protected boolean isUseIdentityHashCode() { return useIdentityHashCode; } protected void setUseIdentityHashCode(boolean useIdentityHashCode) { this.useIdentityHashCode = useIdentityHashCode; } protected boolean isUseFieldNames() { return useFieldNames; } protected void setUseFieldNames(boolean useFieldNames) { this.useFieldNames = useFieldNames; } protected boolean isDefaultFullDetail() { return defaultFullDetail; } protected void setDefaultFullDetail(boolean defaultFullDetail) { this.defaultFullDetail = defaultFullDetail; } protected boolean isArrayContentDetail() { return arrayContentDetail; } protected void setArrayContentDetail(boolean arrayContentDetail) { this.arrayContentDetail = arrayContentDetail; } protected String getArrayStart() { return arrayStart; } protected void setArrayStart(String arrayStart) { if (arrayStart == null) { arrayStart = \"\"; } this.arrayStart = arrayStart; } protected String getArrayEnd() { return arrayEnd; } protected void setArrayEnd(String arrayEnd) { if (arrayEnd == null) { arrayEnd = \"\"; } this.arrayEnd = arrayEnd; } protected String getArraySeparator() { return arraySeparator; } protected void setArraySeparator(String arraySeparator) { if (arraySeparator == null) { arraySeparator = \"\"; } this.arraySeparator = arraySeparator; } protected String getContentStart() { return contentStart; } protected void setContentStart(String contentStart) { if (contentStart == null) { contentStart = \"\"; } this.contentStart = contentStart; } protected String getContentEnd() { return contentEnd; } protected void setContentEnd(String contentEnd) { if (contentEnd == null) { contentEnd = \"\"; } this.contentEnd = contentEnd; } protected String getFieldNameValueSeparator() { return fieldNameValueSeparator; } protected void setFieldNameValueSeparator(String fieldNameValueSeparator) { if (fieldNameValueSeparator == null) { fieldNameValueSeparator = \"\"; } this.fieldNameValueSeparator = fieldNameValueSeparator; } protected String getFieldSeparator() { return fieldSeparator; } protected void setFieldSeparator(String fieldSeparator) { if (fieldSeparator == null) { fieldSeparator = \"\"; } this.fieldSeparator = fieldSeparator; } protected boolean isFieldSeparatorAtStart() { return fieldSeparatorAtStart; } protected void setFieldSeparatorAtStart(boolean fieldSeparatorAtStart) { this.fieldSeparatorAtStart = fieldSeparatorAtStart; } protected boolean isFieldSeparatorAtEnd() { return fieldSeparatorAtEnd; } protected void setFieldSeparatorAtEnd(boolean fieldSeparatorAtEnd) { this.fieldSeparatorAtEnd = fieldSeparatorAtEnd; } protected String getNullText() { return nullText; } protected void setNullText(String nullText) { if (nullText == null) { nullText = \"\"; } this.nullText = nullText; } protected String getSizeStartText() { return sizeStartText; } protected void setSizeStartText(String sizeStartText) { if (sizeStartText == null) { sizeStartText = \"\"; } this.sizeStartText = sizeStartText; } protected String getSizeEndText() { return sizeEndText; } protected void setSizeEndText(String sizeEndText) { if (sizeEndText == null) { sizeEndText = \"\"; } this.sizeEndText = sizeEndText; } protected String getSummaryObjectStartText() { return summaryObjectStartText; } protected void setSummaryObjectStartText(String summaryObjectStartText) { if (summaryObjectStartText == null) { summaryObjectStartText = \"\"; } this.summaryObjectStartText = summaryObjectStartText; } protected String getSummaryObjectEndText() { return summaryObjectEndText; } protected void setSummaryObjectEndText(String summaryObjectEndText) { if (summaryObjectEndText == null) { summaryObjectEndText = \"\"; } this.summaryObjectEndText = summaryObjectEndText; } private static final class DefaultToStringStyle extends ToStringStyle {\n", "projects": [{"project": "Lang", "id": 34}]}
{"method": "// Focal method:\npublic abstract class ToStringStyle implements Serializable { public void append(StringBuffer buffer, String fieldName, boolean value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected ToStringStyle(); void appendSuper(StringBuffer buffer, String superToString); void appendToString(StringBuffer buffer, String toString); void appendStart(StringBuffer buffer, Object object); void appendEnd(StringBuffer buffer, Object object); void append(StringBuffer buffer, String fieldName, Object value, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, long value); void append(StringBuffer buffer, String fieldName, int value); void append(StringBuffer buffer, String fieldName, short value); void append(StringBuffer buffer, String fieldName, byte value); void append(StringBuffer buffer, String fieldName, char value); void append(StringBuffer buffer, String fieldName, double value); void append(StringBuffer buffer, String fieldName, float value); void append(StringBuffer buffer, String fieldName, boolean value); void append(StringBuffer buffer, String fieldName, Object[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, long[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, int[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, short[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, byte[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, char[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, double[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, float[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, boolean[] array, Boolean fullDetail); static final ToStringStyle DEFAULT_STYLE; static final ToStringStyle MULTI_LINE_STYLE; static final ToStringStyle NO_FIELD_NAMES_STYLE; static final ToStringStyle SHORT_PREFIX_STYLE; static final ToStringStyle SIMPLE_STYLE; }\n// Avaible SubClasses:\n// public class StandardToStringStyle extends ToStringStyle {\n// public abstract class ToStringStyle implements Serializable { public static final ToStringStyle DEFAULT_STYLE = new DefaultToStringStyle(); public static final ToStringStyle MULTI_LINE_STYLE = new MultiLineToStringStyle(); public static final ToStringStyle NO_FIELD_NAMES_STYLE = new NoFieldNameToStringStyle(); public static final ToStringStyle SHORT_PREFIX_STYLE = new ShortPrefixToStringStyle(); public static final ToStringStyle SIMPLE_STYLE = new SimpleToStringStyle(); private static final ThreadLocal<WeakHashMap<Object, Object>> REGISTRY = new ThreadLocal<WeakHashMap<Object,Object>>(); static Map<Object, Object> getRegistry() { return REGISTRY.get() != null ? REGISTRY.get() : Collections.<Object, Object>emptyMap(); } static boolean isRegistered(Object value) { Map<Object, Object> m = getRegistry(); return m.containsKey(value); } static void register(Object value) { if (value != null) { WeakHashMap<Object, Object> m; synchronized (ToStringStyle.class) { m = REGISTRY.get(); if (m == null) { m = new WeakHashMap<Object, Object>(); REGISTRY.set(m); } } m.put(value, null); } } static void unregister(Object value) { if (value != null) { WeakHashMap<Object, Object> m; synchronized (ToStringStyle.class) { m = REGISTRY.get(); if (m != null) { m.remove(value); if (m.isEmpty()) { REGISTRY.remove(); } } } } } private boolean useFieldNames = true; private boolean useClassName = true; private boolean useShortClassName = false; private boolean useIdentityHashCode = true; private String contentStart = \"[\"; private String contentEnd = \"]\"; private String fieldNameValueSeparator = \"=\"; private boolean fieldSeparatorAtStart = false; private boolean fieldSeparatorAtEnd = false; private String fieldSeparator = \",\"; private String arrayStart = \"{\"; private String arraySeparator = \",\"; private boolean arrayContentDetail = true; private String arrayEnd = \"}\"; private boolean defaultFullDetail = true; private String nullText = \"<null>\"; private String sizeStartText = \"<size=\"; private String sizeEndText = \">\"; private String summaryObjectStartText = \"<\"; private String summaryObjectEndText = \">\"; protected ToStringStyle() { super(); } public void appendSuper(StringBuffer buffer, String superToString) { appendToString(buffer, superToString); } public void appendToString(StringBuffer buffer, String toString) { if (toString != null) { int pos1 = toString.indexOf(contentStart) + contentStart.length(); int pos2 = toString.lastIndexOf(contentEnd); if (pos1 != pos2 && pos1 >= 0 && pos2 >= 0) { String data = toString.substring(pos1, pos2); if (fieldSeparatorAtStart) { removeLastFieldSeparator(buffer); } buffer.append(data); appendFieldSeparator(buffer); } } } public void appendStart(StringBuffer buffer, Object object) { if (object != null) { appendClassName(buffer, object); appendIdentityHashCode(buffer, object); appendContentStart(buffer); if (fieldSeparatorAtStart) { appendFieldSeparator(buffer); } } } public void appendEnd(StringBuffer buffer, Object object) { if (this.fieldSeparatorAtEnd == false) { removeLastFieldSeparator(buffer); } appendContentEnd(buffer); unregister(object); } protected void removeLastFieldSeparator(StringBuffer buffer) { int len = buffer.length(); int sepLen = fieldSeparator.length(); if (len > 0 && sepLen > 0 && len >= sepLen) { boolean match = true; for (int i = 0; i < sepLen; i++) { if (buffer.charAt(len - 1 - i) != fieldSeparator.charAt(sepLen - 1 - i)) { match = false; break; } } if (match) { buffer.setLength(len - sepLen); } } } public void append(StringBuffer buffer, String fieldName, Object value, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (value == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, value, isFullDetail(fullDetail)); } appendFieldEnd(buffer, fieldName); } protected void appendInternal(StringBuffer buffer, String fieldName, Object value, boolean detail) { if (isRegistered(value) && !(value instanceof Number || value instanceof Boolean || value instanceof Character)) { appendCyclicObject(buffer, fieldName, value); return; } register(value); try { if (value instanceof Collection<?>) { if (detail) { appendDetail(buffer, fieldName, (Collection<?>) value); } else { appendSummarySize(buffer, fieldName, ((Collection<?>) value).size()); } } else if (value instanceof Map<?, ?>) { if (detail) { appendDetail(buffer, fieldName, (Map<?, ?>) value); } else { appendSummarySize(buffer, fieldName, ((Map<?, ?>) value).size()); } } else if (value instanceof long[]) { if (detail) { appendDetail(buffer, fieldName, (long[]) value); } else { appendSummary(buffer, fieldName, (long[]) value); } } else if (value instanceof int[]) { if (detail) { appendDetail(buffer, fieldName, (int[]) value); } else { appendSummary(buffer, fieldName, (int[]) value); } } else if (value instanceof short[]) { if (detail) { appendDetail(buffer, fieldName, (short[]) value); } else { appendSummary(buffer, fieldName, (short[]) value); } } else if (value instanceof byte[]) { if (detail) { appendDetail(buffer, fieldName, (byte[]) value); } else { appendSummary(buffer, fieldName, (byte[]) value); } } else if (value instanceof char[]) { if (detail) { appendDetail(buffer, fieldName, (char[]) value); } else { appendSummary(buffer, fieldName, (char[]) value); } } else if (value instanceof double[]) { if (detail) { appendDetail(buffer, fieldName, (double[]) value); } else { appendSummary(buffer, fieldName, (double[]) value); } } else if (value instanceof float[]) { if (detail) { appendDetail(buffer, fieldName, (float[]) value); } else { appendSummary(buffer, fieldName, (float[]) value); } } else if (value instanceof boolean[]) { if (detail) { appendDetail(buffer, fieldName, (boolean[]) value); } else { appendSummary(buffer, fieldName, (boolean[]) value); } } else if (value.getClass().isArray()) { if (detail) { appendDetail(buffer, fieldName, (Object[]) value); } else { appendSummary(buffer, fieldName, (Object[]) value); } } else { if (detail) { appendDetail(buffer, fieldName, value); } else { appendSummary(buffer, fieldName, value); } } } finally { unregister(value); } } protected void appendCyclicObject(StringBuffer buffer, String fieldName, Object value) { ObjectUtils.identityToString(buffer, value); } protected void appendDetail(StringBuffer buffer, String fieldName, Object value) { buffer.append(value); } protected void appendDetail(StringBuffer buffer, String fieldName, Collection<?> coll) { buffer.append(coll); } protected void appendDetail(StringBuffer buffer, String fieldName, Map<?, ?> map) { buffer.append(map); } protected void appendSummary(StringBuffer buffer, String fieldName, Object value) { buffer.append(summaryObjectStartText); buffer.append(getShortClassName(value.getClass())); buffer.append(summaryObjectEndText); } public void append(StringBuffer buffer, String fieldName, long value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, long value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, int value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, int value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, short value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, short value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, byte value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, byte value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, char value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, char value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, double value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, double value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, float value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, float value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, boolean value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, boolean value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, Object[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, Object[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { Object item = array[i]; if (i > 0) { buffer.append(arraySeparator); } if (item == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, item, arrayContentDetail); } } buffer.append(arrayEnd); } protected void reflectionAppendArrayDetail(StringBuffer buffer, String fieldName, Object array) { buffer.append(arrayStart); int length = Array.getLength(array); for (int i = 0; i < length; i++) { Object item = Array.get(array, i); if (i > 0) { buffer.append(arraySeparator); } if (item == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, item, arrayContentDetail); } } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, Object[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, long[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, long[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, long[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, int[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, int[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, int[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, short[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, short[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, short[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, byte[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, byte[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, byte[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, char[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, char[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, char[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, double[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, double[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, double[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, float[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, float[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, float[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, boolean[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, boolean[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, boolean[] array) { appendSummarySize(buffer, fieldName, array.length); } protected void appendClassName(StringBuffer buffer, Object object) { if (useClassName && object != null) { register(object); if (useShortClassName) { buffer.append(getShortClassName(object.getClass())); } else { buffer.append(object.getClass().getName()); } } } protected void appendIdentityHashCode(StringBuffer buffer, Object object) { if (this.isUseIdentityHashCode() && object!=null) { register(object); buffer.append('@'); buffer.append(Integer.toHexString(System.identityHashCode(object))); } } protected void appendContentStart(StringBuffer buffer) { buffer.append(contentStart); } protected void appendContentEnd(StringBuffer buffer) { buffer.append(contentEnd); } protected void appendNullText(StringBuffer buffer, String fieldName) { buffer.append(nullText); } protected void appendFieldSeparator(StringBuffer buffer) { buffer.append(fieldSeparator); } protected void appendFieldStart(StringBuffer buffer, String fieldName) { if (useFieldNames && fieldName != null) { buffer.append(fieldName); buffer.append(fieldNameValueSeparator); } } protected void appendFieldEnd(StringBuffer buffer, String fieldName) { appendFieldSeparator(buffer); } protected void appendSummarySize(StringBuffer buffer, String fieldName, int size) { buffer.append(sizeStartText); buffer.append(size); buffer.append(sizeEndText); } protected boolean isFullDetail(Boolean fullDetailRequest) { if (fullDetailRequest == null) { return defaultFullDetail; } return fullDetailRequest.booleanValue(); } protected String getShortClassName(Class<?> cls) { return ClassUtils.getShortClassName(cls); } protected boolean isUseClassName() { return useClassName; } protected void setUseClassName(boolean useClassName) { this.useClassName = useClassName; } protected boolean isUseShortClassName() { return useShortClassName; } protected void setUseShortClassName(boolean useShortClassName) { this.useShortClassName = useShortClassName; } protected boolean isUseIdentityHashCode() { return useIdentityHashCode; } protected void setUseIdentityHashCode(boolean useIdentityHashCode) { this.useIdentityHashCode = useIdentityHashCode; } protected boolean isUseFieldNames() { return useFieldNames; } protected void setUseFieldNames(boolean useFieldNames) { this.useFieldNames = useFieldNames; } protected boolean isDefaultFullDetail() { return defaultFullDetail; } protected void setDefaultFullDetail(boolean defaultFullDetail) { this.defaultFullDetail = defaultFullDetail; } protected boolean isArrayContentDetail() { return arrayContentDetail; } protected void setArrayContentDetail(boolean arrayContentDetail) { this.arrayContentDetail = arrayContentDetail; } protected String getArrayStart() { return arrayStart; } protected void setArrayStart(String arrayStart) { if (arrayStart == null) { arrayStart = \"\"; } this.arrayStart = arrayStart; } protected String getArrayEnd() { return arrayEnd; } protected void setArrayEnd(String arrayEnd) { if (arrayEnd == null) { arrayEnd = \"\"; } this.arrayEnd = arrayEnd; } protected String getArraySeparator() { return arraySeparator; } protected void setArraySeparator(String arraySeparator) { if (arraySeparator == null) { arraySeparator = \"\"; } this.arraySeparator = arraySeparator; } protected String getContentStart() { return contentStart; } protected void setContentStart(String contentStart) { if (contentStart == null) { contentStart = \"\"; } this.contentStart = contentStart; } protected String getContentEnd() { return contentEnd; } protected void setContentEnd(String contentEnd) { if (contentEnd == null) { contentEnd = \"\"; } this.contentEnd = contentEnd; } protected String getFieldNameValueSeparator() { return fieldNameValueSeparator; } protected void setFieldNameValueSeparator(String fieldNameValueSeparator) { if (fieldNameValueSeparator == null) { fieldNameValueSeparator = \"\"; } this.fieldNameValueSeparator = fieldNameValueSeparator; } protected String getFieldSeparator() { return fieldSeparator; } protected void setFieldSeparator(String fieldSeparator) { if (fieldSeparator == null) { fieldSeparator = \"\"; } this.fieldSeparator = fieldSeparator; } protected boolean isFieldSeparatorAtStart() { return fieldSeparatorAtStart; } protected void setFieldSeparatorAtStart(boolean fieldSeparatorAtStart) { this.fieldSeparatorAtStart = fieldSeparatorAtStart; } protected boolean isFieldSeparatorAtEnd() { return fieldSeparatorAtEnd; } protected void setFieldSeparatorAtEnd(boolean fieldSeparatorAtEnd) { this.fieldSeparatorAtEnd = fieldSeparatorAtEnd; } protected String getNullText() { return nullText; } protected void setNullText(String nullText) { if (nullText == null) { nullText = \"\"; } this.nullText = nullText; } protected String getSizeStartText() { return sizeStartText; } protected void setSizeStartText(String sizeStartText) { if (sizeStartText == null) { sizeStartText = \"\"; } this.sizeStartText = sizeStartText; } protected String getSizeEndText() { return sizeEndText; } protected void setSizeEndText(String sizeEndText) { if (sizeEndText == null) { sizeEndText = \"\"; } this.sizeEndText = sizeEndText; } protected String getSummaryObjectStartText() { return summaryObjectStartText; } protected void setSummaryObjectStartText(String summaryObjectStartText) { if (summaryObjectStartText == null) { summaryObjectStartText = \"\"; } this.summaryObjectStartText = summaryObjectStartText; } protected String getSummaryObjectEndText() { return summaryObjectEndText; } protected void setSummaryObjectEndText(String summaryObjectEndText) { if (summaryObjectEndText == null) { summaryObjectEndText = \"\"; } this.summaryObjectEndText = summaryObjectEndText; } private static final class DefaultToStringStyle extends ToStringStyle {\n", "projects": [{"project": "Lang", "id": 34}]}
{"method": "// Focal method:\npublic abstract class ToStringStyle implements Serializable { public void append(StringBuffer buffer, String fieldName, char value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected ToStringStyle(); void appendSuper(StringBuffer buffer, String superToString); void appendToString(StringBuffer buffer, String toString); void appendStart(StringBuffer buffer, Object object); void appendEnd(StringBuffer buffer, Object object); void append(StringBuffer buffer, String fieldName, Object value, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, long value); void append(StringBuffer buffer, String fieldName, int value); void append(StringBuffer buffer, String fieldName, short value); void append(StringBuffer buffer, String fieldName, byte value); void append(StringBuffer buffer, String fieldName, char value); void append(StringBuffer buffer, String fieldName, double value); void append(StringBuffer buffer, String fieldName, float value); void append(StringBuffer buffer, String fieldName, boolean value); void append(StringBuffer buffer, String fieldName, Object[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, long[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, int[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, short[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, byte[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, char[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, double[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, float[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, boolean[] array, Boolean fullDetail); static final ToStringStyle DEFAULT_STYLE; static final ToStringStyle MULTI_LINE_STYLE; static final ToStringStyle NO_FIELD_NAMES_STYLE; static final ToStringStyle SHORT_PREFIX_STYLE; static final ToStringStyle SIMPLE_STYLE; }\n// Avaible SubClasses:\n// public class StandardToStringStyle extends ToStringStyle {\n// public abstract class ToStringStyle implements Serializable { public static final ToStringStyle DEFAULT_STYLE = new DefaultToStringStyle(); public static final ToStringStyle MULTI_LINE_STYLE = new MultiLineToStringStyle(); public static final ToStringStyle NO_FIELD_NAMES_STYLE = new NoFieldNameToStringStyle(); public static final ToStringStyle SHORT_PREFIX_STYLE = new ShortPrefixToStringStyle(); public static final ToStringStyle SIMPLE_STYLE = new SimpleToStringStyle(); private static final ThreadLocal<WeakHashMap<Object, Object>> REGISTRY = new ThreadLocal<WeakHashMap<Object,Object>>(); static Map<Object, Object> getRegistry() { return REGISTRY.get() != null ? REGISTRY.get() : Collections.<Object, Object>emptyMap(); } static boolean isRegistered(Object value) { Map<Object, Object> m = getRegistry(); return m.containsKey(value); } static void register(Object value) { if (value != null) { WeakHashMap<Object, Object> m; synchronized (ToStringStyle.class) { m = REGISTRY.get(); if (m == null) { m = new WeakHashMap<Object, Object>(); REGISTRY.set(m); } } m.put(value, null); } } static void unregister(Object value) { if (value != null) { WeakHashMap<Object, Object> m; synchronized (ToStringStyle.class) { m = REGISTRY.get(); if (m != null) { m.remove(value); if (m.isEmpty()) { REGISTRY.remove(); } } } } } private boolean useFieldNames = true; private boolean useClassName = true; private boolean useShortClassName = false; private boolean useIdentityHashCode = true; private String contentStart = \"[\"; private String contentEnd = \"]\"; private String fieldNameValueSeparator = \"=\"; private boolean fieldSeparatorAtStart = false; private boolean fieldSeparatorAtEnd = false; private String fieldSeparator = \",\"; private String arrayStart = \"{\"; private String arraySeparator = \",\"; private boolean arrayContentDetail = true; private String arrayEnd = \"}\"; private boolean defaultFullDetail = true; private String nullText = \"<null>\"; private String sizeStartText = \"<size=\"; private String sizeEndText = \">\"; private String summaryObjectStartText = \"<\"; private String summaryObjectEndText = \">\"; protected ToStringStyle() { super(); } public void appendSuper(StringBuffer buffer, String superToString) { appendToString(buffer, superToString); } public void appendToString(StringBuffer buffer, String toString) { if (toString != null) { int pos1 = toString.indexOf(contentStart) + contentStart.length(); int pos2 = toString.lastIndexOf(contentEnd); if (pos1 != pos2 && pos1 >= 0 && pos2 >= 0) { String data = toString.substring(pos1, pos2); if (fieldSeparatorAtStart) { removeLastFieldSeparator(buffer); } buffer.append(data); appendFieldSeparator(buffer); } } } public void appendStart(StringBuffer buffer, Object object) { if (object != null) { appendClassName(buffer, object); appendIdentityHashCode(buffer, object); appendContentStart(buffer); if (fieldSeparatorAtStart) { appendFieldSeparator(buffer); } } } public void appendEnd(StringBuffer buffer, Object object) { if (this.fieldSeparatorAtEnd == false) { removeLastFieldSeparator(buffer); } appendContentEnd(buffer); unregister(object); } protected void removeLastFieldSeparator(StringBuffer buffer) { int len = buffer.length(); int sepLen = fieldSeparator.length(); if (len > 0 && sepLen > 0 && len >= sepLen) { boolean match = true; for (int i = 0; i < sepLen; i++) { if (buffer.charAt(len - 1 - i) != fieldSeparator.charAt(sepLen - 1 - i)) { match = false; break; } } if (match) { buffer.setLength(len - sepLen); } } } public void append(StringBuffer buffer, String fieldName, Object value, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (value == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, value, isFullDetail(fullDetail)); } appendFieldEnd(buffer, fieldName); } protected void appendInternal(StringBuffer buffer, String fieldName, Object value, boolean detail) { if (isRegistered(value) && !(value instanceof Number || value instanceof Boolean || value instanceof Character)) { appendCyclicObject(buffer, fieldName, value); return; } register(value); try { if (value instanceof Collection<?>) { if (detail) { appendDetail(buffer, fieldName, (Collection<?>) value); } else { appendSummarySize(buffer, fieldName, ((Collection<?>) value).size()); } } else if (value instanceof Map<?, ?>) { if (detail) { appendDetail(buffer, fieldName, (Map<?, ?>) value); } else { appendSummarySize(buffer, fieldName, ((Map<?, ?>) value).size()); } } else if (value instanceof long[]) { if (detail) { appendDetail(buffer, fieldName, (long[]) value); } else { appendSummary(buffer, fieldName, (long[]) value); } } else if (value instanceof int[]) { if (detail) { appendDetail(buffer, fieldName, (int[]) value); } else { appendSummary(buffer, fieldName, (int[]) value); } } else if (value instanceof short[]) { if (detail) { appendDetail(buffer, fieldName, (short[]) value); } else { appendSummary(buffer, fieldName, (short[]) value); } } else if (value instanceof byte[]) { if (detail) { appendDetail(buffer, fieldName, (byte[]) value); } else { appendSummary(buffer, fieldName, (byte[]) value); } } else if (value instanceof char[]) { if (detail) { appendDetail(buffer, fieldName, (char[]) value); } else { appendSummary(buffer, fieldName, (char[]) value); } } else if (value instanceof double[]) { if (detail) { appendDetail(buffer, fieldName, (double[]) value); } else { appendSummary(buffer, fieldName, (double[]) value); } } else if (value instanceof float[]) { if (detail) { appendDetail(buffer, fieldName, (float[]) value); } else { appendSummary(buffer, fieldName, (float[]) value); } } else if (value instanceof boolean[]) { if (detail) { appendDetail(buffer, fieldName, (boolean[]) value); } else { appendSummary(buffer, fieldName, (boolean[]) value); } } else if (value.getClass().isArray()) { if (detail) { appendDetail(buffer, fieldName, (Object[]) value); } else { appendSummary(buffer, fieldName, (Object[]) value); } } else { if (detail) { appendDetail(buffer, fieldName, value); } else { appendSummary(buffer, fieldName, value); } } } finally { unregister(value); } } protected void appendCyclicObject(StringBuffer buffer, String fieldName, Object value) { ObjectUtils.identityToString(buffer, value); } protected void appendDetail(StringBuffer buffer, String fieldName, Object value) { buffer.append(value); } protected void appendDetail(StringBuffer buffer, String fieldName, Collection<?> coll) { buffer.append(coll); } protected void appendDetail(StringBuffer buffer, String fieldName, Map<?, ?> map) { buffer.append(map); } protected void appendSummary(StringBuffer buffer, String fieldName, Object value) { buffer.append(summaryObjectStartText); buffer.append(getShortClassName(value.getClass())); buffer.append(summaryObjectEndText); } public void append(StringBuffer buffer, String fieldName, long value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, long value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, int value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, int value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, short value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, short value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, byte value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, byte value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, char value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, char value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, double value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, double value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, float value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, float value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, boolean value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, boolean value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, Object[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, Object[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { Object item = array[i]; if (i > 0) { buffer.append(arraySeparator); } if (item == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, item, arrayContentDetail); } } buffer.append(arrayEnd); } protected void reflectionAppendArrayDetail(StringBuffer buffer, String fieldName, Object array) { buffer.append(arrayStart); int length = Array.getLength(array); for (int i = 0; i < length; i++) { Object item = Array.get(array, i); if (i > 0) { buffer.append(arraySeparator); } if (item == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, item, arrayContentDetail); } } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, Object[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, long[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, long[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, long[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, int[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, int[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, int[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, short[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, short[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, short[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, byte[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, byte[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, byte[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, char[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, char[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, char[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, double[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, double[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, double[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, float[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, float[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, float[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, boolean[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, boolean[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, boolean[] array) { appendSummarySize(buffer, fieldName, array.length); } protected void appendClassName(StringBuffer buffer, Object object) { if (useClassName && object != null) { register(object); if (useShortClassName) { buffer.append(getShortClassName(object.getClass())); } else { buffer.append(object.getClass().getName()); } } } protected void appendIdentityHashCode(StringBuffer buffer, Object object) { if (this.isUseIdentityHashCode() && object!=null) { register(object); buffer.append('@'); buffer.append(Integer.toHexString(System.identityHashCode(object))); } } protected void appendContentStart(StringBuffer buffer) { buffer.append(contentStart); } protected void appendContentEnd(StringBuffer buffer) { buffer.append(contentEnd); } protected void appendNullText(StringBuffer buffer, String fieldName) { buffer.append(nullText); } protected void appendFieldSeparator(StringBuffer buffer) { buffer.append(fieldSeparator); } protected void appendFieldStart(StringBuffer buffer, String fieldName) { if (useFieldNames && fieldName != null) { buffer.append(fieldName); buffer.append(fieldNameValueSeparator); } } protected void appendFieldEnd(StringBuffer buffer, String fieldName) { appendFieldSeparator(buffer); } protected void appendSummarySize(StringBuffer buffer, String fieldName, int size) { buffer.append(sizeStartText); buffer.append(size); buffer.append(sizeEndText); } protected boolean isFullDetail(Boolean fullDetailRequest) { if (fullDetailRequest == null) { return defaultFullDetail; } return fullDetailRequest.booleanValue(); } protected String getShortClassName(Class<?> cls) { return ClassUtils.getShortClassName(cls); } protected boolean isUseClassName() { return useClassName; } protected void setUseClassName(boolean useClassName) { this.useClassName = useClassName; } protected boolean isUseShortClassName() { return useShortClassName; } protected void setUseShortClassName(boolean useShortClassName) { this.useShortClassName = useShortClassName; } protected boolean isUseIdentityHashCode() { return useIdentityHashCode; } protected void setUseIdentityHashCode(boolean useIdentityHashCode) { this.useIdentityHashCode = useIdentityHashCode; } protected boolean isUseFieldNames() { return useFieldNames; } protected void setUseFieldNames(boolean useFieldNames) { this.useFieldNames = useFieldNames; } protected boolean isDefaultFullDetail() { return defaultFullDetail; } protected void setDefaultFullDetail(boolean defaultFullDetail) { this.defaultFullDetail = defaultFullDetail; } protected boolean isArrayContentDetail() { return arrayContentDetail; } protected void setArrayContentDetail(boolean arrayContentDetail) { this.arrayContentDetail = arrayContentDetail; } protected String getArrayStart() { return arrayStart; } protected void setArrayStart(String arrayStart) { if (arrayStart == null) { arrayStart = \"\"; } this.arrayStart = arrayStart; } protected String getArrayEnd() { return arrayEnd; } protected void setArrayEnd(String arrayEnd) { if (arrayEnd == null) { arrayEnd = \"\"; } this.arrayEnd = arrayEnd; } protected String getArraySeparator() { return arraySeparator; } protected void setArraySeparator(String arraySeparator) { if (arraySeparator == null) { arraySeparator = \"\"; } this.arraySeparator = arraySeparator; } protected String getContentStart() { return contentStart; } protected void setContentStart(String contentStart) { if (contentStart == null) { contentStart = \"\"; } this.contentStart = contentStart; } protected String getContentEnd() { return contentEnd; } protected void setContentEnd(String contentEnd) { if (contentEnd == null) { contentEnd = \"\"; } this.contentEnd = contentEnd; } protected String getFieldNameValueSeparator() { return fieldNameValueSeparator; } protected void setFieldNameValueSeparator(String fieldNameValueSeparator) { if (fieldNameValueSeparator == null) { fieldNameValueSeparator = \"\"; } this.fieldNameValueSeparator = fieldNameValueSeparator; } protected String getFieldSeparator() { return fieldSeparator; } protected void setFieldSeparator(String fieldSeparator) { if (fieldSeparator == null) { fieldSeparator = \"\"; } this.fieldSeparator = fieldSeparator; } protected boolean isFieldSeparatorAtStart() { return fieldSeparatorAtStart; } protected void setFieldSeparatorAtStart(boolean fieldSeparatorAtStart) { this.fieldSeparatorAtStart = fieldSeparatorAtStart; } protected boolean isFieldSeparatorAtEnd() { return fieldSeparatorAtEnd; } protected void setFieldSeparatorAtEnd(boolean fieldSeparatorAtEnd) { this.fieldSeparatorAtEnd = fieldSeparatorAtEnd; } protected String getNullText() { return nullText; } protected void setNullText(String nullText) { if (nullText == null) { nullText = \"\"; } this.nullText = nullText; } protected String getSizeStartText() { return sizeStartText; } protected void setSizeStartText(String sizeStartText) { if (sizeStartText == null) { sizeStartText = \"\"; } this.sizeStartText = sizeStartText; } protected String getSizeEndText() { return sizeEndText; } protected void setSizeEndText(String sizeEndText) { if (sizeEndText == null) { sizeEndText = \"\"; } this.sizeEndText = sizeEndText; } protected String getSummaryObjectStartText() { return summaryObjectStartText; } protected void setSummaryObjectStartText(String summaryObjectStartText) { if (summaryObjectStartText == null) { summaryObjectStartText = \"\"; } this.summaryObjectStartText = summaryObjectStartText; } protected String getSummaryObjectEndText() { return summaryObjectEndText; } protected void setSummaryObjectEndText(String summaryObjectEndText) { if (summaryObjectEndText == null) { summaryObjectEndText = \"\"; } this.summaryObjectEndText = summaryObjectEndText; } private static final class DefaultToStringStyle extends ToStringStyle {\n", "projects": [{"project": "Lang", "id": 34}]}
{"method": "// Focal method:\npublic abstract class ToStringStyle implements Serializable { public void append(StringBuffer buffer, String fieldName, byte value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected ToStringStyle(); void appendSuper(StringBuffer buffer, String superToString); void appendToString(StringBuffer buffer, String toString); void appendStart(StringBuffer buffer, Object object); void appendEnd(StringBuffer buffer, Object object); void append(StringBuffer buffer, String fieldName, Object value, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, long value); void append(StringBuffer buffer, String fieldName, int value); void append(StringBuffer buffer, String fieldName, short value); void append(StringBuffer buffer, String fieldName, byte value); void append(StringBuffer buffer, String fieldName, char value); void append(StringBuffer buffer, String fieldName, double value); void append(StringBuffer buffer, String fieldName, float value); void append(StringBuffer buffer, String fieldName, boolean value); void append(StringBuffer buffer, String fieldName, Object[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, long[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, int[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, short[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, byte[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, char[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, double[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, float[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, boolean[] array, Boolean fullDetail); static final ToStringStyle DEFAULT_STYLE; static final ToStringStyle MULTI_LINE_STYLE; static final ToStringStyle NO_FIELD_NAMES_STYLE; static final ToStringStyle SHORT_PREFIX_STYLE; static final ToStringStyle SIMPLE_STYLE; }\n// Avaible SubClasses:\n// public class StandardToStringStyle extends ToStringStyle {\n// public abstract class ToStringStyle implements Serializable { public static final ToStringStyle DEFAULT_STYLE = new DefaultToStringStyle(); public static final ToStringStyle MULTI_LINE_STYLE = new MultiLineToStringStyle(); public static final ToStringStyle NO_FIELD_NAMES_STYLE = new NoFieldNameToStringStyle(); public static final ToStringStyle SHORT_PREFIX_STYLE = new ShortPrefixToStringStyle(); public static final ToStringStyle SIMPLE_STYLE = new SimpleToStringStyle(); private static final ThreadLocal<WeakHashMap<Object, Object>> REGISTRY = new ThreadLocal<WeakHashMap<Object,Object>>(); static Map<Object, Object> getRegistry() { return REGISTRY.get() != null ? REGISTRY.get() : Collections.<Object, Object>emptyMap(); } static boolean isRegistered(Object value) { Map<Object, Object> m = getRegistry(); return m.containsKey(value); } static void register(Object value) { if (value != null) { WeakHashMap<Object, Object> m; synchronized (ToStringStyle.class) { m = REGISTRY.get(); if (m == null) { m = new WeakHashMap<Object, Object>(); REGISTRY.set(m); } } m.put(value, null); } } static void unregister(Object value) { if (value != null) { WeakHashMap<Object, Object> m; synchronized (ToStringStyle.class) { m = REGISTRY.get(); if (m != null) { m.remove(value); if (m.isEmpty()) { REGISTRY.remove(); } } } } } private boolean useFieldNames = true; private boolean useClassName = true; private boolean useShortClassName = false; private boolean useIdentityHashCode = true; private String contentStart = \"[\"; private String contentEnd = \"]\"; private String fieldNameValueSeparator = \"=\"; private boolean fieldSeparatorAtStart = false; private boolean fieldSeparatorAtEnd = false; private String fieldSeparator = \",\"; private String arrayStart = \"{\"; private String arraySeparator = \",\"; private boolean arrayContentDetail = true; private String arrayEnd = \"}\"; private boolean defaultFullDetail = true; private String nullText = \"<null>\"; private String sizeStartText = \"<size=\"; private String sizeEndText = \">\"; private String summaryObjectStartText = \"<\"; private String summaryObjectEndText = \">\"; protected ToStringStyle() { super(); } public void appendSuper(StringBuffer buffer, String superToString) { appendToString(buffer, superToString); } public void appendToString(StringBuffer buffer, String toString) { if (toString != null) { int pos1 = toString.indexOf(contentStart) + contentStart.length(); int pos2 = toString.lastIndexOf(contentEnd); if (pos1 != pos2 && pos1 >= 0 && pos2 >= 0) { String data = toString.substring(pos1, pos2); if (fieldSeparatorAtStart) { removeLastFieldSeparator(buffer); } buffer.append(data); appendFieldSeparator(buffer); } } } public void appendStart(StringBuffer buffer, Object object) { if (object != null) { appendClassName(buffer, object); appendIdentityHashCode(buffer, object); appendContentStart(buffer); if (fieldSeparatorAtStart) { appendFieldSeparator(buffer); } } } public void appendEnd(StringBuffer buffer, Object object) { if (this.fieldSeparatorAtEnd == false) { removeLastFieldSeparator(buffer); } appendContentEnd(buffer); unregister(object); } protected void removeLastFieldSeparator(StringBuffer buffer) { int len = buffer.length(); int sepLen = fieldSeparator.length(); if (len > 0 && sepLen > 0 && len >= sepLen) { boolean match = true; for (int i = 0; i < sepLen; i++) { if (buffer.charAt(len - 1 - i) != fieldSeparator.charAt(sepLen - 1 - i)) { match = false; break; } } if (match) { buffer.setLength(len - sepLen); } } } public void append(StringBuffer buffer, String fieldName, Object value, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (value == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, value, isFullDetail(fullDetail)); } appendFieldEnd(buffer, fieldName); } protected void appendInternal(StringBuffer buffer, String fieldName, Object value, boolean detail) { if (isRegistered(value) && !(value instanceof Number || value instanceof Boolean || value instanceof Character)) { appendCyclicObject(buffer, fieldName, value); return; } register(value); try { if (value instanceof Collection<?>) { if (detail) { appendDetail(buffer, fieldName, (Collection<?>) value); } else { appendSummarySize(buffer, fieldName, ((Collection<?>) value).size()); } } else if (value instanceof Map<?, ?>) { if (detail) { appendDetail(buffer, fieldName, (Map<?, ?>) value); } else { appendSummarySize(buffer, fieldName, ((Map<?, ?>) value).size()); } } else if (value instanceof long[]) { if (detail) { appendDetail(buffer, fieldName, (long[]) value); } else { appendSummary(buffer, fieldName, (long[]) value); } } else if (value instanceof int[]) { if (detail) { appendDetail(buffer, fieldName, (int[]) value); } else { appendSummary(buffer, fieldName, (int[]) value); } } else if (value instanceof short[]) { if (detail) { appendDetail(buffer, fieldName, (short[]) value); } else { appendSummary(buffer, fieldName, (short[]) value); } } else if (value instanceof byte[]) { if (detail) { appendDetail(buffer, fieldName, (byte[]) value); } else { appendSummary(buffer, fieldName, (byte[]) value); } } else if (value instanceof char[]) { if (detail) { appendDetail(buffer, fieldName, (char[]) value); } else { appendSummary(buffer, fieldName, (char[]) value); } } else if (value instanceof double[]) { if (detail) { appendDetail(buffer, fieldName, (double[]) value); } else { appendSummary(buffer, fieldName, (double[]) value); } } else if (value instanceof float[]) { if (detail) { appendDetail(buffer, fieldName, (float[]) value); } else { appendSummary(buffer, fieldName, (float[]) value); } } else if (value instanceof boolean[]) { if (detail) { appendDetail(buffer, fieldName, (boolean[]) value); } else { appendSummary(buffer, fieldName, (boolean[]) value); } } else if (value.getClass().isArray()) { if (detail) { appendDetail(buffer, fieldName, (Object[]) value); } else { appendSummary(buffer, fieldName, (Object[]) value); } } else { if (detail) { appendDetail(buffer, fieldName, value); } else { appendSummary(buffer, fieldName, value); } } } finally { unregister(value); } } protected void appendCyclicObject(StringBuffer buffer, String fieldName, Object value) { ObjectUtils.identityToString(buffer, value); } protected void appendDetail(StringBuffer buffer, String fieldName, Object value) { buffer.append(value); } protected void appendDetail(StringBuffer buffer, String fieldName, Collection<?> coll) { buffer.append(coll); } protected void appendDetail(StringBuffer buffer, String fieldName, Map<?, ?> map) { buffer.append(map); } protected void appendSummary(StringBuffer buffer, String fieldName, Object value) { buffer.append(summaryObjectStartText); buffer.append(getShortClassName(value.getClass())); buffer.append(summaryObjectEndText); } public void append(StringBuffer buffer, String fieldName, long value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, long value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, int value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, int value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, short value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, short value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, byte value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, byte value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, char value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, char value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, double value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, double value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, float value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, float value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, boolean value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, boolean value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, Object[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, Object[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { Object item = array[i]; if (i > 0) { buffer.append(arraySeparator); } if (item == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, item, arrayContentDetail); } } buffer.append(arrayEnd); } protected void reflectionAppendArrayDetail(StringBuffer buffer, String fieldName, Object array) { buffer.append(arrayStart); int length = Array.getLength(array); for (int i = 0; i < length; i++) { Object item = Array.get(array, i); if (i > 0) { buffer.append(arraySeparator); } if (item == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, item, arrayContentDetail); } } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, Object[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, long[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, long[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, long[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, int[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, int[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, int[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, short[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, short[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, short[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, byte[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, byte[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, byte[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, char[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, char[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, char[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, double[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, double[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, double[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, float[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, float[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, float[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, boolean[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, boolean[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, boolean[] array) { appendSummarySize(buffer, fieldName, array.length); } protected void appendClassName(StringBuffer buffer, Object object) { if (useClassName && object != null) { register(object); if (useShortClassName) { buffer.append(getShortClassName(object.getClass())); } else { buffer.append(object.getClass().getName()); } } } protected void appendIdentityHashCode(StringBuffer buffer, Object object) { if (this.isUseIdentityHashCode() && object!=null) { register(object); buffer.append('@'); buffer.append(Integer.toHexString(System.identityHashCode(object))); } } protected void appendContentStart(StringBuffer buffer) { buffer.append(contentStart); } protected void appendContentEnd(StringBuffer buffer) { buffer.append(contentEnd); } protected void appendNullText(StringBuffer buffer, String fieldName) { buffer.append(nullText); } protected void appendFieldSeparator(StringBuffer buffer) { buffer.append(fieldSeparator); } protected void appendFieldStart(StringBuffer buffer, String fieldName) { if (useFieldNames && fieldName != null) { buffer.append(fieldName); buffer.append(fieldNameValueSeparator); } } protected void appendFieldEnd(StringBuffer buffer, String fieldName) { appendFieldSeparator(buffer); } protected void appendSummarySize(StringBuffer buffer, String fieldName, int size) { buffer.append(sizeStartText); buffer.append(size); buffer.append(sizeEndText); } protected boolean isFullDetail(Boolean fullDetailRequest) { if (fullDetailRequest == null) { return defaultFullDetail; } return fullDetailRequest.booleanValue(); } protected String getShortClassName(Class<?> cls) { return ClassUtils.getShortClassName(cls); } protected boolean isUseClassName() { return useClassName; } protected void setUseClassName(boolean useClassName) { this.useClassName = useClassName; } protected boolean isUseShortClassName() { return useShortClassName; } protected void setUseShortClassName(boolean useShortClassName) { this.useShortClassName = useShortClassName; } protected boolean isUseIdentityHashCode() { return useIdentityHashCode; } protected void setUseIdentityHashCode(boolean useIdentityHashCode) { this.useIdentityHashCode = useIdentityHashCode; } protected boolean isUseFieldNames() { return useFieldNames; } protected void setUseFieldNames(boolean useFieldNames) { this.useFieldNames = useFieldNames; } protected boolean isDefaultFullDetail() { return defaultFullDetail; } protected void setDefaultFullDetail(boolean defaultFullDetail) { this.defaultFullDetail = defaultFullDetail; } protected boolean isArrayContentDetail() { return arrayContentDetail; } protected void setArrayContentDetail(boolean arrayContentDetail) { this.arrayContentDetail = arrayContentDetail; } protected String getArrayStart() { return arrayStart; } protected void setArrayStart(String arrayStart) { if (arrayStart == null) { arrayStart = \"\"; } this.arrayStart = arrayStart; } protected String getArrayEnd() { return arrayEnd; } protected void setArrayEnd(String arrayEnd) { if (arrayEnd == null) { arrayEnd = \"\"; } this.arrayEnd = arrayEnd; } protected String getArraySeparator() { return arraySeparator; } protected void setArraySeparator(String arraySeparator) { if (arraySeparator == null) { arraySeparator = \"\"; } this.arraySeparator = arraySeparator; } protected String getContentStart() { return contentStart; } protected void setContentStart(String contentStart) { if (contentStart == null) { contentStart = \"\"; } this.contentStart = contentStart; } protected String getContentEnd() { return contentEnd; } protected void setContentEnd(String contentEnd) { if (contentEnd == null) { contentEnd = \"\"; } this.contentEnd = contentEnd; } protected String getFieldNameValueSeparator() { return fieldNameValueSeparator; } protected void setFieldNameValueSeparator(String fieldNameValueSeparator) { if (fieldNameValueSeparator == null) { fieldNameValueSeparator = \"\"; } this.fieldNameValueSeparator = fieldNameValueSeparator; } protected String getFieldSeparator() { return fieldSeparator; } protected void setFieldSeparator(String fieldSeparator) { if (fieldSeparator == null) { fieldSeparator = \"\"; } this.fieldSeparator = fieldSeparator; } protected boolean isFieldSeparatorAtStart() { return fieldSeparatorAtStart; } protected void setFieldSeparatorAtStart(boolean fieldSeparatorAtStart) { this.fieldSeparatorAtStart = fieldSeparatorAtStart; } protected boolean isFieldSeparatorAtEnd() { return fieldSeparatorAtEnd; } protected void setFieldSeparatorAtEnd(boolean fieldSeparatorAtEnd) { this.fieldSeparatorAtEnd = fieldSeparatorAtEnd; } protected String getNullText() { return nullText; } protected void setNullText(String nullText) { if (nullText == null) { nullText = \"\"; } this.nullText = nullText; } protected String getSizeStartText() { return sizeStartText; } protected void setSizeStartText(String sizeStartText) { if (sizeStartText == null) { sizeStartText = \"\"; } this.sizeStartText = sizeStartText; } protected String getSizeEndText() { return sizeEndText; } protected void setSizeEndText(String sizeEndText) { if (sizeEndText == null) { sizeEndText = \"\"; } this.sizeEndText = sizeEndText; } protected String getSummaryObjectStartText() { return summaryObjectStartText; } protected void setSummaryObjectStartText(String summaryObjectStartText) { if (summaryObjectStartText == null) { summaryObjectStartText = \"\"; } this.summaryObjectStartText = summaryObjectStartText; } protected String getSummaryObjectEndText() { return summaryObjectEndText; } protected void setSummaryObjectEndText(String summaryObjectEndText) { if (summaryObjectEndText == null) { summaryObjectEndText = \"\"; } this.summaryObjectEndText = summaryObjectEndText; } private static final class DefaultToStringStyle extends ToStringStyle {\n", "projects": [{"project": "Lang", "id": 34}]}
{"method": "// Focal method:\npublic abstract class ToStringStyle implements Serializable { public void append(StringBuffer buffer, String fieldName, int value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected ToStringStyle(); void appendSuper(StringBuffer buffer, String superToString); void appendToString(StringBuffer buffer, String toString); void appendStart(StringBuffer buffer, Object object); void appendEnd(StringBuffer buffer, Object object); void append(StringBuffer buffer, String fieldName, Object value, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, long value); void append(StringBuffer buffer, String fieldName, int value); void append(StringBuffer buffer, String fieldName, short value); void append(StringBuffer buffer, String fieldName, byte value); void append(StringBuffer buffer, String fieldName, char value); void append(StringBuffer buffer, String fieldName, double value); void append(StringBuffer buffer, String fieldName, float value); void append(StringBuffer buffer, String fieldName, boolean value); void append(StringBuffer buffer, String fieldName, Object[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, long[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, int[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, short[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, byte[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, char[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, double[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, float[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, boolean[] array, Boolean fullDetail); static final ToStringStyle DEFAULT_STYLE; static final ToStringStyle MULTI_LINE_STYLE; static final ToStringStyle NO_FIELD_NAMES_STYLE; static final ToStringStyle SHORT_PREFIX_STYLE; static final ToStringStyle SIMPLE_STYLE; }\n// Avaible SubClasses:\n// public class StandardToStringStyle extends ToStringStyle {\n// public abstract class ToStringStyle implements Serializable { public static final ToStringStyle DEFAULT_STYLE = new DefaultToStringStyle(); public static final ToStringStyle MULTI_LINE_STYLE = new MultiLineToStringStyle(); public static final ToStringStyle NO_FIELD_NAMES_STYLE = new NoFieldNameToStringStyle(); public static final ToStringStyle SHORT_PREFIX_STYLE = new ShortPrefixToStringStyle(); public static final ToStringStyle SIMPLE_STYLE = new SimpleToStringStyle(); private static final ThreadLocal<WeakHashMap<Object, Object>> REGISTRY = new ThreadLocal<WeakHashMap<Object,Object>>(); static Map<Object, Object> getRegistry() { return REGISTRY.get() != null ? REGISTRY.get() : Collections.<Object, Object>emptyMap(); } static boolean isRegistered(Object value) { Map<Object, Object> m = getRegistry(); return m.containsKey(value); } static void register(Object value) { if (value != null) { WeakHashMap<Object, Object> m; synchronized (ToStringStyle.class) { m = REGISTRY.get(); if (m == null) { m = new WeakHashMap<Object, Object>(); REGISTRY.set(m); } } m.put(value, null); } } static void unregister(Object value) { if (value != null) { WeakHashMap<Object, Object> m; synchronized (ToStringStyle.class) { m = REGISTRY.get(); if (m != null) { m.remove(value); if (m.isEmpty()) { REGISTRY.remove(); } } } } } private boolean useFieldNames = true; private boolean useClassName = true; private boolean useShortClassName = false; private boolean useIdentityHashCode = true; private String contentStart = \"[\"; private String contentEnd = \"]\"; private String fieldNameValueSeparator = \"=\"; private boolean fieldSeparatorAtStart = false; private boolean fieldSeparatorAtEnd = false; private String fieldSeparator = \",\"; private String arrayStart = \"{\"; private String arraySeparator = \",\"; private boolean arrayContentDetail = true; private String arrayEnd = \"}\"; private boolean defaultFullDetail = true; private String nullText = \"<null>\"; private String sizeStartText = \"<size=\"; private String sizeEndText = \">\"; private String summaryObjectStartText = \"<\"; private String summaryObjectEndText = \">\"; protected ToStringStyle() { super(); } public void appendSuper(StringBuffer buffer, String superToString) { appendToString(buffer, superToString); } public void appendToString(StringBuffer buffer, String toString) { if (toString != null) { int pos1 = toString.indexOf(contentStart) + contentStart.length(); int pos2 = toString.lastIndexOf(contentEnd); if (pos1 != pos2 && pos1 >= 0 && pos2 >= 0) { String data = toString.substring(pos1, pos2); if (fieldSeparatorAtStart) { removeLastFieldSeparator(buffer); } buffer.append(data); appendFieldSeparator(buffer); } } } public void appendStart(StringBuffer buffer, Object object) { if (object != null) { appendClassName(buffer, object); appendIdentityHashCode(buffer, object); appendContentStart(buffer); if (fieldSeparatorAtStart) { appendFieldSeparator(buffer); } } } public void appendEnd(StringBuffer buffer, Object object) { if (this.fieldSeparatorAtEnd == false) { removeLastFieldSeparator(buffer); } appendContentEnd(buffer); unregister(object); } protected void removeLastFieldSeparator(StringBuffer buffer) { int len = buffer.length(); int sepLen = fieldSeparator.length(); if (len > 0 && sepLen > 0 && len >= sepLen) { boolean match = true; for (int i = 0; i < sepLen; i++) { if (buffer.charAt(len - 1 - i) != fieldSeparator.charAt(sepLen - 1 - i)) { match = false; break; } } if (match) { buffer.setLength(len - sepLen); } } } public void append(StringBuffer buffer, String fieldName, Object value, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (value == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, value, isFullDetail(fullDetail)); } appendFieldEnd(buffer, fieldName); } protected void appendInternal(StringBuffer buffer, String fieldName, Object value, boolean detail) { if (isRegistered(value) && !(value instanceof Number || value instanceof Boolean || value instanceof Character)) { appendCyclicObject(buffer, fieldName, value); return; } register(value); try { if (value instanceof Collection<?>) { if (detail) { appendDetail(buffer, fieldName, (Collection<?>) value); } else { appendSummarySize(buffer, fieldName, ((Collection<?>) value).size()); } } else if (value instanceof Map<?, ?>) { if (detail) { appendDetail(buffer, fieldName, (Map<?, ?>) value); } else { appendSummarySize(buffer, fieldName, ((Map<?, ?>) value).size()); } } else if (value instanceof long[]) { if (detail) { appendDetail(buffer, fieldName, (long[]) value); } else { appendSummary(buffer, fieldName, (long[]) value); } } else if (value instanceof int[]) { if (detail) { appendDetail(buffer, fieldName, (int[]) value); } else { appendSummary(buffer, fieldName, (int[]) value); } } else if (value instanceof short[]) { if (detail) { appendDetail(buffer, fieldName, (short[]) value); } else { appendSummary(buffer, fieldName, (short[]) value); } } else if (value instanceof byte[]) { if (detail) { appendDetail(buffer, fieldName, (byte[]) value); } else { appendSummary(buffer, fieldName, (byte[]) value); } } else if (value instanceof char[]) { if (detail) { appendDetail(buffer, fieldName, (char[]) value); } else { appendSummary(buffer, fieldName, (char[]) value); } } else if (value instanceof double[]) { if (detail) { appendDetail(buffer, fieldName, (double[]) value); } else { appendSummary(buffer, fieldName, (double[]) value); } } else if (value instanceof float[]) { if (detail) { appendDetail(buffer, fieldName, (float[]) value); } else { appendSummary(buffer, fieldName, (float[]) value); } } else if (value instanceof boolean[]) { if (detail) { appendDetail(buffer, fieldName, (boolean[]) value); } else { appendSummary(buffer, fieldName, (boolean[]) value); } } else if (value.getClass().isArray()) { if (detail) { appendDetail(buffer, fieldName, (Object[]) value); } else { appendSummary(buffer, fieldName, (Object[]) value); } } else { if (detail) { appendDetail(buffer, fieldName, value); } else { appendSummary(buffer, fieldName, value); } } } finally { unregister(value); } } protected void appendCyclicObject(StringBuffer buffer, String fieldName, Object value) { ObjectUtils.identityToString(buffer, value); } protected void appendDetail(StringBuffer buffer, String fieldName, Object value) { buffer.append(value); } protected void appendDetail(StringBuffer buffer, String fieldName, Collection<?> coll) { buffer.append(coll); } protected void appendDetail(StringBuffer buffer, String fieldName, Map<?, ?> map) { buffer.append(map); } protected void appendSummary(StringBuffer buffer, String fieldName, Object value) { buffer.append(summaryObjectStartText); buffer.append(getShortClassName(value.getClass())); buffer.append(summaryObjectEndText); } public void append(StringBuffer buffer, String fieldName, long value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, long value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, int value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, int value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, short value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, short value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, byte value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, byte value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, char value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, char value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, double value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, double value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, float value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, float value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, boolean value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, boolean value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, Object[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, Object[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { Object item = array[i]; if (i > 0) { buffer.append(arraySeparator); } if (item == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, item, arrayContentDetail); } } buffer.append(arrayEnd); } protected void reflectionAppendArrayDetail(StringBuffer buffer, String fieldName, Object array) { buffer.append(arrayStart); int length = Array.getLength(array); for (int i = 0; i < length; i++) { Object item = Array.get(array, i); if (i > 0) { buffer.append(arraySeparator); } if (item == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, item, arrayContentDetail); } } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, Object[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, long[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, long[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, long[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, int[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, int[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, int[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, short[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, short[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, short[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, byte[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, byte[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, byte[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, char[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, char[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, char[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, double[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, double[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, double[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, float[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, float[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, float[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, boolean[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, boolean[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, boolean[] array) { appendSummarySize(buffer, fieldName, array.length); } protected void appendClassName(StringBuffer buffer, Object object) { if (useClassName && object != null) { register(object); if (useShortClassName) { buffer.append(getShortClassName(object.getClass())); } else { buffer.append(object.getClass().getName()); } } } protected void appendIdentityHashCode(StringBuffer buffer, Object object) { if (this.isUseIdentityHashCode() && object!=null) { register(object); buffer.append('@'); buffer.append(Integer.toHexString(System.identityHashCode(object))); } } protected void appendContentStart(StringBuffer buffer) { buffer.append(contentStart); } protected void appendContentEnd(StringBuffer buffer) { buffer.append(contentEnd); } protected void appendNullText(StringBuffer buffer, String fieldName) { buffer.append(nullText); } protected void appendFieldSeparator(StringBuffer buffer) { buffer.append(fieldSeparator); } protected void appendFieldStart(StringBuffer buffer, String fieldName) { if (useFieldNames && fieldName != null) { buffer.append(fieldName); buffer.append(fieldNameValueSeparator); } } protected void appendFieldEnd(StringBuffer buffer, String fieldName) { appendFieldSeparator(buffer); } protected void appendSummarySize(StringBuffer buffer, String fieldName, int size) { buffer.append(sizeStartText); buffer.append(size); buffer.append(sizeEndText); } protected boolean isFullDetail(Boolean fullDetailRequest) { if (fullDetailRequest == null) { return defaultFullDetail; } return fullDetailRequest.booleanValue(); } protected String getShortClassName(Class<?> cls) { return ClassUtils.getShortClassName(cls); } protected boolean isUseClassName() { return useClassName; } protected void setUseClassName(boolean useClassName) { this.useClassName = useClassName; } protected boolean isUseShortClassName() { return useShortClassName; } protected void setUseShortClassName(boolean useShortClassName) { this.useShortClassName = useShortClassName; } protected boolean isUseIdentityHashCode() { return useIdentityHashCode; } protected void setUseIdentityHashCode(boolean useIdentityHashCode) { this.useIdentityHashCode = useIdentityHashCode; } protected boolean isUseFieldNames() { return useFieldNames; } protected void setUseFieldNames(boolean useFieldNames) { this.useFieldNames = useFieldNames; } protected boolean isDefaultFullDetail() { return defaultFullDetail; } protected void setDefaultFullDetail(boolean defaultFullDetail) { this.defaultFullDetail = defaultFullDetail; } protected boolean isArrayContentDetail() { return arrayContentDetail; } protected void setArrayContentDetail(boolean arrayContentDetail) { this.arrayContentDetail = arrayContentDetail; } protected String getArrayStart() { return arrayStart; } protected void setArrayStart(String arrayStart) { if (arrayStart == null) { arrayStart = \"\"; } this.arrayStart = arrayStart; } protected String getArrayEnd() { return arrayEnd; } protected void setArrayEnd(String arrayEnd) { if (arrayEnd == null) { arrayEnd = \"\"; } this.arrayEnd = arrayEnd; } protected String getArraySeparator() { return arraySeparator; } protected void setArraySeparator(String arraySeparator) { if (arraySeparator == null) { arraySeparator = \"\"; } this.arraySeparator = arraySeparator; } protected String getContentStart() { return contentStart; } protected void setContentStart(String contentStart) { if (contentStart == null) { contentStart = \"\"; } this.contentStart = contentStart; } protected String getContentEnd() { return contentEnd; } protected void setContentEnd(String contentEnd) { if (contentEnd == null) { contentEnd = \"\"; } this.contentEnd = contentEnd; } protected String getFieldNameValueSeparator() { return fieldNameValueSeparator; } protected void setFieldNameValueSeparator(String fieldNameValueSeparator) { if (fieldNameValueSeparator == null) { fieldNameValueSeparator = \"\"; } this.fieldNameValueSeparator = fieldNameValueSeparator; } protected String getFieldSeparator() { return fieldSeparator; } protected void setFieldSeparator(String fieldSeparator) { if (fieldSeparator == null) { fieldSeparator = \"\"; } this.fieldSeparator = fieldSeparator; } protected boolean isFieldSeparatorAtStart() { return fieldSeparatorAtStart; } protected void setFieldSeparatorAtStart(boolean fieldSeparatorAtStart) { this.fieldSeparatorAtStart = fieldSeparatorAtStart; } protected boolean isFieldSeparatorAtEnd() { return fieldSeparatorAtEnd; } protected void setFieldSeparatorAtEnd(boolean fieldSeparatorAtEnd) { this.fieldSeparatorAtEnd = fieldSeparatorAtEnd; } protected String getNullText() { return nullText; } protected void setNullText(String nullText) { if (nullText == null) { nullText = \"\"; } this.nullText = nullText; } protected String getSizeStartText() { return sizeStartText; } protected void setSizeStartText(String sizeStartText) { if (sizeStartText == null) { sizeStartText = \"\"; } this.sizeStartText = sizeStartText; } protected String getSizeEndText() { return sizeEndText; } protected void setSizeEndText(String sizeEndText) { if (sizeEndText == null) { sizeEndText = \"\"; } this.sizeEndText = sizeEndText; } protected String getSummaryObjectStartText() { return summaryObjectStartText; } protected void setSummaryObjectStartText(String summaryObjectStartText) { if (summaryObjectStartText == null) { summaryObjectStartText = \"\"; } this.summaryObjectStartText = summaryObjectStartText; } protected String getSummaryObjectEndText() { return summaryObjectEndText; } protected void setSummaryObjectEndText(String summaryObjectEndText) { if (summaryObjectEndText == null) { summaryObjectEndText = \"\"; } this.summaryObjectEndText = summaryObjectEndText; } private static final class DefaultToStringStyle extends ToStringStyle {\n", "projects": [{"project": "Lang", "id": 34}]}
{"method": "// Focal method:\npublic abstract class ToStringStyle implements Serializable { public void append(StringBuffer buffer, String fieldName, float value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected ToStringStyle(); void appendSuper(StringBuffer buffer, String superToString); void appendToString(StringBuffer buffer, String toString); void appendStart(StringBuffer buffer, Object object); void appendEnd(StringBuffer buffer, Object object); void append(StringBuffer buffer, String fieldName, Object value, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, long value); void append(StringBuffer buffer, String fieldName, int value); void append(StringBuffer buffer, String fieldName, short value); void append(StringBuffer buffer, String fieldName, byte value); void append(StringBuffer buffer, String fieldName, char value); void append(StringBuffer buffer, String fieldName, double value); void append(StringBuffer buffer, String fieldName, float value); void append(StringBuffer buffer, String fieldName, boolean value); void append(StringBuffer buffer, String fieldName, Object[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, long[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, int[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, short[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, byte[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, char[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, double[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, float[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, boolean[] array, Boolean fullDetail); static final ToStringStyle DEFAULT_STYLE; static final ToStringStyle MULTI_LINE_STYLE; static final ToStringStyle NO_FIELD_NAMES_STYLE; static final ToStringStyle SHORT_PREFIX_STYLE; static final ToStringStyle SIMPLE_STYLE; }\n// Avaible SubClasses:\n// public class StandardToStringStyle extends ToStringStyle {\n// public abstract class ToStringStyle implements Serializable { public static final ToStringStyle DEFAULT_STYLE = new DefaultToStringStyle(); public static final ToStringStyle MULTI_LINE_STYLE = new MultiLineToStringStyle(); public static final ToStringStyle NO_FIELD_NAMES_STYLE = new NoFieldNameToStringStyle(); public static final ToStringStyle SHORT_PREFIX_STYLE = new ShortPrefixToStringStyle(); public static final ToStringStyle SIMPLE_STYLE = new SimpleToStringStyle(); private static final ThreadLocal<WeakHashMap<Object, Object>> REGISTRY = new ThreadLocal<WeakHashMap<Object,Object>>(); static Map<Object, Object> getRegistry() { return REGISTRY.get() != null ? REGISTRY.get() : Collections.<Object, Object>emptyMap(); } static boolean isRegistered(Object value) { Map<Object, Object> m = getRegistry(); return m.containsKey(value); } static void register(Object value) { if (value != null) { WeakHashMap<Object, Object> m; synchronized (ToStringStyle.class) { m = REGISTRY.get(); if (m == null) { m = new WeakHashMap<Object, Object>(); REGISTRY.set(m); } } m.put(value, null); } } static void unregister(Object value) { if (value != null) { WeakHashMap<Object, Object> m; synchronized (ToStringStyle.class) { m = REGISTRY.get(); if (m != null) { m.remove(value); if (m.isEmpty()) { REGISTRY.remove(); } } } } } private boolean useFieldNames = true; private boolean useClassName = true; private boolean useShortClassName = false; private boolean useIdentityHashCode = true; private String contentStart = \"[\"; private String contentEnd = \"]\"; private String fieldNameValueSeparator = \"=\"; private boolean fieldSeparatorAtStart = false; private boolean fieldSeparatorAtEnd = false; private String fieldSeparator = \",\"; private String arrayStart = \"{\"; private String arraySeparator = \",\"; private boolean arrayContentDetail = true; private String arrayEnd = \"}\"; private boolean defaultFullDetail = true; private String nullText = \"<null>\"; private String sizeStartText = \"<size=\"; private String sizeEndText = \">\"; private String summaryObjectStartText = \"<\"; private String summaryObjectEndText = \">\"; protected ToStringStyle() { super(); } public void appendSuper(StringBuffer buffer, String superToString) { appendToString(buffer, superToString); } public void appendToString(StringBuffer buffer, String toString) { if (toString != null) { int pos1 = toString.indexOf(contentStart) + contentStart.length(); int pos2 = toString.lastIndexOf(contentEnd); if (pos1 != pos2 && pos1 >= 0 && pos2 >= 0) { String data = toString.substring(pos1, pos2); if (fieldSeparatorAtStart) { removeLastFieldSeparator(buffer); } buffer.append(data); appendFieldSeparator(buffer); } } } public void appendStart(StringBuffer buffer, Object object) { if (object != null) { appendClassName(buffer, object); appendIdentityHashCode(buffer, object); appendContentStart(buffer); if (fieldSeparatorAtStart) { appendFieldSeparator(buffer); } } } public void appendEnd(StringBuffer buffer, Object object) { if (this.fieldSeparatorAtEnd == false) { removeLastFieldSeparator(buffer); } appendContentEnd(buffer); unregister(object); } protected void removeLastFieldSeparator(StringBuffer buffer) { int len = buffer.length(); int sepLen = fieldSeparator.length(); if (len > 0 && sepLen > 0 && len >= sepLen) { boolean match = true; for (int i = 0; i < sepLen; i++) { if (buffer.charAt(len - 1 - i) != fieldSeparator.charAt(sepLen - 1 - i)) { match = false; break; } } if (match) { buffer.setLength(len - sepLen); } } } public void append(StringBuffer buffer, String fieldName, Object value, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (value == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, value, isFullDetail(fullDetail)); } appendFieldEnd(buffer, fieldName); } protected void appendInternal(StringBuffer buffer, String fieldName, Object value, boolean detail) { if (isRegistered(value) && !(value instanceof Number || value instanceof Boolean || value instanceof Character)) { appendCyclicObject(buffer, fieldName, value); return; } register(value); try { if (value instanceof Collection<?>) { if (detail) { appendDetail(buffer, fieldName, (Collection<?>) value); } else { appendSummarySize(buffer, fieldName, ((Collection<?>) value).size()); } } else if (value instanceof Map<?, ?>) { if (detail) { appendDetail(buffer, fieldName, (Map<?, ?>) value); } else { appendSummarySize(buffer, fieldName, ((Map<?, ?>) value).size()); } } else if (value instanceof long[]) { if (detail) { appendDetail(buffer, fieldName, (long[]) value); } else { appendSummary(buffer, fieldName, (long[]) value); } } else if (value instanceof int[]) { if (detail) { appendDetail(buffer, fieldName, (int[]) value); } else { appendSummary(buffer, fieldName, (int[]) value); } } else if (value instanceof short[]) { if (detail) { appendDetail(buffer, fieldName, (short[]) value); } else { appendSummary(buffer, fieldName, (short[]) value); } } else if (value instanceof byte[]) { if (detail) { appendDetail(buffer, fieldName, (byte[]) value); } else { appendSummary(buffer, fieldName, (byte[]) value); } } else if (value instanceof char[]) { if (detail) { appendDetail(buffer, fieldName, (char[]) value); } else { appendSummary(buffer, fieldName, (char[]) value); } } else if (value instanceof double[]) { if (detail) { appendDetail(buffer, fieldName, (double[]) value); } else { appendSummary(buffer, fieldName, (double[]) value); } } else if (value instanceof float[]) { if (detail) { appendDetail(buffer, fieldName, (float[]) value); } else { appendSummary(buffer, fieldName, (float[]) value); } } else if (value instanceof boolean[]) { if (detail) { appendDetail(buffer, fieldName, (boolean[]) value); } else { appendSummary(buffer, fieldName, (boolean[]) value); } } else if (value.getClass().isArray()) { if (detail) { appendDetail(buffer, fieldName, (Object[]) value); } else { appendSummary(buffer, fieldName, (Object[]) value); } } else { if (detail) { appendDetail(buffer, fieldName, value); } else { appendSummary(buffer, fieldName, value); } } } finally { unregister(value); } } protected void appendCyclicObject(StringBuffer buffer, String fieldName, Object value) { ObjectUtils.identityToString(buffer, value); } protected void appendDetail(StringBuffer buffer, String fieldName, Object value) { buffer.append(value); } protected void appendDetail(StringBuffer buffer, String fieldName, Collection<?> coll) { buffer.append(coll); } protected void appendDetail(StringBuffer buffer, String fieldName, Map<?, ?> map) { buffer.append(map); } protected void appendSummary(StringBuffer buffer, String fieldName, Object value) { buffer.append(summaryObjectStartText); buffer.append(getShortClassName(value.getClass())); buffer.append(summaryObjectEndText); } public void append(StringBuffer buffer, String fieldName, long value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, long value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, int value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, int value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, short value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, short value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, byte value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, byte value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, char value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, char value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, double value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, double value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, float value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, float value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, boolean value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, boolean value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, Object[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, Object[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { Object item = array[i]; if (i > 0) { buffer.append(arraySeparator); } if (item == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, item, arrayContentDetail); } } buffer.append(arrayEnd); } protected void reflectionAppendArrayDetail(StringBuffer buffer, String fieldName, Object array) { buffer.append(arrayStart); int length = Array.getLength(array); for (int i = 0; i < length; i++) { Object item = Array.get(array, i); if (i > 0) { buffer.append(arraySeparator); } if (item == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, item, arrayContentDetail); } } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, Object[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, long[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, long[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, long[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, int[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, int[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, int[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, short[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, short[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, short[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, byte[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, byte[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, byte[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, char[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, char[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, char[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, double[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, double[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, double[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, float[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, float[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, float[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, boolean[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, boolean[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, boolean[] array) { appendSummarySize(buffer, fieldName, array.length); } protected void appendClassName(StringBuffer buffer, Object object) { if (useClassName && object != null) { register(object); if (useShortClassName) { buffer.append(getShortClassName(object.getClass())); } else { buffer.append(object.getClass().getName()); } } } protected void appendIdentityHashCode(StringBuffer buffer, Object object) { if (this.isUseIdentityHashCode() && object!=null) { register(object); buffer.append('@'); buffer.append(Integer.toHexString(System.identityHashCode(object))); } } protected void appendContentStart(StringBuffer buffer) { buffer.append(contentStart); } protected void appendContentEnd(StringBuffer buffer) { buffer.append(contentEnd); } protected void appendNullText(StringBuffer buffer, String fieldName) { buffer.append(nullText); } protected void appendFieldSeparator(StringBuffer buffer) { buffer.append(fieldSeparator); } protected void appendFieldStart(StringBuffer buffer, String fieldName) { if (useFieldNames && fieldName != null) { buffer.append(fieldName); buffer.append(fieldNameValueSeparator); } } protected void appendFieldEnd(StringBuffer buffer, String fieldName) { appendFieldSeparator(buffer); } protected void appendSummarySize(StringBuffer buffer, String fieldName, int size) { buffer.append(sizeStartText); buffer.append(size); buffer.append(sizeEndText); } protected boolean isFullDetail(Boolean fullDetailRequest) { if (fullDetailRequest == null) { return defaultFullDetail; } return fullDetailRequest.booleanValue(); } protected String getShortClassName(Class<?> cls) { return ClassUtils.getShortClassName(cls); } protected boolean isUseClassName() { return useClassName; } protected void setUseClassName(boolean useClassName) { this.useClassName = useClassName; } protected boolean isUseShortClassName() { return useShortClassName; } protected void setUseShortClassName(boolean useShortClassName) { this.useShortClassName = useShortClassName; } protected boolean isUseIdentityHashCode() { return useIdentityHashCode; } protected void setUseIdentityHashCode(boolean useIdentityHashCode) { this.useIdentityHashCode = useIdentityHashCode; } protected boolean isUseFieldNames() { return useFieldNames; } protected void setUseFieldNames(boolean useFieldNames) { this.useFieldNames = useFieldNames; } protected boolean isDefaultFullDetail() { return defaultFullDetail; } protected void setDefaultFullDetail(boolean defaultFullDetail) { this.defaultFullDetail = defaultFullDetail; } protected boolean isArrayContentDetail() { return arrayContentDetail; } protected void setArrayContentDetail(boolean arrayContentDetail) { this.arrayContentDetail = arrayContentDetail; } protected String getArrayStart() { return arrayStart; } protected void setArrayStart(String arrayStart) { if (arrayStart == null) { arrayStart = \"\"; } this.arrayStart = arrayStart; } protected String getArrayEnd() { return arrayEnd; } protected void setArrayEnd(String arrayEnd) { if (arrayEnd == null) { arrayEnd = \"\"; } this.arrayEnd = arrayEnd; } protected String getArraySeparator() { return arraySeparator; } protected void setArraySeparator(String arraySeparator) { if (arraySeparator == null) { arraySeparator = \"\"; } this.arraySeparator = arraySeparator; } protected String getContentStart() { return contentStart; } protected void setContentStart(String contentStart) { if (contentStart == null) { contentStart = \"\"; } this.contentStart = contentStart; } protected String getContentEnd() { return contentEnd; } protected void setContentEnd(String contentEnd) { if (contentEnd == null) { contentEnd = \"\"; } this.contentEnd = contentEnd; } protected String getFieldNameValueSeparator() { return fieldNameValueSeparator; } protected void setFieldNameValueSeparator(String fieldNameValueSeparator) { if (fieldNameValueSeparator == null) { fieldNameValueSeparator = \"\"; } this.fieldNameValueSeparator = fieldNameValueSeparator; } protected String getFieldSeparator() { return fieldSeparator; } protected void setFieldSeparator(String fieldSeparator) { if (fieldSeparator == null) { fieldSeparator = \"\"; } this.fieldSeparator = fieldSeparator; } protected boolean isFieldSeparatorAtStart() { return fieldSeparatorAtStart; } protected void setFieldSeparatorAtStart(boolean fieldSeparatorAtStart) { this.fieldSeparatorAtStart = fieldSeparatorAtStart; } protected boolean isFieldSeparatorAtEnd() { return fieldSeparatorAtEnd; } protected void setFieldSeparatorAtEnd(boolean fieldSeparatorAtEnd) { this.fieldSeparatorAtEnd = fieldSeparatorAtEnd; } protected String getNullText() { return nullText; } protected void setNullText(String nullText) { if (nullText == null) { nullText = \"\"; } this.nullText = nullText; } protected String getSizeStartText() { return sizeStartText; } protected void setSizeStartText(String sizeStartText) { if (sizeStartText == null) { sizeStartText = \"\"; } this.sizeStartText = sizeStartText; } protected String getSizeEndText() { return sizeEndText; } protected void setSizeEndText(String sizeEndText) { if (sizeEndText == null) { sizeEndText = \"\"; } this.sizeEndText = sizeEndText; } protected String getSummaryObjectStartText() { return summaryObjectStartText; } protected void setSummaryObjectStartText(String summaryObjectStartText) { if (summaryObjectStartText == null) { summaryObjectStartText = \"\"; } this.summaryObjectStartText = summaryObjectStartText; } protected String getSummaryObjectEndText() { return summaryObjectEndText; } protected void setSummaryObjectEndText(String summaryObjectEndText) { if (summaryObjectEndText == null) { summaryObjectEndText = \"\"; } this.summaryObjectEndText = summaryObjectEndText; } private static final class DefaultToStringStyle extends ToStringStyle {\n", "projects": [{"project": "Lang", "id": 34}]}
{"method": "// Focal method:\npublic abstract class ToStringStyle implements Serializable { public void append(StringBuffer buffer, String fieldName, double[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected ToStringStyle(); void appendSuper(StringBuffer buffer, String superToString); void appendToString(StringBuffer buffer, String toString); void appendStart(StringBuffer buffer, Object object); void appendEnd(StringBuffer buffer, Object object); void append(StringBuffer buffer, String fieldName, Object value, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, long value); void append(StringBuffer buffer, String fieldName, int value); void append(StringBuffer buffer, String fieldName, short value); void append(StringBuffer buffer, String fieldName, byte value); void append(StringBuffer buffer, String fieldName, char value); void append(StringBuffer buffer, String fieldName, double value); void append(StringBuffer buffer, String fieldName, float value); void append(StringBuffer buffer, String fieldName, boolean value); void append(StringBuffer buffer, String fieldName, Object[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, long[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, int[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, short[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, byte[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, char[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, double[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, float[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, boolean[] array, Boolean fullDetail); static final ToStringStyle DEFAULT_STYLE; static final ToStringStyle MULTI_LINE_STYLE; static final ToStringStyle NO_FIELD_NAMES_STYLE; static final ToStringStyle SHORT_PREFIX_STYLE; static final ToStringStyle SIMPLE_STYLE; }\n// Avaible SubClasses:\n// public class StandardToStringStyle extends ToStringStyle {\n// public abstract class ToStringStyle implements Serializable { public static final ToStringStyle DEFAULT_STYLE = new DefaultToStringStyle(); public static final ToStringStyle MULTI_LINE_STYLE = new MultiLineToStringStyle(); public static final ToStringStyle NO_FIELD_NAMES_STYLE = new NoFieldNameToStringStyle(); public static final ToStringStyle SHORT_PREFIX_STYLE = new ShortPrefixToStringStyle(); public static final ToStringStyle SIMPLE_STYLE = new SimpleToStringStyle(); private static final ThreadLocal<WeakHashMap<Object, Object>> REGISTRY = new ThreadLocal<WeakHashMap<Object,Object>>(); static Map<Object, Object> getRegistry() { return REGISTRY.get() != null ? REGISTRY.get() : Collections.<Object, Object>emptyMap(); } static boolean isRegistered(Object value) { Map<Object, Object> m = getRegistry(); return m.containsKey(value); } static void register(Object value) { if (value != null) { WeakHashMap<Object, Object> m; synchronized (ToStringStyle.class) { m = REGISTRY.get(); if (m == null) { m = new WeakHashMap<Object, Object>(); REGISTRY.set(m); } } m.put(value, null); } } static void unregister(Object value) { if (value != null) { WeakHashMap<Object, Object> m; synchronized (ToStringStyle.class) { m = REGISTRY.get(); if (m != null) { m.remove(value); if (m.isEmpty()) { REGISTRY.remove(); } } } } } private boolean useFieldNames = true; private boolean useClassName = true; private boolean useShortClassName = false; private boolean useIdentityHashCode = true; private String contentStart = \"[\"; private String contentEnd = \"]\"; private String fieldNameValueSeparator = \"=\"; private boolean fieldSeparatorAtStart = false; private boolean fieldSeparatorAtEnd = false; private String fieldSeparator = \",\"; private String arrayStart = \"{\"; private String arraySeparator = \",\"; private boolean arrayContentDetail = true; private String arrayEnd = \"}\"; private boolean defaultFullDetail = true; private String nullText = \"<null>\"; private String sizeStartText = \"<size=\"; private String sizeEndText = \">\"; private String summaryObjectStartText = \"<\"; private String summaryObjectEndText = \">\"; protected ToStringStyle() { super(); } public void appendSuper(StringBuffer buffer, String superToString) { appendToString(buffer, superToString); } public void appendToString(StringBuffer buffer, String toString) { if (toString != null) { int pos1 = toString.indexOf(contentStart) + contentStart.length(); int pos2 = toString.lastIndexOf(contentEnd); if (pos1 != pos2 && pos1 >= 0 && pos2 >= 0) { String data = toString.substring(pos1, pos2); if (fieldSeparatorAtStart) { removeLastFieldSeparator(buffer); } buffer.append(data); appendFieldSeparator(buffer); } } } public void appendStart(StringBuffer buffer, Object object) { if (object != null) { appendClassName(buffer, object); appendIdentityHashCode(buffer, object); appendContentStart(buffer); if (fieldSeparatorAtStart) { appendFieldSeparator(buffer); } } } public void appendEnd(StringBuffer buffer, Object object) { if (this.fieldSeparatorAtEnd == false) { removeLastFieldSeparator(buffer); } appendContentEnd(buffer); unregister(object); } protected void removeLastFieldSeparator(StringBuffer buffer) { int len = buffer.length(); int sepLen = fieldSeparator.length(); if (len > 0 && sepLen > 0 && len >= sepLen) { boolean match = true; for (int i = 0; i < sepLen; i++) { if (buffer.charAt(len - 1 - i) != fieldSeparator.charAt(sepLen - 1 - i)) { match = false; break; } } if (match) { buffer.setLength(len - sepLen); } } } public void append(StringBuffer buffer, String fieldName, Object value, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (value == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, value, isFullDetail(fullDetail)); } appendFieldEnd(buffer, fieldName); } protected void appendInternal(StringBuffer buffer, String fieldName, Object value, boolean detail) { if (isRegistered(value) && !(value instanceof Number || value instanceof Boolean || value instanceof Character)) { appendCyclicObject(buffer, fieldName, value); return; } register(value); try { if (value instanceof Collection<?>) { if (detail) { appendDetail(buffer, fieldName, (Collection<?>) value); } else { appendSummarySize(buffer, fieldName, ((Collection<?>) value).size()); } } else if (value instanceof Map<?, ?>) { if (detail) { appendDetail(buffer, fieldName, (Map<?, ?>) value); } else { appendSummarySize(buffer, fieldName, ((Map<?, ?>) value).size()); } } else if (value instanceof long[]) { if (detail) { appendDetail(buffer, fieldName, (long[]) value); } else { appendSummary(buffer, fieldName, (long[]) value); } } else if (value instanceof int[]) { if (detail) { appendDetail(buffer, fieldName, (int[]) value); } else { appendSummary(buffer, fieldName, (int[]) value); } } else if (value instanceof short[]) { if (detail) { appendDetail(buffer, fieldName, (short[]) value); } else { appendSummary(buffer, fieldName, (short[]) value); } } else if (value instanceof byte[]) { if (detail) { appendDetail(buffer, fieldName, (byte[]) value); } else { appendSummary(buffer, fieldName, (byte[]) value); } } else if (value instanceof char[]) { if (detail) { appendDetail(buffer, fieldName, (char[]) value); } else { appendSummary(buffer, fieldName, (char[]) value); } } else if (value instanceof double[]) { if (detail) { appendDetail(buffer, fieldName, (double[]) value); } else { appendSummary(buffer, fieldName, (double[]) value); } } else if (value instanceof float[]) { if (detail) { appendDetail(buffer, fieldName, (float[]) value); } else { appendSummary(buffer, fieldName, (float[]) value); } } else if (value instanceof boolean[]) { if (detail) { appendDetail(buffer, fieldName, (boolean[]) value); } else { appendSummary(buffer, fieldName, (boolean[]) value); } } else if (value.getClass().isArray()) { if (detail) { appendDetail(buffer, fieldName, (Object[]) value); } else { appendSummary(buffer, fieldName, (Object[]) value); } } else { if (detail) { appendDetail(buffer, fieldName, value); } else { appendSummary(buffer, fieldName, value); } } } finally { unregister(value); } } protected void appendCyclicObject(StringBuffer buffer, String fieldName, Object value) { ObjectUtils.identityToString(buffer, value); } protected void appendDetail(StringBuffer buffer, String fieldName, Object value) { buffer.append(value); } protected void appendDetail(StringBuffer buffer, String fieldName, Collection<?> coll) { buffer.append(coll); } protected void appendDetail(StringBuffer buffer, String fieldName, Map<?, ?> map) { buffer.append(map); } protected void appendSummary(StringBuffer buffer, String fieldName, Object value) { buffer.append(summaryObjectStartText); buffer.append(getShortClassName(value.getClass())); buffer.append(summaryObjectEndText); } public void append(StringBuffer buffer, String fieldName, long value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, long value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, int value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, int value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, short value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, short value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, byte value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, byte value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, char value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, char value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, double value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, double value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, float value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, float value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, boolean value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, boolean value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, Object[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, Object[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { Object item = array[i]; if (i > 0) { buffer.append(arraySeparator); } if (item == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, item, arrayContentDetail); } } buffer.append(arrayEnd); } protected void reflectionAppendArrayDetail(StringBuffer buffer, String fieldName, Object array) { buffer.append(arrayStart); int length = Array.getLength(array); for (int i = 0; i < length; i++) { Object item = Array.get(array, i); if (i > 0) { buffer.append(arraySeparator); } if (item == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, item, arrayContentDetail); } } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, Object[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, long[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, long[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, long[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, int[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, int[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, int[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, short[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, short[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, short[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, byte[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, byte[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, byte[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, char[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, char[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, char[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, double[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, double[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, double[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, float[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, float[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, float[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, boolean[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, boolean[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, boolean[] array) { appendSummarySize(buffer, fieldName, array.length); } protected void appendClassName(StringBuffer buffer, Object object) { if (useClassName && object != null) { register(object); if (useShortClassName) { buffer.append(getShortClassName(object.getClass())); } else { buffer.append(object.getClass().getName()); } } } protected void appendIdentityHashCode(StringBuffer buffer, Object object) { if (this.isUseIdentityHashCode() && object!=null) { register(object); buffer.append('@'); buffer.append(Integer.toHexString(System.identityHashCode(object))); } } protected void appendContentStart(StringBuffer buffer) { buffer.append(contentStart); } protected void appendContentEnd(StringBuffer buffer) { buffer.append(contentEnd); } protected void appendNullText(StringBuffer buffer, String fieldName) { buffer.append(nullText); } protected void appendFieldSeparator(StringBuffer buffer) { buffer.append(fieldSeparator); } protected void appendFieldStart(StringBuffer buffer, String fieldName) { if (useFieldNames && fieldName != null) { buffer.append(fieldName); buffer.append(fieldNameValueSeparator); } } protected void appendFieldEnd(StringBuffer buffer, String fieldName) { appendFieldSeparator(buffer); } protected void appendSummarySize(StringBuffer buffer, String fieldName, int size) { buffer.append(sizeStartText); buffer.append(size); buffer.append(sizeEndText); } protected boolean isFullDetail(Boolean fullDetailRequest) { if (fullDetailRequest == null) { return defaultFullDetail; } return fullDetailRequest.booleanValue(); } protected String getShortClassName(Class<?> cls) { return ClassUtils.getShortClassName(cls); } protected boolean isUseClassName() { return useClassName; } protected void setUseClassName(boolean useClassName) { this.useClassName = useClassName; } protected boolean isUseShortClassName() { return useShortClassName; } protected void setUseShortClassName(boolean useShortClassName) { this.useShortClassName = useShortClassName; } protected boolean isUseIdentityHashCode() { return useIdentityHashCode; } protected void setUseIdentityHashCode(boolean useIdentityHashCode) { this.useIdentityHashCode = useIdentityHashCode; } protected boolean isUseFieldNames() { return useFieldNames; } protected void setUseFieldNames(boolean useFieldNames) { this.useFieldNames = useFieldNames; } protected boolean isDefaultFullDetail() { return defaultFullDetail; } protected void setDefaultFullDetail(boolean defaultFullDetail) { this.defaultFullDetail = defaultFullDetail; } protected boolean isArrayContentDetail() { return arrayContentDetail; } protected void setArrayContentDetail(boolean arrayContentDetail) { this.arrayContentDetail = arrayContentDetail; } protected String getArrayStart() { return arrayStart; } protected void setArrayStart(String arrayStart) { if (arrayStart == null) { arrayStart = \"\"; } this.arrayStart = arrayStart; } protected String getArrayEnd() { return arrayEnd; } protected void setArrayEnd(String arrayEnd) { if (arrayEnd == null) { arrayEnd = \"\"; } this.arrayEnd = arrayEnd; } protected String getArraySeparator() { return arraySeparator; } protected void setArraySeparator(String arraySeparator) { if (arraySeparator == null) { arraySeparator = \"\"; } this.arraySeparator = arraySeparator; } protected String getContentStart() { return contentStart; } protected void setContentStart(String contentStart) { if (contentStart == null) { contentStart = \"\"; } this.contentStart = contentStart; } protected String getContentEnd() { return contentEnd; } protected void setContentEnd(String contentEnd) { if (contentEnd == null) { contentEnd = \"\"; } this.contentEnd = contentEnd; } protected String getFieldNameValueSeparator() { return fieldNameValueSeparator; } protected void setFieldNameValueSeparator(String fieldNameValueSeparator) { if (fieldNameValueSeparator == null) { fieldNameValueSeparator = \"\"; } this.fieldNameValueSeparator = fieldNameValueSeparator; } protected String getFieldSeparator() { return fieldSeparator; } protected void setFieldSeparator(String fieldSeparator) { if (fieldSeparator == null) { fieldSeparator = \"\"; } this.fieldSeparator = fieldSeparator; } protected boolean isFieldSeparatorAtStart() { return fieldSeparatorAtStart; } protected void setFieldSeparatorAtStart(boolean fieldSeparatorAtStart) { this.fieldSeparatorAtStart = fieldSeparatorAtStart; } protected boolean isFieldSeparatorAtEnd() { return fieldSeparatorAtEnd; } protected void setFieldSeparatorAtEnd(boolean fieldSeparatorAtEnd) { this.fieldSeparatorAtEnd = fieldSeparatorAtEnd; } protected String getNullText() { return nullText; } protected void setNullText(String nullText) { if (nullText == null) { nullText = \"\"; } this.nullText = nullText; } protected String getSizeStartText() { return sizeStartText; } protected void setSizeStartText(String sizeStartText) { if (sizeStartText == null) { sizeStartText = \"\"; } this.sizeStartText = sizeStartText; } protected String getSizeEndText() { return sizeEndText; } protected void setSizeEndText(String sizeEndText) { if (sizeEndText == null) { sizeEndText = \"\"; } this.sizeEndText = sizeEndText; } protected String getSummaryObjectStartText() { return summaryObjectStartText; } protected void setSummaryObjectStartText(String summaryObjectStartText) { if (summaryObjectStartText == null) { summaryObjectStartText = \"\"; } this.summaryObjectStartText = summaryObjectStartText; } protected String getSummaryObjectEndText() { return summaryObjectEndText; } protected void setSummaryObjectEndText(String summaryObjectEndText) { if (summaryObjectEndText == null) { summaryObjectEndText = \"\"; } this.summaryObjectEndText = summaryObjectEndText; } private static final class DefaultToStringStyle extends ToStringStyle {\n", "projects": [{"project": "Lang", "id": 34}]}
{"method": "// Focal method:\npublic abstract class ToStringStyle implements Serializable { public void append(StringBuffer buffer, String fieldName, char[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected ToStringStyle(); void appendSuper(StringBuffer buffer, String superToString); void appendToString(StringBuffer buffer, String toString); void appendStart(StringBuffer buffer, Object object); void appendEnd(StringBuffer buffer, Object object); void append(StringBuffer buffer, String fieldName, Object value, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, long value); void append(StringBuffer buffer, String fieldName, int value); void append(StringBuffer buffer, String fieldName, short value); void append(StringBuffer buffer, String fieldName, byte value); void append(StringBuffer buffer, String fieldName, char value); void append(StringBuffer buffer, String fieldName, double value); void append(StringBuffer buffer, String fieldName, float value); void append(StringBuffer buffer, String fieldName, boolean value); void append(StringBuffer buffer, String fieldName, Object[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, long[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, int[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, short[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, byte[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, char[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, double[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, float[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, boolean[] array, Boolean fullDetail); static final ToStringStyle DEFAULT_STYLE; static final ToStringStyle MULTI_LINE_STYLE; static final ToStringStyle NO_FIELD_NAMES_STYLE; static final ToStringStyle SHORT_PREFIX_STYLE; static final ToStringStyle SIMPLE_STYLE; }\n// Avaible SubClasses:\n// public class StandardToStringStyle extends ToStringStyle {\n// public abstract class ToStringStyle implements Serializable { public static final ToStringStyle DEFAULT_STYLE = new DefaultToStringStyle(); public static final ToStringStyle MULTI_LINE_STYLE = new MultiLineToStringStyle(); public static final ToStringStyle NO_FIELD_NAMES_STYLE = new NoFieldNameToStringStyle(); public static final ToStringStyle SHORT_PREFIX_STYLE = new ShortPrefixToStringStyle(); public static final ToStringStyle SIMPLE_STYLE = new SimpleToStringStyle(); private static final ThreadLocal<WeakHashMap<Object, Object>> REGISTRY = new ThreadLocal<WeakHashMap<Object,Object>>(); static Map<Object, Object> getRegistry() { return REGISTRY.get() != null ? REGISTRY.get() : Collections.<Object, Object>emptyMap(); } static boolean isRegistered(Object value) { Map<Object, Object> m = getRegistry(); return m.containsKey(value); } static void register(Object value) { if (value != null) { WeakHashMap<Object, Object> m; synchronized (ToStringStyle.class) { m = REGISTRY.get(); if (m == null) { m = new WeakHashMap<Object, Object>(); REGISTRY.set(m); } } m.put(value, null); } } static void unregister(Object value) { if (value != null) { WeakHashMap<Object, Object> m; synchronized (ToStringStyle.class) { m = REGISTRY.get(); if (m != null) { m.remove(value); if (m.isEmpty()) { REGISTRY.remove(); } } } } } private boolean useFieldNames = true; private boolean useClassName = true; private boolean useShortClassName = false; private boolean useIdentityHashCode = true; private String contentStart = \"[\"; private String contentEnd = \"]\"; private String fieldNameValueSeparator = \"=\"; private boolean fieldSeparatorAtStart = false; private boolean fieldSeparatorAtEnd = false; private String fieldSeparator = \",\"; private String arrayStart = \"{\"; private String arraySeparator = \",\"; private boolean arrayContentDetail = true; private String arrayEnd = \"}\"; private boolean defaultFullDetail = true; private String nullText = \"<null>\"; private String sizeStartText = \"<size=\"; private String sizeEndText = \">\"; private String summaryObjectStartText = \"<\"; private String summaryObjectEndText = \">\"; protected ToStringStyle() { super(); } public void appendSuper(StringBuffer buffer, String superToString) { appendToString(buffer, superToString); } public void appendToString(StringBuffer buffer, String toString) { if (toString != null) { int pos1 = toString.indexOf(contentStart) + contentStart.length(); int pos2 = toString.lastIndexOf(contentEnd); if (pos1 != pos2 && pos1 >= 0 && pos2 >= 0) { String data = toString.substring(pos1, pos2); if (fieldSeparatorAtStart) { removeLastFieldSeparator(buffer); } buffer.append(data); appendFieldSeparator(buffer); } } } public void appendStart(StringBuffer buffer, Object object) { if (object != null) { appendClassName(buffer, object); appendIdentityHashCode(buffer, object); appendContentStart(buffer); if (fieldSeparatorAtStart) { appendFieldSeparator(buffer); } } } public void appendEnd(StringBuffer buffer, Object object) { if (this.fieldSeparatorAtEnd == false) { removeLastFieldSeparator(buffer); } appendContentEnd(buffer); unregister(object); } protected void removeLastFieldSeparator(StringBuffer buffer) { int len = buffer.length(); int sepLen = fieldSeparator.length(); if (len > 0 && sepLen > 0 && len >= sepLen) { boolean match = true; for (int i = 0; i < sepLen; i++) { if (buffer.charAt(len - 1 - i) != fieldSeparator.charAt(sepLen - 1 - i)) { match = false; break; } } if (match) { buffer.setLength(len - sepLen); } } } public void append(StringBuffer buffer, String fieldName, Object value, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (value == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, value, isFullDetail(fullDetail)); } appendFieldEnd(buffer, fieldName); } protected void appendInternal(StringBuffer buffer, String fieldName, Object value, boolean detail) { if (isRegistered(value) && !(value instanceof Number || value instanceof Boolean || value instanceof Character)) { appendCyclicObject(buffer, fieldName, value); return; } register(value); try { if (value instanceof Collection<?>) { if (detail) { appendDetail(buffer, fieldName, (Collection<?>) value); } else { appendSummarySize(buffer, fieldName, ((Collection<?>) value).size()); } } else if (value instanceof Map<?, ?>) { if (detail) { appendDetail(buffer, fieldName, (Map<?, ?>) value); } else { appendSummarySize(buffer, fieldName, ((Map<?, ?>) value).size()); } } else if (value instanceof long[]) { if (detail) { appendDetail(buffer, fieldName, (long[]) value); } else { appendSummary(buffer, fieldName, (long[]) value); } } else if (value instanceof int[]) { if (detail) { appendDetail(buffer, fieldName, (int[]) value); } else { appendSummary(buffer, fieldName, (int[]) value); } } else if (value instanceof short[]) { if (detail) { appendDetail(buffer, fieldName, (short[]) value); } else { appendSummary(buffer, fieldName, (short[]) value); } } else if (value instanceof byte[]) { if (detail) { appendDetail(buffer, fieldName, (byte[]) value); } else { appendSummary(buffer, fieldName, (byte[]) value); } } else if (value instanceof char[]) { if (detail) { appendDetail(buffer, fieldName, (char[]) value); } else { appendSummary(buffer, fieldName, (char[]) value); } } else if (value instanceof double[]) { if (detail) { appendDetail(buffer, fieldName, (double[]) value); } else { appendSummary(buffer, fieldName, (double[]) value); } } else if (value instanceof float[]) { if (detail) { appendDetail(buffer, fieldName, (float[]) value); } else { appendSummary(buffer, fieldName, (float[]) value); } } else if (value instanceof boolean[]) { if (detail) { appendDetail(buffer, fieldName, (boolean[]) value); } else { appendSummary(buffer, fieldName, (boolean[]) value); } } else if (value.getClass().isArray()) { if (detail) { appendDetail(buffer, fieldName, (Object[]) value); } else { appendSummary(buffer, fieldName, (Object[]) value); } } else { if (detail) { appendDetail(buffer, fieldName, value); } else { appendSummary(buffer, fieldName, value); } } } finally { unregister(value); } } protected void appendCyclicObject(StringBuffer buffer, String fieldName, Object value) { ObjectUtils.identityToString(buffer, value); } protected void appendDetail(StringBuffer buffer, String fieldName, Object value) { buffer.append(value); } protected void appendDetail(StringBuffer buffer, String fieldName, Collection<?> coll) { buffer.append(coll); } protected void appendDetail(StringBuffer buffer, String fieldName, Map<?, ?> map) { buffer.append(map); } protected void appendSummary(StringBuffer buffer, String fieldName, Object value) { buffer.append(summaryObjectStartText); buffer.append(getShortClassName(value.getClass())); buffer.append(summaryObjectEndText); } public void append(StringBuffer buffer, String fieldName, long value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, long value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, int value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, int value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, short value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, short value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, byte value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, byte value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, char value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, char value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, double value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, double value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, float value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, float value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, boolean value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, boolean value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, Object[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, Object[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { Object item = array[i]; if (i > 0) { buffer.append(arraySeparator); } if (item == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, item, arrayContentDetail); } } buffer.append(arrayEnd); } protected void reflectionAppendArrayDetail(StringBuffer buffer, String fieldName, Object array) { buffer.append(arrayStart); int length = Array.getLength(array); for (int i = 0; i < length; i++) { Object item = Array.get(array, i); if (i > 0) { buffer.append(arraySeparator); } if (item == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, item, arrayContentDetail); } } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, Object[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, long[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, long[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, long[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, int[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, int[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, int[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, short[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, short[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, short[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, byte[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, byte[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, byte[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, char[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, char[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, char[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, double[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, double[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, double[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, float[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, float[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, float[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, boolean[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, boolean[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, boolean[] array) { appendSummarySize(buffer, fieldName, array.length); } protected void appendClassName(StringBuffer buffer, Object object) { if (useClassName && object != null) { register(object); if (useShortClassName) { buffer.append(getShortClassName(object.getClass())); } else { buffer.append(object.getClass().getName()); } } } protected void appendIdentityHashCode(StringBuffer buffer, Object object) { if (this.isUseIdentityHashCode() && object!=null) { register(object); buffer.append('@'); buffer.append(Integer.toHexString(System.identityHashCode(object))); } } protected void appendContentStart(StringBuffer buffer) { buffer.append(contentStart); } protected void appendContentEnd(StringBuffer buffer) { buffer.append(contentEnd); } protected void appendNullText(StringBuffer buffer, String fieldName) { buffer.append(nullText); } protected void appendFieldSeparator(StringBuffer buffer) { buffer.append(fieldSeparator); } protected void appendFieldStart(StringBuffer buffer, String fieldName) { if (useFieldNames && fieldName != null) { buffer.append(fieldName); buffer.append(fieldNameValueSeparator); } } protected void appendFieldEnd(StringBuffer buffer, String fieldName) { appendFieldSeparator(buffer); } protected void appendSummarySize(StringBuffer buffer, String fieldName, int size) { buffer.append(sizeStartText); buffer.append(size); buffer.append(sizeEndText); } protected boolean isFullDetail(Boolean fullDetailRequest) { if (fullDetailRequest == null) { return defaultFullDetail; } return fullDetailRequest.booleanValue(); } protected String getShortClassName(Class<?> cls) { return ClassUtils.getShortClassName(cls); } protected boolean isUseClassName() { return useClassName; } protected void setUseClassName(boolean useClassName) { this.useClassName = useClassName; } protected boolean isUseShortClassName() { return useShortClassName; } protected void setUseShortClassName(boolean useShortClassName) { this.useShortClassName = useShortClassName; } protected boolean isUseIdentityHashCode() { return useIdentityHashCode; } protected void setUseIdentityHashCode(boolean useIdentityHashCode) { this.useIdentityHashCode = useIdentityHashCode; } protected boolean isUseFieldNames() { return useFieldNames; } protected void setUseFieldNames(boolean useFieldNames) { this.useFieldNames = useFieldNames; } protected boolean isDefaultFullDetail() { return defaultFullDetail; } protected void setDefaultFullDetail(boolean defaultFullDetail) { this.defaultFullDetail = defaultFullDetail; } protected boolean isArrayContentDetail() { return arrayContentDetail; } protected void setArrayContentDetail(boolean arrayContentDetail) { this.arrayContentDetail = arrayContentDetail; } protected String getArrayStart() { return arrayStart; } protected void setArrayStart(String arrayStart) { if (arrayStart == null) { arrayStart = \"\"; } this.arrayStart = arrayStart; } protected String getArrayEnd() { return arrayEnd; } protected void setArrayEnd(String arrayEnd) { if (arrayEnd == null) { arrayEnd = \"\"; } this.arrayEnd = arrayEnd; } protected String getArraySeparator() { return arraySeparator; } protected void setArraySeparator(String arraySeparator) { if (arraySeparator == null) { arraySeparator = \"\"; } this.arraySeparator = arraySeparator; } protected String getContentStart() { return contentStart; } protected void setContentStart(String contentStart) { if (contentStart == null) { contentStart = \"\"; } this.contentStart = contentStart; } protected String getContentEnd() { return contentEnd; } protected void setContentEnd(String contentEnd) { if (contentEnd == null) { contentEnd = \"\"; } this.contentEnd = contentEnd; } protected String getFieldNameValueSeparator() { return fieldNameValueSeparator; } protected void setFieldNameValueSeparator(String fieldNameValueSeparator) { if (fieldNameValueSeparator == null) { fieldNameValueSeparator = \"\"; } this.fieldNameValueSeparator = fieldNameValueSeparator; } protected String getFieldSeparator() { return fieldSeparator; } protected void setFieldSeparator(String fieldSeparator) { if (fieldSeparator == null) { fieldSeparator = \"\"; } this.fieldSeparator = fieldSeparator; } protected boolean isFieldSeparatorAtStart() { return fieldSeparatorAtStart; } protected void setFieldSeparatorAtStart(boolean fieldSeparatorAtStart) { this.fieldSeparatorAtStart = fieldSeparatorAtStart; } protected boolean isFieldSeparatorAtEnd() { return fieldSeparatorAtEnd; } protected void setFieldSeparatorAtEnd(boolean fieldSeparatorAtEnd) { this.fieldSeparatorAtEnd = fieldSeparatorAtEnd; } protected String getNullText() { return nullText; } protected void setNullText(String nullText) { if (nullText == null) { nullText = \"\"; } this.nullText = nullText; } protected String getSizeStartText() { return sizeStartText; } protected void setSizeStartText(String sizeStartText) { if (sizeStartText == null) { sizeStartText = \"\"; } this.sizeStartText = sizeStartText; } protected String getSizeEndText() { return sizeEndText; } protected void setSizeEndText(String sizeEndText) { if (sizeEndText == null) { sizeEndText = \"\"; } this.sizeEndText = sizeEndText; } protected String getSummaryObjectStartText() { return summaryObjectStartText; } protected void setSummaryObjectStartText(String summaryObjectStartText) { if (summaryObjectStartText == null) { summaryObjectStartText = \"\"; } this.summaryObjectStartText = summaryObjectStartText; } protected String getSummaryObjectEndText() { return summaryObjectEndText; } protected void setSummaryObjectEndText(String summaryObjectEndText) { if (summaryObjectEndText == null) { summaryObjectEndText = \"\"; } this.summaryObjectEndText = summaryObjectEndText; } private static final class DefaultToStringStyle extends ToStringStyle {\n", "projects": [{"project": "Lang", "id": 34}]}
{"method": "// Focal method:\npublic abstract class ToStringStyle implements Serializable { public void append(StringBuffer buffer, String fieldName, short[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected ToStringStyle(); void appendSuper(StringBuffer buffer, String superToString); void appendToString(StringBuffer buffer, String toString); void appendStart(StringBuffer buffer, Object object); void appendEnd(StringBuffer buffer, Object object); void append(StringBuffer buffer, String fieldName, Object value, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, long value); void append(StringBuffer buffer, String fieldName, int value); void append(StringBuffer buffer, String fieldName, short value); void append(StringBuffer buffer, String fieldName, byte value); void append(StringBuffer buffer, String fieldName, char value); void append(StringBuffer buffer, String fieldName, double value); void append(StringBuffer buffer, String fieldName, float value); void append(StringBuffer buffer, String fieldName, boolean value); void append(StringBuffer buffer, String fieldName, Object[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, long[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, int[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, short[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, byte[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, char[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, double[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, float[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, boolean[] array, Boolean fullDetail); static final ToStringStyle DEFAULT_STYLE; static final ToStringStyle MULTI_LINE_STYLE; static final ToStringStyle NO_FIELD_NAMES_STYLE; static final ToStringStyle SHORT_PREFIX_STYLE; static final ToStringStyle SIMPLE_STYLE; }\n// Avaible SubClasses:\n// public class StandardToStringStyle extends ToStringStyle {\n// public abstract class ToStringStyle implements Serializable { public static final ToStringStyle DEFAULT_STYLE = new DefaultToStringStyle(); public static final ToStringStyle MULTI_LINE_STYLE = new MultiLineToStringStyle(); public static final ToStringStyle NO_FIELD_NAMES_STYLE = new NoFieldNameToStringStyle(); public static final ToStringStyle SHORT_PREFIX_STYLE = new ShortPrefixToStringStyle(); public static final ToStringStyle SIMPLE_STYLE = new SimpleToStringStyle(); private static final ThreadLocal<WeakHashMap<Object, Object>> REGISTRY = new ThreadLocal<WeakHashMap<Object,Object>>(); static Map<Object, Object> getRegistry() { return REGISTRY.get() != null ? REGISTRY.get() : Collections.<Object, Object>emptyMap(); } static boolean isRegistered(Object value) { Map<Object, Object> m = getRegistry(); return m.containsKey(value); } static void register(Object value) { if (value != null) { WeakHashMap<Object, Object> m; synchronized (ToStringStyle.class) { m = REGISTRY.get(); if (m == null) { m = new WeakHashMap<Object, Object>(); REGISTRY.set(m); } } m.put(value, null); } } static void unregister(Object value) { if (value != null) { WeakHashMap<Object, Object> m; synchronized (ToStringStyle.class) { m = REGISTRY.get(); if (m != null) { m.remove(value); if (m.isEmpty()) { REGISTRY.remove(); } } } } } private boolean useFieldNames = true; private boolean useClassName = true; private boolean useShortClassName = false; private boolean useIdentityHashCode = true; private String contentStart = \"[\"; private String contentEnd = \"]\"; private String fieldNameValueSeparator = \"=\"; private boolean fieldSeparatorAtStart = false; private boolean fieldSeparatorAtEnd = false; private String fieldSeparator = \",\"; private String arrayStart = \"{\"; private String arraySeparator = \",\"; private boolean arrayContentDetail = true; private String arrayEnd = \"}\"; private boolean defaultFullDetail = true; private String nullText = \"<null>\"; private String sizeStartText = \"<size=\"; private String sizeEndText = \">\"; private String summaryObjectStartText = \"<\"; private String summaryObjectEndText = \">\"; protected ToStringStyle() { super(); } public void appendSuper(StringBuffer buffer, String superToString) { appendToString(buffer, superToString); } public void appendToString(StringBuffer buffer, String toString) { if (toString != null) { int pos1 = toString.indexOf(contentStart) + contentStart.length(); int pos2 = toString.lastIndexOf(contentEnd); if (pos1 != pos2 && pos1 >= 0 && pos2 >= 0) { String data = toString.substring(pos1, pos2); if (fieldSeparatorAtStart) { removeLastFieldSeparator(buffer); } buffer.append(data); appendFieldSeparator(buffer); } } } public void appendStart(StringBuffer buffer, Object object) { if (object != null) { appendClassName(buffer, object); appendIdentityHashCode(buffer, object); appendContentStart(buffer); if (fieldSeparatorAtStart) { appendFieldSeparator(buffer); } } } public void appendEnd(StringBuffer buffer, Object object) { if (this.fieldSeparatorAtEnd == false) { removeLastFieldSeparator(buffer); } appendContentEnd(buffer); unregister(object); } protected void removeLastFieldSeparator(StringBuffer buffer) { int len = buffer.length(); int sepLen = fieldSeparator.length(); if (len > 0 && sepLen > 0 && len >= sepLen) { boolean match = true; for (int i = 0; i < sepLen; i++) { if (buffer.charAt(len - 1 - i) != fieldSeparator.charAt(sepLen - 1 - i)) { match = false; break; } } if (match) { buffer.setLength(len - sepLen); } } } public void append(StringBuffer buffer, String fieldName, Object value, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (value == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, value, isFullDetail(fullDetail)); } appendFieldEnd(buffer, fieldName); } protected void appendInternal(StringBuffer buffer, String fieldName, Object value, boolean detail) { if (isRegistered(value) && !(value instanceof Number || value instanceof Boolean || value instanceof Character)) { appendCyclicObject(buffer, fieldName, value); return; } register(value); try { if (value instanceof Collection<?>) { if (detail) { appendDetail(buffer, fieldName, (Collection<?>) value); } else { appendSummarySize(buffer, fieldName, ((Collection<?>) value).size()); } } else if (value instanceof Map<?, ?>) { if (detail) { appendDetail(buffer, fieldName, (Map<?, ?>) value); } else { appendSummarySize(buffer, fieldName, ((Map<?, ?>) value).size()); } } else if (value instanceof long[]) { if (detail) { appendDetail(buffer, fieldName, (long[]) value); } else { appendSummary(buffer, fieldName, (long[]) value); } } else if (value instanceof int[]) { if (detail) { appendDetail(buffer, fieldName, (int[]) value); } else { appendSummary(buffer, fieldName, (int[]) value); } } else if (value instanceof short[]) { if (detail) { appendDetail(buffer, fieldName, (short[]) value); } else { appendSummary(buffer, fieldName, (short[]) value); } } else if (value instanceof byte[]) { if (detail) { appendDetail(buffer, fieldName, (byte[]) value); } else { appendSummary(buffer, fieldName, (byte[]) value); } } else if (value instanceof char[]) { if (detail) { appendDetail(buffer, fieldName, (char[]) value); } else { appendSummary(buffer, fieldName, (char[]) value); } } else if (value instanceof double[]) { if (detail) { appendDetail(buffer, fieldName, (double[]) value); } else { appendSummary(buffer, fieldName, (double[]) value); } } else if (value instanceof float[]) { if (detail) { appendDetail(buffer, fieldName, (float[]) value); } else { appendSummary(buffer, fieldName, (float[]) value); } } else if (value instanceof boolean[]) { if (detail) { appendDetail(buffer, fieldName, (boolean[]) value); } else { appendSummary(buffer, fieldName, (boolean[]) value); } } else if (value.getClass().isArray()) { if (detail) { appendDetail(buffer, fieldName, (Object[]) value); } else { appendSummary(buffer, fieldName, (Object[]) value); } } else { if (detail) { appendDetail(buffer, fieldName, value); } else { appendSummary(buffer, fieldName, value); } } } finally { unregister(value); } } protected void appendCyclicObject(StringBuffer buffer, String fieldName, Object value) { ObjectUtils.identityToString(buffer, value); } protected void appendDetail(StringBuffer buffer, String fieldName, Object value) { buffer.append(value); } protected void appendDetail(StringBuffer buffer, String fieldName, Collection<?> coll) { buffer.append(coll); } protected void appendDetail(StringBuffer buffer, String fieldName, Map<?, ?> map) { buffer.append(map); } protected void appendSummary(StringBuffer buffer, String fieldName, Object value) { buffer.append(summaryObjectStartText); buffer.append(getShortClassName(value.getClass())); buffer.append(summaryObjectEndText); } public void append(StringBuffer buffer, String fieldName, long value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, long value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, int value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, int value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, short value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, short value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, byte value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, byte value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, char value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, char value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, double value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, double value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, float value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, float value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, boolean value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, boolean value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, Object[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, Object[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { Object item = array[i]; if (i > 0) { buffer.append(arraySeparator); } if (item == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, item, arrayContentDetail); } } buffer.append(arrayEnd); } protected void reflectionAppendArrayDetail(StringBuffer buffer, String fieldName, Object array) { buffer.append(arrayStart); int length = Array.getLength(array); for (int i = 0; i < length; i++) { Object item = Array.get(array, i); if (i > 0) { buffer.append(arraySeparator); } if (item == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, item, arrayContentDetail); } } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, Object[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, long[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, long[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, long[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, int[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, int[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, int[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, short[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, short[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, short[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, byte[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, byte[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, byte[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, char[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, char[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, char[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, double[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, double[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, double[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, float[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, float[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, float[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, boolean[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, boolean[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, boolean[] array) { appendSummarySize(buffer, fieldName, array.length); } protected void appendClassName(StringBuffer buffer, Object object) { if (useClassName && object != null) { register(object); if (useShortClassName) { buffer.append(getShortClassName(object.getClass())); } else { buffer.append(object.getClass().getName()); } } } protected void appendIdentityHashCode(StringBuffer buffer, Object object) { if (this.isUseIdentityHashCode() && object!=null) { register(object); buffer.append('@'); buffer.append(Integer.toHexString(System.identityHashCode(object))); } } protected void appendContentStart(StringBuffer buffer) { buffer.append(contentStart); } protected void appendContentEnd(StringBuffer buffer) { buffer.append(contentEnd); } protected void appendNullText(StringBuffer buffer, String fieldName) { buffer.append(nullText); } protected void appendFieldSeparator(StringBuffer buffer) { buffer.append(fieldSeparator); } protected void appendFieldStart(StringBuffer buffer, String fieldName) { if (useFieldNames && fieldName != null) { buffer.append(fieldName); buffer.append(fieldNameValueSeparator); } } protected void appendFieldEnd(StringBuffer buffer, String fieldName) { appendFieldSeparator(buffer); } protected void appendSummarySize(StringBuffer buffer, String fieldName, int size) { buffer.append(sizeStartText); buffer.append(size); buffer.append(sizeEndText); } protected boolean isFullDetail(Boolean fullDetailRequest) { if (fullDetailRequest == null) { return defaultFullDetail; } return fullDetailRequest.booleanValue(); } protected String getShortClassName(Class<?> cls) { return ClassUtils.getShortClassName(cls); } protected boolean isUseClassName() { return useClassName; } protected void setUseClassName(boolean useClassName) { this.useClassName = useClassName; } protected boolean isUseShortClassName() { return useShortClassName; } protected void setUseShortClassName(boolean useShortClassName) { this.useShortClassName = useShortClassName; } protected boolean isUseIdentityHashCode() { return useIdentityHashCode; } protected void setUseIdentityHashCode(boolean useIdentityHashCode) { this.useIdentityHashCode = useIdentityHashCode; } protected boolean isUseFieldNames() { return useFieldNames; } protected void setUseFieldNames(boolean useFieldNames) { this.useFieldNames = useFieldNames; } protected boolean isDefaultFullDetail() { return defaultFullDetail; } protected void setDefaultFullDetail(boolean defaultFullDetail) { this.defaultFullDetail = defaultFullDetail; } protected boolean isArrayContentDetail() { return arrayContentDetail; } protected void setArrayContentDetail(boolean arrayContentDetail) { this.arrayContentDetail = arrayContentDetail; } protected String getArrayStart() { return arrayStart; } protected void setArrayStart(String arrayStart) { if (arrayStart == null) { arrayStart = \"\"; } this.arrayStart = arrayStart; } protected String getArrayEnd() { return arrayEnd; } protected void setArrayEnd(String arrayEnd) { if (arrayEnd == null) { arrayEnd = \"\"; } this.arrayEnd = arrayEnd; } protected String getArraySeparator() { return arraySeparator; } protected void setArraySeparator(String arraySeparator) { if (arraySeparator == null) { arraySeparator = \"\"; } this.arraySeparator = arraySeparator; } protected String getContentStart() { return contentStart; } protected void setContentStart(String contentStart) { if (contentStart == null) { contentStart = \"\"; } this.contentStart = contentStart; } protected String getContentEnd() { return contentEnd; } protected void setContentEnd(String contentEnd) { if (contentEnd == null) { contentEnd = \"\"; } this.contentEnd = contentEnd; } protected String getFieldNameValueSeparator() { return fieldNameValueSeparator; } protected void setFieldNameValueSeparator(String fieldNameValueSeparator) { if (fieldNameValueSeparator == null) { fieldNameValueSeparator = \"\"; } this.fieldNameValueSeparator = fieldNameValueSeparator; } protected String getFieldSeparator() { return fieldSeparator; } protected void setFieldSeparator(String fieldSeparator) { if (fieldSeparator == null) { fieldSeparator = \"\"; } this.fieldSeparator = fieldSeparator; } protected boolean isFieldSeparatorAtStart() { return fieldSeparatorAtStart; } protected void setFieldSeparatorAtStart(boolean fieldSeparatorAtStart) { this.fieldSeparatorAtStart = fieldSeparatorAtStart; } protected boolean isFieldSeparatorAtEnd() { return fieldSeparatorAtEnd; } protected void setFieldSeparatorAtEnd(boolean fieldSeparatorAtEnd) { this.fieldSeparatorAtEnd = fieldSeparatorAtEnd; } protected String getNullText() { return nullText; } protected void setNullText(String nullText) { if (nullText == null) { nullText = \"\"; } this.nullText = nullText; } protected String getSizeStartText() { return sizeStartText; } protected void setSizeStartText(String sizeStartText) { if (sizeStartText == null) { sizeStartText = \"\"; } this.sizeStartText = sizeStartText; } protected String getSizeEndText() { return sizeEndText; } protected void setSizeEndText(String sizeEndText) { if (sizeEndText == null) { sizeEndText = \"\"; } this.sizeEndText = sizeEndText; } protected String getSummaryObjectStartText() { return summaryObjectStartText; } protected void setSummaryObjectStartText(String summaryObjectStartText) { if (summaryObjectStartText == null) { summaryObjectStartText = \"\"; } this.summaryObjectStartText = summaryObjectStartText; } protected String getSummaryObjectEndText() { return summaryObjectEndText; } protected void setSummaryObjectEndText(String summaryObjectEndText) { if (summaryObjectEndText == null) { summaryObjectEndText = \"\"; } this.summaryObjectEndText = summaryObjectEndText; } private static final class DefaultToStringStyle extends ToStringStyle {\n", "projects": [{"project": "Lang", "id": 34}]}
{"method": "// Focal method:\npublic abstract class ToStringStyle implements Serializable { public void appendStart(StringBuffer buffer, Object object) { if (object != null) { appendClassName(buffer, object); appendIdentityHashCode(buffer, object); appendContentStart(buffer); if (fieldSeparatorAtStart) { appendFieldSeparator(buffer); } } } protected ToStringStyle(); void appendSuper(StringBuffer buffer, String superToString); void appendToString(StringBuffer buffer, String toString); void appendStart(StringBuffer buffer, Object object); void appendEnd(StringBuffer buffer, Object object); void append(StringBuffer buffer, String fieldName, Object value, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, long value); void append(StringBuffer buffer, String fieldName, int value); void append(StringBuffer buffer, String fieldName, short value); void append(StringBuffer buffer, String fieldName, byte value); void append(StringBuffer buffer, String fieldName, char value); void append(StringBuffer buffer, String fieldName, double value); void append(StringBuffer buffer, String fieldName, float value); void append(StringBuffer buffer, String fieldName, boolean value); void append(StringBuffer buffer, String fieldName, Object[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, long[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, int[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, short[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, byte[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, char[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, double[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, float[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, boolean[] array, Boolean fullDetail); static final ToStringStyle DEFAULT_STYLE; static final ToStringStyle MULTI_LINE_STYLE; static final ToStringStyle NO_FIELD_NAMES_STYLE; static final ToStringStyle SHORT_PREFIX_STYLE; static final ToStringStyle SIMPLE_STYLE; }\n// Avaible SubClasses:\n// public class StandardToStringStyle extends ToStringStyle {\n// public abstract class ToStringStyle implements Serializable { public static final ToStringStyle DEFAULT_STYLE = new DefaultToStringStyle(); public static final ToStringStyle MULTI_LINE_STYLE = new MultiLineToStringStyle(); public static final ToStringStyle NO_FIELD_NAMES_STYLE = new NoFieldNameToStringStyle(); public static final ToStringStyle SHORT_PREFIX_STYLE = new ShortPrefixToStringStyle(); public static final ToStringStyle SIMPLE_STYLE = new SimpleToStringStyle(); private static final ThreadLocal<WeakHashMap<Object, Object>> REGISTRY = new ThreadLocal<WeakHashMap<Object,Object>>(); static Map<Object, Object> getRegistry() { return REGISTRY.get() != null ? REGISTRY.get() : Collections.<Object, Object>emptyMap(); } static boolean isRegistered(Object value) { Map<Object, Object> m = getRegistry(); return m.containsKey(value); } static void register(Object value) { if (value != null) { WeakHashMap<Object, Object> m; synchronized (ToStringStyle.class) { m = REGISTRY.get(); if (m == null) { m = new WeakHashMap<Object, Object>(); REGISTRY.set(m); } } m.put(value, null); } } static void unregister(Object value) { if (value != null) { WeakHashMap<Object, Object> m; synchronized (ToStringStyle.class) { m = REGISTRY.get(); if (m != null) { m.remove(value); if (m.isEmpty()) { REGISTRY.remove(); } } } } } private boolean useFieldNames = true; private boolean useClassName = true; private boolean useShortClassName = false; private boolean useIdentityHashCode = true; private String contentStart = \"[\"; private String contentEnd = \"]\"; private String fieldNameValueSeparator = \"=\"; private boolean fieldSeparatorAtStart = false; private boolean fieldSeparatorAtEnd = false; private String fieldSeparator = \",\"; private String arrayStart = \"{\"; private String arraySeparator = \",\"; private boolean arrayContentDetail = true; private String arrayEnd = \"}\"; private boolean defaultFullDetail = true; private String nullText = \"<null>\"; private String sizeStartText = \"<size=\"; private String sizeEndText = \">\"; private String summaryObjectStartText = \"<\"; private String summaryObjectEndText = \">\"; protected ToStringStyle() { super(); } public void appendSuper(StringBuffer buffer, String superToString) { appendToString(buffer, superToString); } public void appendToString(StringBuffer buffer, String toString) { if (toString != null) { int pos1 = toString.indexOf(contentStart) + contentStart.length(); int pos2 = toString.lastIndexOf(contentEnd); if (pos1 != pos2 && pos1 >= 0 && pos2 >= 0) { String data = toString.substring(pos1, pos2); if (fieldSeparatorAtStart) { removeLastFieldSeparator(buffer); } buffer.append(data); appendFieldSeparator(buffer); } } } public void appendStart(StringBuffer buffer, Object object) { if (object != null) { appendClassName(buffer, object); appendIdentityHashCode(buffer, object); appendContentStart(buffer); if (fieldSeparatorAtStart) { appendFieldSeparator(buffer); } } } public void appendEnd(StringBuffer buffer, Object object) { if (this.fieldSeparatorAtEnd == false) { removeLastFieldSeparator(buffer); } appendContentEnd(buffer); unregister(object); } protected void removeLastFieldSeparator(StringBuffer buffer) { int len = buffer.length(); int sepLen = fieldSeparator.length(); if (len > 0 && sepLen > 0 && len >= sepLen) { boolean match = true; for (int i = 0; i < sepLen; i++) { if (buffer.charAt(len - 1 - i) != fieldSeparator.charAt(sepLen - 1 - i)) { match = false; break; } } if (match) { buffer.setLength(len - sepLen); } } } public void append(StringBuffer buffer, String fieldName, Object value, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (value == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, value, isFullDetail(fullDetail)); } appendFieldEnd(buffer, fieldName); } protected void appendInternal(StringBuffer buffer, String fieldName, Object value, boolean detail) { if (isRegistered(value) && !(value instanceof Number || value instanceof Boolean || value instanceof Character)) { appendCyclicObject(buffer, fieldName, value); return; } register(value); try { if (value instanceof Collection<?>) { if (detail) { appendDetail(buffer, fieldName, (Collection<?>) value); } else { appendSummarySize(buffer, fieldName, ((Collection<?>) value).size()); } } else if (value instanceof Map<?, ?>) { if (detail) { appendDetail(buffer, fieldName, (Map<?, ?>) value); } else { appendSummarySize(buffer, fieldName, ((Map<?, ?>) value).size()); } } else if (value instanceof long[]) { if (detail) { appendDetail(buffer, fieldName, (long[]) value); } else { appendSummary(buffer, fieldName, (long[]) value); } } else if (value instanceof int[]) { if (detail) { appendDetail(buffer, fieldName, (int[]) value); } else { appendSummary(buffer, fieldName, (int[]) value); } } else if (value instanceof short[]) { if (detail) { appendDetail(buffer, fieldName, (short[]) value); } else { appendSummary(buffer, fieldName, (short[]) value); } } else if (value instanceof byte[]) { if (detail) { appendDetail(buffer, fieldName, (byte[]) value); } else { appendSummary(buffer, fieldName, (byte[]) value); } } else if (value instanceof char[]) { if (detail) { appendDetail(buffer, fieldName, (char[]) value); } else { appendSummary(buffer, fieldName, (char[]) value); } } else if (value instanceof double[]) { if (detail) { appendDetail(buffer, fieldName, (double[]) value); } else { appendSummary(buffer, fieldName, (double[]) value); } } else if (value instanceof float[]) { if (detail) { appendDetail(buffer, fieldName, (float[]) value); } else { appendSummary(buffer, fieldName, (float[]) value); } } else if (value instanceof boolean[]) { if (detail) { appendDetail(buffer, fieldName, (boolean[]) value); } else { appendSummary(buffer, fieldName, (boolean[]) value); } } else if (value.getClass().isArray()) { if (detail) { appendDetail(buffer, fieldName, (Object[]) value); } else { appendSummary(buffer, fieldName, (Object[]) value); } } else { if (detail) { appendDetail(buffer, fieldName, value); } else { appendSummary(buffer, fieldName, value); } } } finally { unregister(value); } } protected void appendCyclicObject(StringBuffer buffer, String fieldName, Object value) { ObjectUtils.identityToString(buffer, value); } protected void appendDetail(StringBuffer buffer, String fieldName, Object value) { buffer.append(value); } protected void appendDetail(StringBuffer buffer, String fieldName, Collection<?> coll) { buffer.append(coll); } protected void appendDetail(StringBuffer buffer, String fieldName, Map<?, ?> map) { buffer.append(map); } protected void appendSummary(StringBuffer buffer, String fieldName, Object value) { buffer.append(summaryObjectStartText); buffer.append(getShortClassName(value.getClass())); buffer.append(summaryObjectEndText); } public void append(StringBuffer buffer, String fieldName, long value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, long value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, int value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, int value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, short value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, short value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, byte value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, byte value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, char value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, char value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, double value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, double value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, float value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, float value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, boolean value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, boolean value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, Object[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, Object[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { Object item = array[i]; if (i > 0) { buffer.append(arraySeparator); } if (item == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, item, arrayContentDetail); } } buffer.append(arrayEnd); } protected void reflectionAppendArrayDetail(StringBuffer buffer, String fieldName, Object array) { buffer.append(arrayStart); int length = Array.getLength(array); for (int i = 0; i < length; i++) { Object item = Array.get(array, i); if (i > 0) { buffer.append(arraySeparator); } if (item == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, item, arrayContentDetail); } } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, Object[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, long[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, long[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, long[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, int[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, int[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, int[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, short[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, short[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, short[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, byte[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, byte[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, byte[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, char[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, char[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, char[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, double[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, double[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, double[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, float[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, float[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, float[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, boolean[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, boolean[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, boolean[] array) { appendSummarySize(buffer, fieldName, array.length); } protected void appendClassName(StringBuffer buffer, Object object) { if (useClassName && object != null) { register(object); if (useShortClassName) { buffer.append(getShortClassName(object.getClass())); } else { buffer.append(object.getClass().getName()); } } } protected void appendIdentityHashCode(StringBuffer buffer, Object object) { if (this.isUseIdentityHashCode() && object!=null) { register(object); buffer.append('@'); buffer.append(Integer.toHexString(System.identityHashCode(object))); } } protected void appendContentStart(StringBuffer buffer) { buffer.append(contentStart); } protected void appendContentEnd(StringBuffer buffer) { buffer.append(contentEnd); } protected void appendNullText(StringBuffer buffer, String fieldName) { buffer.append(nullText); } protected void appendFieldSeparator(StringBuffer buffer) { buffer.append(fieldSeparator); } protected void appendFieldStart(StringBuffer buffer, String fieldName) { if (useFieldNames && fieldName != null) { buffer.append(fieldName); buffer.append(fieldNameValueSeparator); } } protected void appendFieldEnd(StringBuffer buffer, String fieldName) { appendFieldSeparator(buffer); } protected void appendSummarySize(StringBuffer buffer, String fieldName, int size) { buffer.append(sizeStartText); buffer.append(size); buffer.append(sizeEndText); } protected boolean isFullDetail(Boolean fullDetailRequest) { if (fullDetailRequest == null) { return defaultFullDetail; } return fullDetailRequest.booleanValue(); } protected String getShortClassName(Class<?> cls) { return ClassUtils.getShortClassName(cls); } protected boolean isUseClassName() { return useClassName; } protected void setUseClassName(boolean useClassName) { this.useClassName = useClassName; } protected boolean isUseShortClassName() { return useShortClassName; } protected void setUseShortClassName(boolean useShortClassName) { this.useShortClassName = useShortClassName; } protected boolean isUseIdentityHashCode() { return useIdentityHashCode; } protected void setUseIdentityHashCode(boolean useIdentityHashCode) { this.useIdentityHashCode = useIdentityHashCode; } protected boolean isUseFieldNames() { return useFieldNames; } protected void setUseFieldNames(boolean useFieldNames) { this.useFieldNames = useFieldNames; } protected boolean isDefaultFullDetail() { return defaultFullDetail; } protected void setDefaultFullDetail(boolean defaultFullDetail) { this.defaultFullDetail = defaultFullDetail; } protected boolean isArrayContentDetail() { return arrayContentDetail; } protected void setArrayContentDetail(boolean arrayContentDetail) { this.arrayContentDetail = arrayContentDetail; } protected String getArrayStart() { return arrayStart; } protected void setArrayStart(String arrayStart) { if (arrayStart == null) { arrayStart = \"\"; } this.arrayStart = arrayStart; } protected String getArrayEnd() { return arrayEnd; } protected void setArrayEnd(String arrayEnd) { if (arrayEnd == null) { arrayEnd = \"\"; } this.arrayEnd = arrayEnd; } protected String getArraySeparator() { return arraySeparator; } protected void setArraySeparator(String arraySeparator) { if (arraySeparator == null) { arraySeparator = \"\"; } this.arraySeparator = arraySeparator; } protected String getContentStart() { return contentStart; } protected void setContentStart(String contentStart) { if (contentStart == null) { contentStart = \"\"; } this.contentStart = contentStart; } protected String getContentEnd() { return contentEnd; } protected void setContentEnd(String contentEnd) { if (contentEnd == null) { contentEnd = \"\"; } this.contentEnd = contentEnd; } protected String getFieldNameValueSeparator() { return fieldNameValueSeparator; } protected void setFieldNameValueSeparator(String fieldNameValueSeparator) { if (fieldNameValueSeparator == null) { fieldNameValueSeparator = \"\"; } this.fieldNameValueSeparator = fieldNameValueSeparator; } protected String getFieldSeparator() { return fieldSeparator; } protected void setFieldSeparator(String fieldSeparator) { if (fieldSeparator == null) { fieldSeparator = \"\"; } this.fieldSeparator = fieldSeparator; } protected boolean isFieldSeparatorAtStart() { return fieldSeparatorAtStart; } protected void setFieldSeparatorAtStart(boolean fieldSeparatorAtStart) { this.fieldSeparatorAtStart = fieldSeparatorAtStart; } protected boolean isFieldSeparatorAtEnd() { return fieldSeparatorAtEnd; } protected void setFieldSeparatorAtEnd(boolean fieldSeparatorAtEnd) { this.fieldSeparatorAtEnd = fieldSeparatorAtEnd; } protected String getNullText() { return nullText; } protected void setNullText(String nullText) { if (nullText == null) { nullText = \"\"; } this.nullText = nullText; } protected String getSizeStartText() { return sizeStartText; } protected void setSizeStartText(String sizeStartText) { if (sizeStartText == null) { sizeStartText = \"\"; } this.sizeStartText = sizeStartText; } protected String getSizeEndText() { return sizeEndText; } protected void setSizeEndText(String sizeEndText) { if (sizeEndText == null) { sizeEndText = \"\"; } this.sizeEndText = sizeEndText; } protected String getSummaryObjectStartText() { return summaryObjectStartText; } protected void setSummaryObjectStartText(String summaryObjectStartText) { if (summaryObjectStartText == null) { summaryObjectStartText = \"\"; } this.summaryObjectStartText = summaryObjectStartText; } protected String getSummaryObjectEndText() { return summaryObjectEndText; } protected void setSummaryObjectEndText(String summaryObjectEndText) { if (summaryObjectEndText == null) { summaryObjectEndText = \"\"; } this.summaryObjectEndText = summaryObjectEndText; } private static final class DefaultToStringStyle extends ToStringStyle {\n", "projects": [{"project": "Lang", "id": 34}]}
{"method": "// Focal method:\npublic abstract class ToStringStyle implements Serializable { public void append(StringBuffer buffer, String fieldName, Object value, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (value == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, value, isFullDetail(fullDetail)); } appendFieldEnd(buffer, fieldName); } protected ToStringStyle(); void appendSuper(StringBuffer buffer, String superToString); void appendToString(StringBuffer buffer, String toString); void appendStart(StringBuffer buffer, Object object); void appendEnd(StringBuffer buffer, Object object); void append(StringBuffer buffer, String fieldName, Object value, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, long value); void append(StringBuffer buffer, String fieldName, int value); void append(StringBuffer buffer, String fieldName, short value); void append(StringBuffer buffer, String fieldName, byte value); void append(StringBuffer buffer, String fieldName, char value); void append(StringBuffer buffer, String fieldName, double value); void append(StringBuffer buffer, String fieldName, float value); void append(StringBuffer buffer, String fieldName, boolean value); void append(StringBuffer buffer, String fieldName, Object[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, long[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, int[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, short[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, byte[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, char[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, double[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, float[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, boolean[] array, Boolean fullDetail); static final ToStringStyle DEFAULT_STYLE; static final ToStringStyle MULTI_LINE_STYLE; static final ToStringStyle NO_FIELD_NAMES_STYLE; static final ToStringStyle SHORT_PREFIX_STYLE; static final ToStringStyle SIMPLE_STYLE; }\n// Avaible SubClasses:\n// public class StandardToStringStyle extends ToStringStyle {\n// public abstract class ToStringStyle implements Serializable { public static final ToStringStyle DEFAULT_STYLE = new DefaultToStringStyle(); public static final ToStringStyle MULTI_LINE_STYLE = new MultiLineToStringStyle(); public static final ToStringStyle NO_FIELD_NAMES_STYLE = new NoFieldNameToStringStyle(); public static final ToStringStyle SHORT_PREFIX_STYLE = new ShortPrefixToStringStyle(); public static final ToStringStyle SIMPLE_STYLE = new SimpleToStringStyle(); private static final ThreadLocal<WeakHashMap<Object, Object>> REGISTRY = new ThreadLocal<WeakHashMap<Object,Object>>(); static Map<Object, Object> getRegistry() { return REGISTRY.get() != null ? REGISTRY.get() : Collections.<Object, Object>emptyMap(); } static boolean isRegistered(Object value) { Map<Object, Object> m = getRegistry(); return m.containsKey(value); } static void register(Object value) { if (value != null) { WeakHashMap<Object, Object> m; synchronized (ToStringStyle.class) { m = REGISTRY.get(); if (m == null) { m = new WeakHashMap<Object, Object>(); REGISTRY.set(m); } } m.put(value, null); } } static void unregister(Object value) { if (value != null) { WeakHashMap<Object, Object> m; synchronized (ToStringStyle.class) { m = REGISTRY.get(); if (m != null) { m.remove(value); if (m.isEmpty()) { REGISTRY.remove(); } } } } } private boolean useFieldNames = true; private boolean useClassName = true; private boolean useShortClassName = false; private boolean useIdentityHashCode = true; private String contentStart = \"[\"; private String contentEnd = \"]\"; private String fieldNameValueSeparator = \"=\"; private boolean fieldSeparatorAtStart = false; private boolean fieldSeparatorAtEnd = false; private String fieldSeparator = \",\"; private String arrayStart = \"{\"; private String arraySeparator = \",\"; private boolean arrayContentDetail = true; private String arrayEnd = \"}\"; private boolean defaultFullDetail = true; private String nullText = \"<null>\"; private String sizeStartText = \"<size=\"; private String sizeEndText = \">\"; private String summaryObjectStartText = \"<\"; private String summaryObjectEndText = \">\"; protected ToStringStyle() { super(); } public void appendSuper(StringBuffer buffer, String superToString) { appendToString(buffer, superToString); } public void appendToString(StringBuffer buffer, String toString) { if (toString != null) { int pos1 = toString.indexOf(contentStart) + contentStart.length(); int pos2 = toString.lastIndexOf(contentEnd); if (pos1 != pos2 && pos1 >= 0 && pos2 >= 0) { String data = toString.substring(pos1, pos2); if (fieldSeparatorAtStart) { removeLastFieldSeparator(buffer); } buffer.append(data); appendFieldSeparator(buffer); } } } public void appendStart(StringBuffer buffer, Object object) { if (object != null) { appendClassName(buffer, object); appendIdentityHashCode(buffer, object); appendContentStart(buffer); if (fieldSeparatorAtStart) { appendFieldSeparator(buffer); } } } public void appendEnd(StringBuffer buffer, Object object) { if (this.fieldSeparatorAtEnd == false) { removeLastFieldSeparator(buffer); } appendContentEnd(buffer); unregister(object); } protected void removeLastFieldSeparator(StringBuffer buffer) { int len = buffer.length(); int sepLen = fieldSeparator.length(); if (len > 0 && sepLen > 0 && len >= sepLen) { boolean match = true; for (int i = 0; i < sepLen; i++) { if (buffer.charAt(len - 1 - i) != fieldSeparator.charAt(sepLen - 1 - i)) { match = false; break; } } if (match) { buffer.setLength(len - sepLen); } } } public void append(StringBuffer buffer, String fieldName, Object value, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (value == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, value, isFullDetail(fullDetail)); } appendFieldEnd(buffer, fieldName); } protected void appendInternal(StringBuffer buffer, String fieldName, Object value, boolean detail) { if (isRegistered(value) && !(value instanceof Number || value instanceof Boolean || value instanceof Character)) { appendCyclicObject(buffer, fieldName, value); return; } register(value); try { if (value instanceof Collection<?>) { if (detail) { appendDetail(buffer, fieldName, (Collection<?>) value); } else { appendSummarySize(buffer, fieldName, ((Collection<?>) value).size()); } } else if (value instanceof Map<?, ?>) { if (detail) { appendDetail(buffer, fieldName, (Map<?, ?>) value); } else { appendSummarySize(buffer, fieldName, ((Map<?, ?>) value).size()); } } else if (value instanceof long[]) { if (detail) { appendDetail(buffer, fieldName, (long[]) value); } else { appendSummary(buffer, fieldName, (long[]) value); } } else if (value instanceof int[]) { if (detail) { appendDetail(buffer, fieldName, (int[]) value); } else { appendSummary(buffer, fieldName, (int[]) value); } } else if (value instanceof short[]) { if (detail) { appendDetail(buffer, fieldName, (short[]) value); } else { appendSummary(buffer, fieldName, (short[]) value); } } else if (value instanceof byte[]) { if (detail) { appendDetail(buffer, fieldName, (byte[]) value); } else { appendSummary(buffer, fieldName, (byte[]) value); } } else if (value instanceof char[]) { if (detail) { appendDetail(buffer, fieldName, (char[]) value); } else { appendSummary(buffer, fieldName, (char[]) value); } } else if (value instanceof double[]) { if (detail) { appendDetail(buffer, fieldName, (double[]) value); } else { appendSummary(buffer, fieldName, (double[]) value); } } else if (value instanceof float[]) { if (detail) { appendDetail(buffer, fieldName, (float[]) value); } else { appendSummary(buffer, fieldName, (float[]) value); } } else if (value instanceof boolean[]) { if (detail) { appendDetail(buffer, fieldName, (boolean[]) value); } else { appendSummary(buffer, fieldName, (boolean[]) value); } } else if (value.getClass().isArray()) { if (detail) { appendDetail(buffer, fieldName, (Object[]) value); } else { appendSummary(buffer, fieldName, (Object[]) value); } } else { if (detail) { appendDetail(buffer, fieldName, value); } else { appendSummary(buffer, fieldName, value); } } } finally { unregister(value); } } protected void appendCyclicObject(StringBuffer buffer, String fieldName, Object value) { ObjectUtils.identityToString(buffer, value); } protected void appendDetail(StringBuffer buffer, String fieldName, Object value) { buffer.append(value); } protected void appendDetail(StringBuffer buffer, String fieldName, Collection<?> coll) { buffer.append(coll); } protected void appendDetail(StringBuffer buffer, String fieldName, Map<?, ?> map) { buffer.append(map); } protected void appendSummary(StringBuffer buffer, String fieldName, Object value) { buffer.append(summaryObjectStartText); buffer.append(getShortClassName(value.getClass())); buffer.append(summaryObjectEndText); } public void append(StringBuffer buffer, String fieldName, long value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, long value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, int value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, int value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, short value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, short value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, byte value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, byte value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, char value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, char value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, double value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, double value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, float value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, float value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, boolean value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, boolean value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, Object[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, Object[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { Object item = array[i]; if (i > 0) { buffer.append(arraySeparator); } if (item == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, item, arrayContentDetail); } } buffer.append(arrayEnd); } protected void reflectionAppendArrayDetail(StringBuffer buffer, String fieldName, Object array) { buffer.append(arrayStart); int length = Array.getLength(array); for (int i = 0; i < length; i++) { Object item = Array.get(array, i); if (i > 0) { buffer.append(arraySeparator); } if (item == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, item, arrayContentDetail); } } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, Object[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, long[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, long[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, long[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, int[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, int[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, int[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, short[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, short[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, short[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, byte[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, byte[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, byte[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, char[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, char[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, char[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, double[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, double[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, double[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, float[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, float[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, float[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, boolean[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, boolean[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, boolean[] array) { appendSummarySize(buffer, fieldName, array.length); } protected void appendClassName(StringBuffer buffer, Object object) { if (useClassName && object != null) { register(object); if (useShortClassName) { buffer.append(getShortClassName(object.getClass())); } else { buffer.append(object.getClass().getName()); } } } protected void appendIdentityHashCode(StringBuffer buffer, Object object) { if (this.isUseIdentityHashCode() && object!=null) { register(object); buffer.append('@'); buffer.append(Integer.toHexString(System.identityHashCode(object))); } } protected void appendContentStart(StringBuffer buffer) { buffer.append(contentStart); } protected void appendContentEnd(StringBuffer buffer) { buffer.append(contentEnd); } protected void appendNullText(StringBuffer buffer, String fieldName) { buffer.append(nullText); } protected void appendFieldSeparator(StringBuffer buffer) { buffer.append(fieldSeparator); } protected void appendFieldStart(StringBuffer buffer, String fieldName) { if (useFieldNames && fieldName != null) { buffer.append(fieldName); buffer.append(fieldNameValueSeparator); } } protected void appendFieldEnd(StringBuffer buffer, String fieldName) { appendFieldSeparator(buffer); } protected void appendSummarySize(StringBuffer buffer, String fieldName, int size) { buffer.append(sizeStartText); buffer.append(size); buffer.append(sizeEndText); } protected boolean isFullDetail(Boolean fullDetailRequest) { if (fullDetailRequest == null) { return defaultFullDetail; } return fullDetailRequest.booleanValue(); } protected String getShortClassName(Class<?> cls) { return ClassUtils.getShortClassName(cls); } protected boolean isUseClassName() { return useClassName; } protected void setUseClassName(boolean useClassName) { this.useClassName = useClassName; } protected boolean isUseShortClassName() { return useShortClassName; } protected void setUseShortClassName(boolean useShortClassName) { this.useShortClassName = useShortClassName; } protected boolean isUseIdentityHashCode() { return useIdentityHashCode; } protected void setUseIdentityHashCode(boolean useIdentityHashCode) { this.useIdentityHashCode = useIdentityHashCode; } protected boolean isUseFieldNames() { return useFieldNames; } protected void setUseFieldNames(boolean useFieldNames) { this.useFieldNames = useFieldNames; } protected boolean isDefaultFullDetail() { return defaultFullDetail; } protected void setDefaultFullDetail(boolean defaultFullDetail) { this.defaultFullDetail = defaultFullDetail; } protected boolean isArrayContentDetail() { return arrayContentDetail; } protected void setArrayContentDetail(boolean arrayContentDetail) { this.arrayContentDetail = arrayContentDetail; } protected String getArrayStart() { return arrayStart; } protected void setArrayStart(String arrayStart) { if (arrayStart == null) { arrayStart = \"\"; } this.arrayStart = arrayStart; } protected String getArrayEnd() { return arrayEnd; } protected void setArrayEnd(String arrayEnd) { if (arrayEnd == null) { arrayEnd = \"\"; } this.arrayEnd = arrayEnd; } protected String getArraySeparator() { return arraySeparator; } protected void setArraySeparator(String arraySeparator) { if (arraySeparator == null) { arraySeparator = \"\"; } this.arraySeparator = arraySeparator; } protected String getContentStart() { return contentStart; } protected void setContentStart(String contentStart) { if (contentStart == null) { contentStart = \"\"; } this.contentStart = contentStart; } protected String getContentEnd() { return contentEnd; } protected void setContentEnd(String contentEnd) { if (contentEnd == null) { contentEnd = \"\"; } this.contentEnd = contentEnd; } protected String getFieldNameValueSeparator() { return fieldNameValueSeparator; } protected void setFieldNameValueSeparator(String fieldNameValueSeparator) { if (fieldNameValueSeparator == null) { fieldNameValueSeparator = \"\"; } this.fieldNameValueSeparator = fieldNameValueSeparator; } protected String getFieldSeparator() { return fieldSeparator; } protected void setFieldSeparator(String fieldSeparator) { if (fieldSeparator == null) { fieldSeparator = \"\"; } this.fieldSeparator = fieldSeparator; } protected boolean isFieldSeparatorAtStart() { return fieldSeparatorAtStart; } protected void setFieldSeparatorAtStart(boolean fieldSeparatorAtStart) { this.fieldSeparatorAtStart = fieldSeparatorAtStart; } protected boolean isFieldSeparatorAtEnd() { return fieldSeparatorAtEnd; } protected void setFieldSeparatorAtEnd(boolean fieldSeparatorAtEnd) { this.fieldSeparatorAtEnd = fieldSeparatorAtEnd; } protected String getNullText() { return nullText; } protected void setNullText(String nullText) { if (nullText == null) { nullText = \"\"; } this.nullText = nullText; } protected String getSizeStartText() { return sizeStartText; } protected void setSizeStartText(String sizeStartText) { if (sizeStartText == null) { sizeStartText = \"\"; } this.sizeStartText = sizeStartText; } protected String getSizeEndText() { return sizeEndText; } protected void setSizeEndText(String sizeEndText) { if (sizeEndText == null) { sizeEndText = \"\"; } this.sizeEndText = sizeEndText; } protected String getSummaryObjectStartText() { return summaryObjectStartText; } protected void setSummaryObjectStartText(String summaryObjectStartText) { if (summaryObjectStartText == null) { summaryObjectStartText = \"\"; } this.summaryObjectStartText = summaryObjectStartText; } protected String getSummaryObjectEndText() { return summaryObjectEndText; } protected void setSummaryObjectEndText(String summaryObjectEndText) { if (summaryObjectEndText == null) { summaryObjectEndText = \"\"; } this.summaryObjectEndText = summaryObjectEndText; } private static final class DefaultToStringStyle extends ToStringStyle {\n", "projects": [{"project": "Lang", "id": 34}]}
{"method": "// Focal method:\npublic abstract class ToStringStyle implements Serializable { public void appendSuper(StringBuffer buffer, String superToString) { appendToString(buffer, superToString); } protected ToStringStyle(); void appendSuper(StringBuffer buffer, String superToString); void appendToString(StringBuffer buffer, String toString); void appendStart(StringBuffer buffer, Object object); void appendEnd(StringBuffer buffer, Object object); void append(StringBuffer buffer, String fieldName, Object value, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, long value); void append(StringBuffer buffer, String fieldName, int value); void append(StringBuffer buffer, String fieldName, short value); void append(StringBuffer buffer, String fieldName, byte value); void append(StringBuffer buffer, String fieldName, char value); void append(StringBuffer buffer, String fieldName, double value); void append(StringBuffer buffer, String fieldName, float value); void append(StringBuffer buffer, String fieldName, boolean value); void append(StringBuffer buffer, String fieldName, Object[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, long[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, int[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, short[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, byte[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, char[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, double[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, float[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, boolean[] array, Boolean fullDetail); static final ToStringStyle DEFAULT_STYLE; static final ToStringStyle MULTI_LINE_STYLE; static final ToStringStyle NO_FIELD_NAMES_STYLE; static final ToStringStyle SHORT_PREFIX_STYLE; static final ToStringStyle SIMPLE_STYLE; }\n// Avaible SubClasses:\n// public class StandardToStringStyle extends ToStringStyle {\n// public abstract class ToStringStyle implements Serializable { public static final ToStringStyle DEFAULT_STYLE = new DefaultToStringStyle(); public static final ToStringStyle MULTI_LINE_STYLE = new MultiLineToStringStyle(); public static final ToStringStyle NO_FIELD_NAMES_STYLE = new NoFieldNameToStringStyle(); public static final ToStringStyle SHORT_PREFIX_STYLE = new ShortPrefixToStringStyle(); public static final ToStringStyle SIMPLE_STYLE = new SimpleToStringStyle(); private static final ThreadLocal<WeakHashMap<Object, Object>> REGISTRY = new ThreadLocal<WeakHashMap<Object,Object>>(); static Map<Object, Object> getRegistry() { return REGISTRY.get() != null ? REGISTRY.get() : Collections.<Object, Object>emptyMap(); } static boolean isRegistered(Object value) { Map<Object, Object> m = getRegistry(); return m.containsKey(value); } static void register(Object value) { if (value != null) { WeakHashMap<Object, Object> m; synchronized (ToStringStyle.class) { m = REGISTRY.get(); if (m == null) { m = new WeakHashMap<Object, Object>(); REGISTRY.set(m); } } m.put(value, null); } } static void unregister(Object value) { if (value != null) { WeakHashMap<Object, Object> m; synchronized (ToStringStyle.class) { m = REGISTRY.get(); if (m != null) { m.remove(value); if (m.isEmpty()) { REGISTRY.remove(); } } } } } private boolean useFieldNames = true; private boolean useClassName = true; private boolean useShortClassName = false; private boolean useIdentityHashCode = true; private String contentStart = \"[\"; private String contentEnd = \"]\"; private String fieldNameValueSeparator = \"=\"; private boolean fieldSeparatorAtStart = false; private boolean fieldSeparatorAtEnd = false; private String fieldSeparator = \",\"; private String arrayStart = \"{\"; private String arraySeparator = \",\"; private boolean arrayContentDetail = true; private String arrayEnd = \"}\"; private boolean defaultFullDetail = true; private String nullText = \"<null>\"; private String sizeStartText = \"<size=\"; private String sizeEndText = \">\"; private String summaryObjectStartText = \"<\"; private String summaryObjectEndText = \">\"; protected ToStringStyle() { super(); } public void appendSuper(StringBuffer buffer, String superToString) { appendToString(buffer, superToString); } public void appendToString(StringBuffer buffer, String toString) { if (toString != null) { int pos1 = toString.indexOf(contentStart) + contentStart.length(); int pos2 = toString.lastIndexOf(contentEnd); if (pos1 != pos2 && pos1 >= 0 && pos2 >= 0) { String data = toString.substring(pos1, pos2); if (fieldSeparatorAtStart) { removeLastFieldSeparator(buffer); } buffer.append(data); appendFieldSeparator(buffer); } } } public void appendStart(StringBuffer buffer, Object object) { if (object != null) { appendClassName(buffer, object); appendIdentityHashCode(buffer, object); appendContentStart(buffer); if (fieldSeparatorAtStart) { appendFieldSeparator(buffer); } } } public void appendEnd(StringBuffer buffer, Object object) { if (this.fieldSeparatorAtEnd == false) { removeLastFieldSeparator(buffer); } appendContentEnd(buffer); unregister(object); } protected void removeLastFieldSeparator(StringBuffer buffer) { int len = buffer.length(); int sepLen = fieldSeparator.length(); if (len > 0 && sepLen > 0 && len >= sepLen) { boolean match = true; for (int i = 0; i < sepLen; i++) { if (buffer.charAt(len - 1 - i) != fieldSeparator.charAt(sepLen - 1 - i)) { match = false; break; } } if (match) { buffer.setLength(len - sepLen); } } } public void append(StringBuffer buffer, String fieldName, Object value, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (value == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, value, isFullDetail(fullDetail)); } appendFieldEnd(buffer, fieldName); } protected void appendInternal(StringBuffer buffer, String fieldName, Object value, boolean detail) { if (isRegistered(value) && !(value instanceof Number || value instanceof Boolean || value instanceof Character)) { appendCyclicObject(buffer, fieldName, value); return; } register(value); try { if (value instanceof Collection<?>) { if (detail) { appendDetail(buffer, fieldName, (Collection<?>) value); } else { appendSummarySize(buffer, fieldName, ((Collection<?>) value).size()); } } else if (value instanceof Map<?, ?>) { if (detail) { appendDetail(buffer, fieldName, (Map<?, ?>) value); } else { appendSummarySize(buffer, fieldName, ((Map<?, ?>) value).size()); } } else if (value instanceof long[]) { if (detail) { appendDetail(buffer, fieldName, (long[]) value); } else { appendSummary(buffer, fieldName, (long[]) value); } } else if (value instanceof int[]) { if (detail) { appendDetail(buffer, fieldName, (int[]) value); } else { appendSummary(buffer, fieldName, (int[]) value); } } else if (value instanceof short[]) { if (detail) { appendDetail(buffer, fieldName, (short[]) value); } else { appendSummary(buffer, fieldName, (short[]) value); } } else if (value instanceof byte[]) { if (detail) { appendDetail(buffer, fieldName, (byte[]) value); } else { appendSummary(buffer, fieldName, (byte[]) value); } } else if (value instanceof char[]) { if (detail) { appendDetail(buffer, fieldName, (char[]) value); } else { appendSummary(buffer, fieldName, (char[]) value); } } else if (value instanceof double[]) { if (detail) { appendDetail(buffer, fieldName, (double[]) value); } else { appendSummary(buffer, fieldName, (double[]) value); } } else if (value instanceof float[]) { if (detail) { appendDetail(buffer, fieldName, (float[]) value); } else { appendSummary(buffer, fieldName, (float[]) value); } } else if (value instanceof boolean[]) { if (detail) { appendDetail(buffer, fieldName, (boolean[]) value); } else { appendSummary(buffer, fieldName, (boolean[]) value); } } else if (value.getClass().isArray()) { if (detail) { appendDetail(buffer, fieldName, (Object[]) value); } else { appendSummary(buffer, fieldName, (Object[]) value); } } else { if (detail) { appendDetail(buffer, fieldName, value); } else { appendSummary(buffer, fieldName, value); } } } finally { unregister(value); } } protected void appendCyclicObject(StringBuffer buffer, String fieldName, Object value) { ObjectUtils.identityToString(buffer, value); } protected void appendDetail(StringBuffer buffer, String fieldName, Object value) { buffer.append(value); } protected void appendDetail(StringBuffer buffer, String fieldName, Collection<?> coll) { buffer.append(coll); } protected void appendDetail(StringBuffer buffer, String fieldName, Map<?, ?> map) { buffer.append(map); } protected void appendSummary(StringBuffer buffer, String fieldName, Object value) { buffer.append(summaryObjectStartText); buffer.append(getShortClassName(value.getClass())); buffer.append(summaryObjectEndText); } public void append(StringBuffer buffer, String fieldName, long value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, long value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, int value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, int value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, short value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, short value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, byte value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, byte value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, char value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, char value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, double value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, double value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, float value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, float value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, boolean value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, boolean value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, Object[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, Object[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { Object item = array[i]; if (i > 0) { buffer.append(arraySeparator); } if (item == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, item, arrayContentDetail); } } buffer.append(arrayEnd); } protected void reflectionAppendArrayDetail(StringBuffer buffer, String fieldName, Object array) { buffer.append(arrayStart); int length = Array.getLength(array); for (int i = 0; i < length; i++) { Object item = Array.get(array, i); if (i > 0) { buffer.append(arraySeparator); } if (item == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, item, arrayContentDetail); } } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, Object[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, long[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, long[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, long[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, int[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, int[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, int[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, short[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, short[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, short[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, byte[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, byte[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, byte[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, char[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, char[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, char[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, double[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, double[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, double[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, float[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, float[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, float[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, boolean[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, boolean[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, boolean[] array) { appendSummarySize(buffer, fieldName, array.length); } protected void appendClassName(StringBuffer buffer, Object object) { if (useClassName && object != null) { register(object); if (useShortClassName) { buffer.append(getShortClassName(object.getClass())); } else { buffer.append(object.getClass().getName()); } } } protected void appendIdentityHashCode(StringBuffer buffer, Object object) { if (this.isUseIdentityHashCode() && object!=null) { register(object); buffer.append('@'); buffer.append(Integer.toHexString(System.identityHashCode(object))); } } protected void appendContentStart(StringBuffer buffer) { buffer.append(contentStart); } protected void appendContentEnd(StringBuffer buffer) { buffer.append(contentEnd); } protected void appendNullText(StringBuffer buffer, String fieldName) { buffer.append(nullText); } protected void appendFieldSeparator(StringBuffer buffer) { buffer.append(fieldSeparator); } protected void appendFieldStart(StringBuffer buffer, String fieldName) { if (useFieldNames && fieldName != null) { buffer.append(fieldName); buffer.append(fieldNameValueSeparator); } } protected void appendFieldEnd(StringBuffer buffer, String fieldName) { appendFieldSeparator(buffer); } protected void appendSummarySize(StringBuffer buffer, String fieldName, int size) { buffer.append(sizeStartText); buffer.append(size); buffer.append(sizeEndText); } protected boolean isFullDetail(Boolean fullDetailRequest) { if (fullDetailRequest == null) { return defaultFullDetail; } return fullDetailRequest.booleanValue(); } protected String getShortClassName(Class<?> cls) { return ClassUtils.getShortClassName(cls); } protected boolean isUseClassName() { return useClassName; } protected void setUseClassName(boolean useClassName) { this.useClassName = useClassName; } protected boolean isUseShortClassName() { return useShortClassName; } protected void setUseShortClassName(boolean useShortClassName) { this.useShortClassName = useShortClassName; } protected boolean isUseIdentityHashCode() { return useIdentityHashCode; } protected void setUseIdentityHashCode(boolean useIdentityHashCode) { this.useIdentityHashCode = useIdentityHashCode; } protected boolean isUseFieldNames() { return useFieldNames; } protected void setUseFieldNames(boolean useFieldNames) { this.useFieldNames = useFieldNames; } protected boolean isDefaultFullDetail() { return defaultFullDetail; } protected void setDefaultFullDetail(boolean defaultFullDetail) { this.defaultFullDetail = defaultFullDetail; } protected boolean isArrayContentDetail() { return arrayContentDetail; } protected void setArrayContentDetail(boolean arrayContentDetail) { this.arrayContentDetail = arrayContentDetail; } protected String getArrayStart() { return arrayStart; } protected void setArrayStart(String arrayStart) { if (arrayStart == null) { arrayStart = \"\"; } this.arrayStart = arrayStart; } protected String getArrayEnd() { return arrayEnd; } protected void setArrayEnd(String arrayEnd) { if (arrayEnd == null) { arrayEnd = \"\"; } this.arrayEnd = arrayEnd; } protected String getArraySeparator() { return arraySeparator; } protected void setArraySeparator(String arraySeparator) { if (arraySeparator == null) { arraySeparator = \"\"; } this.arraySeparator = arraySeparator; } protected String getContentStart() { return contentStart; } protected void setContentStart(String contentStart) { if (contentStart == null) { contentStart = \"\"; } this.contentStart = contentStart; } protected String getContentEnd() { return contentEnd; } protected void setContentEnd(String contentEnd) { if (contentEnd == null) { contentEnd = \"\"; } this.contentEnd = contentEnd; } protected String getFieldNameValueSeparator() { return fieldNameValueSeparator; } protected void setFieldNameValueSeparator(String fieldNameValueSeparator) { if (fieldNameValueSeparator == null) { fieldNameValueSeparator = \"\"; } this.fieldNameValueSeparator = fieldNameValueSeparator; } protected String getFieldSeparator() { return fieldSeparator; } protected void setFieldSeparator(String fieldSeparator) { if (fieldSeparator == null) { fieldSeparator = \"\"; } this.fieldSeparator = fieldSeparator; } protected boolean isFieldSeparatorAtStart() { return fieldSeparatorAtStart; } protected void setFieldSeparatorAtStart(boolean fieldSeparatorAtStart) { this.fieldSeparatorAtStart = fieldSeparatorAtStart; } protected boolean isFieldSeparatorAtEnd() { return fieldSeparatorAtEnd; } protected void setFieldSeparatorAtEnd(boolean fieldSeparatorAtEnd) { this.fieldSeparatorAtEnd = fieldSeparatorAtEnd; } protected String getNullText() { return nullText; } protected void setNullText(String nullText) { if (nullText == null) { nullText = \"\"; } this.nullText = nullText; } protected String getSizeStartText() { return sizeStartText; } protected void setSizeStartText(String sizeStartText) { if (sizeStartText == null) { sizeStartText = \"\"; } this.sizeStartText = sizeStartText; } protected String getSizeEndText() { return sizeEndText; } protected void setSizeEndText(String sizeEndText) { if (sizeEndText == null) { sizeEndText = \"\"; } this.sizeEndText = sizeEndText; } protected String getSummaryObjectStartText() { return summaryObjectStartText; } protected void setSummaryObjectStartText(String summaryObjectStartText) { if (summaryObjectStartText == null) { summaryObjectStartText = \"\"; } this.summaryObjectStartText = summaryObjectStartText; } protected String getSummaryObjectEndText() { return summaryObjectEndText; } protected void setSummaryObjectEndText(String summaryObjectEndText) { if (summaryObjectEndText == null) { summaryObjectEndText = \"\"; } this.summaryObjectEndText = summaryObjectEndText; } private static final class DefaultToStringStyle extends ToStringStyle {\n", "projects": [{"project": "Lang", "id": 34}]}
{"method": "// Focal method:\npublic abstract class ToStringStyle implements Serializable { public void appendEnd(StringBuffer buffer, Object object) { if (this.fieldSeparatorAtEnd == false) { removeLastFieldSeparator(buffer); } appendContentEnd(buffer); unregister(object); } protected ToStringStyle(); void appendSuper(StringBuffer buffer, String superToString); void appendToString(StringBuffer buffer, String toString); void appendStart(StringBuffer buffer, Object object); void appendEnd(StringBuffer buffer, Object object); void append(StringBuffer buffer, String fieldName, Object value, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, long value); void append(StringBuffer buffer, String fieldName, int value); void append(StringBuffer buffer, String fieldName, short value); void append(StringBuffer buffer, String fieldName, byte value); void append(StringBuffer buffer, String fieldName, char value); void append(StringBuffer buffer, String fieldName, double value); void append(StringBuffer buffer, String fieldName, float value); void append(StringBuffer buffer, String fieldName, boolean value); void append(StringBuffer buffer, String fieldName, Object[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, long[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, int[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, short[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, byte[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, char[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, double[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, float[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, boolean[] array, Boolean fullDetail); static final ToStringStyle DEFAULT_STYLE; static final ToStringStyle MULTI_LINE_STYLE; static final ToStringStyle NO_FIELD_NAMES_STYLE; static final ToStringStyle SHORT_PREFIX_STYLE; static final ToStringStyle SIMPLE_STYLE; }\n// Avaible SubClasses:\n// public class StandardToStringStyle extends ToStringStyle {\n// public abstract class ToStringStyle implements Serializable { public static final ToStringStyle DEFAULT_STYLE = new DefaultToStringStyle(); public static final ToStringStyle MULTI_LINE_STYLE = new MultiLineToStringStyle(); public static final ToStringStyle NO_FIELD_NAMES_STYLE = new NoFieldNameToStringStyle(); public static final ToStringStyle SHORT_PREFIX_STYLE = new ShortPrefixToStringStyle(); public static final ToStringStyle SIMPLE_STYLE = new SimpleToStringStyle(); private static final ThreadLocal<WeakHashMap<Object, Object>> REGISTRY = new ThreadLocal<WeakHashMap<Object,Object>>(); static Map<Object, Object> getRegistry() { return REGISTRY.get() != null ? REGISTRY.get() : Collections.<Object, Object>emptyMap(); } static boolean isRegistered(Object value) { Map<Object, Object> m = getRegistry(); return m.containsKey(value); } static void register(Object value) { if (value != null) { WeakHashMap<Object, Object> m; synchronized (ToStringStyle.class) { m = REGISTRY.get(); if (m == null) { m = new WeakHashMap<Object, Object>(); REGISTRY.set(m); } } m.put(value, null); } } static void unregister(Object value) { if (value != null) { WeakHashMap<Object, Object> m; synchronized (ToStringStyle.class) { m = REGISTRY.get(); if (m != null) { m.remove(value); if (m.isEmpty()) { REGISTRY.remove(); } } } } } private boolean useFieldNames = true; private boolean useClassName = true; private boolean useShortClassName = false; private boolean useIdentityHashCode = true; private String contentStart = \"[\"; private String contentEnd = \"]\"; private String fieldNameValueSeparator = \"=\"; private boolean fieldSeparatorAtStart = false; private boolean fieldSeparatorAtEnd = false; private String fieldSeparator = \",\"; private String arrayStart = \"{\"; private String arraySeparator = \",\"; private boolean arrayContentDetail = true; private String arrayEnd = \"}\"; private boolean defaultFullDetail = true; private String nullText = \"<null>\"; private String sizeStartText = \"<size=\"; private String sizeEndText = \">\"; private String summaryObjectStartText = \"<\"; private String summaryObjectEndText = \">\"; protected ToStringStyle() { super(); } public void appendSuper(StringBuffer buffer, String superToString) { appendToString(buffer, superToString); } public void appendToString(StringBuffer buffer, String toString) { if (toString != null) { int pos1 = toString.indexOf(contentStart) + contentStart.length(); int pos2 = toString.lastIndexOf(contentEnd); if (pos1 != pos2 && pos1 >= 0 && pos2 >= 0) { String data = toString.substring(pos1, pos2); if (fieldSeparatorAtStart) { removeLastFieldSeparator(buffer); } buffer.append(data); appendFieldSeparator(buffer); } } } public void appendStart(StringBuffer buffer, Object object) { if (object != null) { appendClassName(buffer, object); appendIdentityHashCode(buffer, object); appendContentStart(buffer); if (fieldSeparatorAtStart) { appendFieldSeparator(buffer); } } } public void appendEnd(StringBuffer buffer, Object object) { if (this.fieldSeparatorAtEnd == false) { removeLastFieldSeparator(buffer); } appendContentEnd(buffer); unregister(object); } protected void removeLastFieldSeparator(StringBuffer buffer) { int len = buffer.length(); int sepLen = fieldSeparator.length(); if (len > 0 && sepLen > 0 && len >= sepLen) { boolean match = true; for (int i = 0; i < sepLen; i++) { if (buffer.charAt(len - 1 - i) != fieldSeparator.charAt(sepLen - 1 - i)) { match = false; break; } } if (match) { buffer.setLength(len - sepLen); } } } public void append(StringBuffer buffer, String fieldName, Object value, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (value == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, value, isFullDetail(fullDetail)); } appendFieldEnd(buffer, fieldName); } protected void appendInternal(StringBuffer buffer, String fieldName, Object value, boolean detail) { if (isRegistered(value) && !(value instanceof Number || value instanceof Boolean || value instanceof Character)) { appendCyclicObject(buffer, fieldName, value); return; } register(value); try { if (value instanceof Collection<?>) { if (detail) { appendDetail(buffer, fieldName, (Collection<?>) value); } else { appendSummarySize(buffer, fieldName, ((Collection<?>) value).size()); } } else if (value instanceof Map<?, ?>) { if (detail) { appendDetail(buffer, fieldName, (Map<?, ?>) value); } else { appendSummarySize(buffer, fieldName, ((Map<?, ?>) value).size()); } } else if (value instanceof long[]) { if (detail) { appendDetail(buffer, fieldName, (long[]) value); } else { appendSummary(buffer, fieldName, (long[]) value); } } else if (value instanceof int[]) { if (detail) { appendDetail(buffer, fieldName, (int[]) value); } else { appendSummary(buffer, fieldName, (int[]) value); } } else if (value instanceof short[]) { if (detail) { appendDetail(buffer, fieldName, (short[]) value); } else { appendSummary(buffer, fieldName, (short[]) value); } } else if (value instanceof byte[]) { if (detail) { appendDetail(buffer, fieldName, (byte[]) value); } else { appendSummary(buffer, fieldName, (byte[]) value); } } else if (value instanceof char[]) { if (detail) { appendDetail(buffer, fieldName, (char[]) value); } else { appendSummary(buffer, fieldName, (char[]) value); } } else if (value instanceof double[]) { if (detail) { appendDetail(buffer, fieldName, (double[]) value); } else { appendSummary(buffer, fieldName, (double[]) value); } } else if (value instanceof float[]) { if (detail) { appendDetail(buffer, fieldName, (float[]) value); } else { appendSummary(buffer, fieldName, (float[]) value); } } else if (value instanceof boolean[]) { if (detail) { appendDetail(buffer, fieldName, (boolean[]) value); } else { appendSummary(buffer, fieldName, (boolean[]) value); } } else if (value.getClass().isArray()) { if (detail) { appendDetail(buffer, fieldName, (Object[]) value); } else { appendSummary(buffer, fieldName, (Object[]) value); } } else { if (detail) { appendDetail(buffer, fieldName, value); } else { appendSummary(buffer, fieldName, value); } } } finally { unregister(value); } } protected void appendCyclicObject(StringBuffer buffer, String fieldName, Object value) { ObjectUtils.identityToString(buffer, value); } protected void appendDetail(StringBuffer buffer, String fieldName, Object value) { buffer.append(value); } protected void appendDetail(StringBuffer buffer, String fieldName, Collection<?> coll) { buffer.append(coll); } protected void appendDetail(StringBuffer buffer, String fieldName, Map<?, ?> map) { buffer.append(map); } protected void appendSummary(StringBuffer buffer, String fieldName, Object value) { buffer.append(summaryObjectStartText); buffer.append(getShortClassName(value.getClass())); buffer.append(summaryObjectEndText); } public void append(StringBuffer buffer, String fieldName, long value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, long value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, int value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, int value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, short value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, short value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, byte value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, byte value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, char value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, char value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, double value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, double value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, float value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, float value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, boolean value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, boolean value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, Object[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, Object[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { Object item = array[i]; if (i > 0) { buffer.append(arraySeparator); } if (item == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, item, arrayContentDetail); } } buffer.append(arrayEnd); } protected void reflectionAppendArrayDetail(StringBuffer buffer, String fieldName, Object array) { buffer.append(arrayStart); int length = Array.getLength(array); for (int i = 0; i < length; i++) { Object item = Array.get(array, i); if (i > 0) { buffer.append(arraySeparator); } if (item == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, item, arrayContentDetail); } } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, Object[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, long[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, long[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, long[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, int[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, int[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, int[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, short[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, short[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, short[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, byte[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, byte[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, byte[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, char[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, char[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, char[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, double[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, double[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, double[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, float[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, float[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, float[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, boolean[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, boolean[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, boolean[] array) { appendSummarySize(buffer, fieldName, array.length); } protected void appendClassName(StringBuffer buffer, Object object) { if (useClassName && object != null) { register(object); if (useShortClassName) { buffer.append(getShortClassName(object.getClass())); } else { buffer.append(object.getClass().getName()); } } } protected void appendIdentityHashCode(StringBuffer buffer, Object object) { if (this.isUseIdentityHashCode() && object!=null) { register(object); buffer.append('@'); buffer.append(Integer.toHexString(System.identityHashCode(object))); } } protected void appendContentStart(StringBuffer buffer) { buffer.append(contentStart); } protected void appendContentEnd(StringBuffer buffer) { buffer.append(contentEnd); } protected void appendNullText(StringBuffer buffer, String fieldName) { buffer.append(nullText); } protected void appendFieldSeparator(StringBuffer buffer) { buffer.append(fieldSeparator); } protected void appendFieldStart(StringBuffer buffer, String fieldName) { if (useFieldNames && fieldName != null) { buffer.append(fieldName); buffer.append(fieldNameValueSeparator); } } protected void appendFieldEnd(StringBuffer buffer, String fieldName) { appendFieldSeparator(buffer); } protected void appendSummarySize(StringBuffer buffer, String fieldName, int size) { buffer.append(sizeStartText); buffer.append(size); buffer.append(sizeEndText); } protected boolean isFullDetail(Boolean fullDetailRequest) { if (fullDetailRequest == null) { return defaultFullDetail; } return fullDetailRequest.booleanValue(); } protected String getShortClassName(Class<?> cls) { return ClassUtils.getShortClassName(cls); } protected boolean isUseClassName() { return useClassName; } protected void setUseClassName(boolean useClassName) { this.useClassName = useClassName; } protected boolean isUseShortClassName() { return useShortClassName; } protected void setUseShortClassName(boolean useShortClassName) { this.useShortClassName = useShortClassName; } protected boolean isUseIdentityHashCode() { return useIdentityHashCode; } protected void setUseIdentityHashCode(boolean useIdentityHashCode) { this.useIdentityHashCode = useIdentityHashCode; } protected boolean isUseFieldNames() { return useFieldNames; } protected void setUseFieldNames(boolean useFieldNames) { this.useFieldNames = useFieldNames; } protected boolean isDefaultFullDetail() { return defaultFullDetail; } protected void setDefaultFullDetail(boolean defaultFullDetail) { this.defaultFullDetail = defaultFullDetail; } protected boolean isArrayContentDetail() { return arrayContentDetail; } protected void setArrayContentDetail(boolean arrayContentDetail) { this.arrayContentDetail = arrayContentDetail; } protected String getArrayStart() { return arrayStart; } protected void setArrayStart(String arrayStart) { if (arrayStart == null) { arrayStart = \"\"; } this.arrayStart = arrayStart; } protected String getArrayEnd() { return arrayEnd; } protected void setArrayEnd(String arrayEnd) { if (arrayEnd == null) { arrayEnd = \"\"; } this.arrayEnd = arrayEnd; } protected String getArraySeparator() { return arraySeparator; } protected void setArraySeparator(String arraySeparator) { if (arraySeparator == null) { arraySeparator = \"\"; } this.arraySeparator = arraySeparator; } protected String getContentStart() { return contentStart; } protected void setContentStart(String contentStart) { if (contentStart == null) { contentStart = \"\"; } this.contentStart = contentStart; } protected String getContentEnd() { return contentEnd; } protected void setContentEnd(String contentEnd) { if (contentEnd == null) { contentEnd = \"\"; } this.contentEnd = contentEnd; } protected String getFieldNameValueSeparator() { return fieldNameValueSeparator; } protected void setFieldNameValueSeparator(String fieldNameValueSeparator) { if (fieldNameValueSeparator == null) { fieldNameValueSeparator = \"\"; } this.fieldNameValueSeparator = fieldNameValueSeparator; } protected String getFieldSeparator() { return fieldSeparator; } protected void setFieldSeparator(String fieldSeparator) { if (fieldSeparator == null) { fieldSeparator = \"\"; } this.fieldSeparator = fieldSeparator; } protected boolean isFieldSeparatorAtStart() { return fieldSeparatorAtStart; } protected void setFieldSeparatorAtStart(boolean fieldSeparatorAtStart) { this.fieldSeparatorAtStart = fieldSeparatorAtStart; } protected boolean isFieldSeparatorAtEnd() { return fieldSeparatorAtEnd; } protected void setFieldSeparatorAtEnd(boolean fieldSeparatorAtEnd) { this.fieldSeparatorAtEnd = fieldSeparatorAtEnd; } protected String getNullText() { return nullText; } protected void setNullText(String nullText) { if (nullText == null) { nullText = \"\"; } this.nullText = nullText; } protected String getSizeStartText() { return sizeStartText; } protected void setSizeStartText(String sizeStartText) { if (sizeStartText == null) { sizeStartText = \"\"; } this.sizeStartText = sizeStartText; } protected String getSizeEndText() { return sizeEndText; } protected void setSizeEndText(String sizeEndText) { if (sizeEndText == null) { sizeEndText = \"\"; } this.sizeEndText = sizeEndText; } protected String getSummaryObjectStartText() { return summaryObjectStartText; } protected void setSummaryObjectStartText(String summaryObjectStartText) { if (summaryObjectStartText == null) { summaryObjectStartText = \"\"; } this.summaryObjectStartText = summaryObjectStartText; } protected String getSummaryObjectEndText() { return summaryObjectEndText; } protected void setSummaryObjectEndText(String summaryObjectEndText) { if (summaryObjectEndText == null) { summaryObjectEndText = \"\"; } this.summaryObjectEndText = summaryObjectEndText; } private static final class DefaultToStringStyle extends ToStringStyle {\n", "projects": [{"project": "Lang", "id": 34}]}
{"method": "// Focal method:\npublic abstract class ToStringStyle implements Serializable { public void append(StringBuffer buffer, String fieldName, short value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected ToStringStyle(); void appendSuper(StringBuffer buffer, String superToString); void appendToString(StringBuffer buffer, String toString); void appendStart(StringBuffer buffer, Object object); void appendEnd(StringBuffer buffer, Object object); void append(StringBuffer buffer, String fieldName, Object value, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, long value); void append(StringBuffer buffer, String fieldName, int value); void append(StringBuffer buffer, String fieldName, short value); void append(StringBuffer buffer, String fieldName, byte value); void append(StringBuffer buffer, String fieldName, char value); void append(StringBuffer buffer, String fieldName, double value); void append(StringBuffer buffer, String fieldName, float value); void append(StringBuffer buffer, String fieldName, boolean value); void append(StringBuffer buffer, String fieldName, Object[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, long[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, int[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, short[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, byte[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, char[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, double[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, float[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, boolean[] array, Boolean fullDetail); static final ToStringStyle DEFAULT_STYLE; static final ToStringStyle MULTI_LINE_STYLE; static final ToStringStyle NO_FIELD_NAMES_STYLE; static final ToStringStyle SHORT_PREFIX_STYLE; static final ToStringStyle SIMPLE_STYLE; }\n// Avaible SubClasses:\n// public class StandardToStringStyle extends ToStringStyle {\n// public abstract class ToStringStyle implements Serializable { public static final ToStringStyle DEFAULT_STYLE = new DefaultToStringStyle(); public static final ToStringStyle MULTI_LINE_STYLE = new MultiLineToStringStyle(); public static final ToStringStyle NO_FIELD_NAMES_STYLE = new NoFieldNameToStringStyle(); public static final ToStringStyle SHORT_PREFIX_STYLE = new ShortPrefixToStringStyle(); public static final ToStringStyle SIMPLE_STYLE = new SimpleToStringStyle(); private static final ThreadLocal<WeakHashMap<Object, Object>> REGISTRY = new ThreadLocal<WeakHashMap<Object,Object>>(); static Map<Object, Object> getRegistry() { return REGISTRY.get() != null ? REGISTRY.get() : Collections.<Object, Object>emptyMap(); } static boolean isRegistered(Object value) { Map<Object, Object> m = getRegistry(); return m.containsKey(value); } static void register(Object value) { if (value != null) { WeakHashMap<Object, Object> m; synchronized (ToStringStyle.class) { m = REGISTRY.get(); if (m == null) { m = new WeakHashMap<Object, Object>(); REGISTRY.set(m); } } m.put(value, null); } } static void unregister(Object value) { if (value != null) { WeakHashMap<Object, Object> m; synchronized (ToStringStyle.class) { m = REGISTRY.get(); if (m != null) { m.remove(value); if (m.isEmpty()) { REGISTRY.remove(); } } } } } private boolean useFieldNames = true; private boolean useClassName = true; private boolean useShortClassName = false; private boolean useIdentityHashCode = true; private String contentStart = \"[\"; private String contentEnd = \"]\"; private String fieldNameValueSeparator = \"=\"; private boolean fieldSeparatorAtStart = false; private boolean fieldSeparatorAtEnd = false; private String fieldSeparator = \",\"; private String arrayStart = \"{\"; private String arraySeparator = \",\"; private boolean arrayContentDetail = true; private String arrayEnd = \"}\"; private boolean defaultFullDetail = true; private String nullText = \"<null>\"; private String sizeStartText = \"<size=\"; private String sizeEndText = \">\"; private String summaryObjectStartText = \"<\"; private String summaryObjectEndText = \">\"; protected ToStringStyle() { super(); } public void appendSuper(StringBuffer buffer, String superToString) { appendToString(buffer, superToString); } public void appendToString(StringBuffer buffer, String toString) { if (toString != null) { int pos1 = toString.indexOf(contentStart) + contentStart.length(); int pos2 = toString.lastIndexOf(contentEnd); if (pos1 != pos2 && pos1 >= 0 && pos2 >= 0) { String data = toString.substring(pos1, pos2); if (fieldSeparatorAtStart) { removeLastFieldSeparator(buffer); } buffer.append(data); appendFieldSeparator(buffer); } } } public void appendStart(StringBuffer buffer, Object object) { if (object != null) { appendClassName(buffer, object); appendIdentityHashCode(buffer, object); appendContentStart(buffer); if (fieldSeparatorAtStart) { appendFieldSeparator(buffer); } } } public void appendEnd(StringBuffer buffer, Object object) { if (this.fieldSeparatorAtEnd == false) { removeLastFieldSeparator(buffer); } appendContentEnd(buffer); unregister(object); } protected void removeLastFieldSeparator(StringBuffer buffer) { int len = buffer.length(); int sepLen = fieldSeparator.length(); if (len > 0 && sepLen > 0 && len >= sepLen) { boolean match = true; for (int i = 0; i < sepLen; i++) { if (buffer.charAt(len - 1 - i) != fieldSeparator.charAt(sepLen - 1 - i)) { match = false; break; } } if (match) { buffer.setLength(len - sepLen); } } } public void append(StringBuffer buffer, String fieldName, Object value, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (value == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, value, isFullDetail(fullDetail)); } appendFieldEnd(buffer, fieldName); } protected void appendInternal(StringBuffer buffer, String fieldName, Object value, boolean detail) { if (isRegistered(value) && !(value instanceof Number || value instanceof Boolean || value instanceof Character)) { appendCyclicObject(buffer, fieldName, value); return; } register(value); try { if (value instanceof Collection<?>) { if (detail) { appendDetail(buffer, fieldName, (Collection<?>) value); } else { appendSummarySize(buffer, fieldName, ((Collection<?>) value).size()); } } else if (value instanceof Map<?, ?>) { if (detail) { appendDetail(buffer, fieldName, (Map<?, ?>) value); } else { appendSummarySize(buffer, fieldName, ((Map<?, ?>) value).size()); } } else if (value instanceof long[]) { if (detail) { appendDetail(buffer, fieldName, (long[]) value); } else { appendSummary(buffer, fieldName, (long[]) value); } } else if (value instanceof int[]) { if (detail) { appendDetail(buffer, fieldName, (int[]) value); } else { appendSummary(buffer, fieldName, (int[]) value); } } else if (value instanceof short[]) { if (detail) { appendDetail(buffer, fieldName, (short[]) value); } else { appendSummary(buffer, fieldName, (short[]) value); } } else if (value instanceof byte[]) { if (detail) { appendDetail(buffer, fieldName, (byte[]) value); } else { appendSummary(buffer, fieldName, (byte[]) value); } } else if (value instanceof char[]) { if (detail) { appendDetail(buffer, fieldName, (char[]) value); } else { appendSummary(buffer, fieldName, (char[]) value); } } else if (value instanceof double[]) { if (detail) { appendDetail(buffer, fieldName, (double[]) value); } else { appendSummary(buffer, fieldName, (double[]) value); } } else if (value instanceof float[]) { if (detail) { appendDetail(buffer, fieldName, (float[]) value); } else { appendSummary(buffer, fieldName, (float[]) value); } } else if (value instanceof boolean[]) { if (detail) { appendDetail(buffer, fieldName, (boolean[]) value); } else { appendSummary(buffer, fieldName, (boolean[]) value); } } else if (value.getClass().isArray()) { if (detail) { appendDetail(buffer, fieldName, (Object[]) value); } else { appendSummary(buffer, fieldName, (Object[]) value); } } else { if (detail) { appendDetail(buffer, fieldName, value); } else { appendSummary(buffer, fieldName, value); } } } finally { unregister(value); } } protected void appendCyclicObject(StringBuffer buffer, String fieldName, Object value) { ObjectUtils.identityToString(buffer, value); } protected void appendDetail(StringBuffer buffer, String fieldName, Object value) { buffer.append(value); } protected void appendDetail(StringBuffer buffer, String fieldName, Collection<?> coll) { buffer.append(coll); } protected void appendDetail(StringBuffer buffer, String fieldName, Map<?, ?> map) { buffer.append(map); } protected void appendSummary(StringBuffer buffer, String fieldName, Object value) { buffer.append(summaryObjectStartText); buffer.append(getShortClassName(value.getClass())); buffer.append(summaryObjectEndText); } public void append(StringBuffer buffer, String fieldName, long value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, long value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, int value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, int value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, short value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, short value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, byte value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, byte value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, char value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, char value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, double value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, double value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, float value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, float value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, boolean value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, boolean value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, Object[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, Object[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { Object item = array[i]; if (i > 0) { buffer.append(arraySeparator); } if (item == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, item, arrayContentDetail); } } buffer.append(arrayEnd); } protected void reflectionAppendArrayDetail(StringBuffer buffer, String fieldName, Object array) { buffer.append(arrayStart); int length = Array.getLength(array); for (int i = 0; i < length; i++) { Object item = Array.get(array, i); if (i > 0) { buffer.append(arraySeparator); } if (item == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, item, arrayContentDetail); } } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, Object[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, long[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, long[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, long[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, int[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, int[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, int[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, short[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, short[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, short[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, byte[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, byte[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, byte[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, char[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, char[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, char[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, double[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, double[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, double[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, float[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, float[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, float[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, boolean[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, boolean[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, boolean[] array) { appendSummarySize(buffer, fieldName, array.length); } protected void appendClassName(StringBuffer buffer, Object object) { if (useClassName && object != null) { register(object); if (useShortClassName) { buffer.append(getShortClassName(object.getClass())); } else { buffer.append(object.getClass().getName()); } } } protected void appendIdentityHashCode(StringBuffer buffer, Object object) { if (this.isUseIdentityHashCode() && object!=null) { register(object); buffer.append('@'); buffer.append(Integer.toHexString(System.identityHashCode(object))); } } protected void appendContentStart(StringBuffer buffer) { buffer.append(contentStart); } protected void appendContentEnd(StringBuffer buffer) { buffer.append(contentEnd); } protected void appendNullText(StringBuffer buffer, String fieldName) { buffer.append(nullText); } protected void appendFieldSeparator(StringBuffer buffer) { buffer.append(fieldSeparator); } protected void appendFieldStart(StringBuffer buffer, String fieldName) { if (useFieldNames && fieldName != null) { buffer.append(fieldName); buffer.append(fieldNameValueSeparator); } } protected void appendFieldEnd(StringBuffer buffer, String fieldName) { appendFieldSeparator(buffer); } protected void appendSummarySize(StringBuffer buffer, String fieldName, int size) { buffer.append(sizeStartText); buffer.append(size); buffer.append(sizeEndText); } protected boolean isFullDetail(Boolean fullDetailRequest) { if (fullDetailRequest == null) { return defaultFullDetail; } return fullDetailRequest.booleanValue(); } protected String getShortClassName(Class<?> cls) { return ClassUtils.getShortClassName(cls); } protected boolean isUseClassName() { return useClassName; } protected void setUseClassName(boolean useClassName) { this.useClassName = useClassName; } protected boolean isUseShortClassName() { return useShortClassName; } protected void setUseShortClassName(boolean useShortClassName) { this.useShortClassName = useShortClassName; } protected boolean isUseIdentityHashCode() { return useIdentityHashCode; } protected void setUseIdentityHashCode(boolean useIdentityHashCode) { this.useIdentityHashCode = useIdentityHashCode; } protected boolean isUseFieldNames() { return useFieldNames; } protected void setUseFieldNames(boolean useFieldNames) { this.useFieldNames = useFieldNames; } protected boolean isDefaultFullDetail() { return defaultFullDetail; } protected void setDefaultFullDetail(boolean defaultFullDetail) { this.defaultFullDetail = defaultFullDetail; } protected boolean isArrayContentDetail() { return arrayContentDetail; } protected void setArrayContentDetail(boolean arrayContentDetail) { this.arrayContentDetail = arrayContentDetail; } protected String getArrayStart() { return arrayStart; } protected void setArrayStart(String arrayStart) { if (arrayStart == null) { arrayStart = \"\"; } this.arrayStart = arrayStart; } protected String getArrayEnd() { return arrayEnd; } protected void setArrayEnd(String arrayEnd) { if (arrayEnd == null) { arrayEnd = \"\"; } this.arrayEnd = arrayEnd; } protected String getArraySeparator() { return arraySeparator; } protected void setArraySeparator(String arraySeparator) { if (arraySeparator == null) { arraySeparator = \"\"; } this.arraySeparator = arraySeparator; } protected String getContentStart() { return contentStart; } protected void setContentStart(String contentStart) { if (contentStart == null) { contentStart = \"\"; } this.contentStart = contentStart; } protected String getContentEnd() { return contentEnd; } protected void setContentEnd(String contentEnd) { if (contentEnd == null) { contentEnd = \"\"; } this.contentEnd = contentEnd; } protected String getFieldNameValueSeparator() { return fieldNameValueSeparator; } protected void setFieldNameValueSeparator(String fieldNameValueSeparator) { if (fieldNameValueSeparator == null) { fieldNameValueSeparator = \"\"; } this.fieldNameValueSeparator = fieldNameValueSeparator; } protected String getFieldSeparator() { return fieldSeparator; } protected void setFieldSeparator(String fieldSeparator) { if (fieldSeparator == null) { fieldSeparator = \"\"; } this.fieldSeparator = fieldSeparator; } protected boolean isFieldSeparatorAtStart() { return fieldSeparatorAtStart; } protected void setFieldSeparatorAtStart(boolean fieldSeparatorAtStart) { this.fieldSeparatorAtStart = fieldSeparatorAtStart; } protected boolean isFieldSeparatorAtEnd() { return fieldSeparatorAtEnd; } protected void setFieldSeparatorAtEnd(boolean fieldSeparatorAtEnd) { this.fieldSeparatorAtEnd = fieldSeparatorAtEnd; } protected String getNullText() { return nullText; } protected void setNullText(String nullText) { if (nullText == null) { nullText = \"\"; } this.nullText = nullText; } protected String getSizeStartText() { return sizeStartText; } protected void setSizeStartText(String sizeStartText) { if (sizeStartText == null) { sizeStartText = \"\"; } this.sizeStartText = sizeStartText; } protected String getSizeEndText() { return sizeEndText; } protected void setSizeEndText(String sizeEndText) { if (sizeEndText == null) { sizeEndText = \"\"; } this.sizeEndText = sizeEndText; } protected String getSummaryObjectStartText() { return summaryObjectStartText; } protected void setSummaryObjectStartText(String summaryObjectStartText) { if (summaryObjectStartText == null) { summaryObjectStartText = \"\"; } this.summaryObjectStartText = summaryObjectStartText; } protected String getSummaryObjectEndText() { return summaryObjectEndText; } protected void setSummaryObjectEndText(String summaryObjectEndText) { if (summaryObjectEndText == null) { summaryObjectEndText = \"\"; } this.summaryObjectEndText = summaryObjectEndText; } private static final class DefaultToStringStyle extends ToStringStyle {\n", "projects": [{"project": "Lang", "id": 34}]}
{"method": "// Focal method:\npublic abstract class ToStringStyle implements Serializable { public void append(StringBuffer buffer, String fieldName, float[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected ToStringStyle(); void appendSuper(StringBuffer buffer, String superToString); void appendToString(StringBuffer buffer, String toString); void appendStart(StringBuffer buffer, Object object); void appendEnd(StringBuffer buffer, Object object); void append(StringBuffer buffer, String fieldName, Object value, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, long value); void append(StringBuffer buffer, String fieldName, int value); void append(StringBuffer buffer, String fieldName, short value); void append(StringBuffer buffer, String fieldName, byte value); void append(StringBuffer buffer, String fieldName, char value); void append(StringBuffer buffer, String fieldName, double value); void append(StringBuffer buffer, String fieldName, float value); void append(StringBuffer buffer, String fieldName, boolean value); void append(StringBuffer buffer, String fieldName, Object[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, long[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, int[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, short[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, byte[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, char[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, double[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, float[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, boolean[] array, Boolean fullDetail); static final ToStringStyle DEFAULT_STYLE; static final ToStringStyle MULTI_LINE_STYLE; static final ToStringStyle NO_FIELD_NAMES_STYLE; static final ToStringStyle SHORT_PREFIX_STYLE; static final ToStringStyle SIMPLE_STYLE; }\n// Avaible SubClasses:\n// public class StandardToStringStyle extends ToStringStyle {\n// public abstract class ToStringStyle implements Serializable { public static final ToStringStyle DEFAULT_STYLE = new DefaultToStringStyle(); public static final ToStringStyle MULTI_LINE_STYLE = new MultiLineToStringStyle(); public static final ToStringStyle NO_FIELD_NAMES_STYLE = new NoFieldNameToStringStyle(); public static final ToStringStyle SHORT_PREFIX_STYLE = new ShortPrefixToStringStyle(); public static final ToStringStyle SIMPLE_STYLE = new SimpleToStringStyle(); private static final ThreadLocal<WeakHashMap<Object, Object>> REGISTRY = new ThreadLocal<WeakHashMap<Object,Object>>(); static Map<Object, Object> getRegistry() { return REGISTRY.get() != null ? REGISTRY.get() : Collections.<Object, Object>emptyMap(); } static boolean isRegistered(Object value) { Map<Object, Object> m = getRegistry(); return m.containsKey(value); } static void register(Object value) { if (value != null) { WeakHashMap<Object, Object> m; synchronized (ToStringStyle.class) { m = REGISTRY.get(); if (m == null) { m = new WeakHashMap<Object, Object>(); REGISTRY.set(m); } } m.put(value, null); } } static void unregister(Object value) { if (value != null) { WeakHashMap<Object, Object> m; synchronized (ToStringStyle.class) { m = REGISTRY.get(); if (m != null) { m.remove(value); if (m.isEmpty()) { REGISTRY.remove(); } } } } } private boolean useFieldNames = true; private boolean useClassName = true; private boolean useShortClassName = false; private boolean useIdentityHashCode = true; private String contentStart = \"[\"; private String contentEnd = \"]\"; private String fieldNameValueSeparator = \"=\"; private boolean fieldSeparatorAtStart = false; private boolean fieldSeparatorAtEnd = false; private String fieldSeparator = \",\"; private String arrayStart = \"{\"; private String arraySeparator = \",\"; private boolean arrayContentDetail = true; private String arrayEnd = \"}\"; private boolean defaultFullDetail = true; private String nullText = \"<null>\"; private String sizeStartText = \"<size=\"; private String sizeEndText = \">\"; private String summaryObjectStartText = \"<\"; private String summaryObjectEndText = \">\"; protected ToStringStyle() { super(); } public void appendSuper(StringBuffer buffer, String superToString) { appendToString(buffer, superToString); } public void appendToString(StringBuffer buffer, String toString) { if (toString != null) { int pos1 = toString.indexOf(contentStart) + contentStart.length(); int pos2 = toString.lastIndexOf(contentEnd); if (pos1 != pos2 && pos1 >= 0 && pos2 >= 0) { String data = toString.substring(pos1, pos2); if (fieldSeparatorAtStart) { removeLastFieldSeparator(buffer); } buffer.append(data); appendFieldSeparator(buffer); } } } public void appendStart(StringBuffer buffer, Object object) { if (object != null) { appendClassName(buffer, object); appendIdentityHashCode(buffer, object); appendContentStart(buffer); if (fieldSeparatorAtStart) { appendFieldSeparator(buffer); } } } public void appendEnd(StringBuffer buffer, Object object) { if (this.fieldSeparatorAtEnd == false) { removeLastFieldSeparator(buffer); } appendContentEnd(buffer); unregister(object); } protected void removeLastFieldSeparator(StringBuffer buffer) { int len = buffer.length(); int sepLen = fieldSeparator.length(); if (len > 0 && sepLen > 0 && len >= sepLen) { boolean match = true; for (int i = 0; i < sepLen; i++) { if (buffer.charAt(len - 1 - i) != fieldSeparator.charAt(sepLen - 1 - i)) { match = false; break; } } if (match) { buffer.setLength(len - sepLen); } } } public void append(StringBuffer buffer, String fieldName, Object value, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (value == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, value, isFullDetail(fullDetail)); } appendFieldEnd(buffer, fieldName); } protected void appendInternal(StringBuffer buffer, String fieldName, Object value, boolean detail) { if (isRegistered(value) && !(value instanceof Number || value instanceof Boolean || value instanceof Character)) { appendCyclicObject(buffer, fieldName, value); return; } register(value); try { if (value instanceof Collection<?>) { if (detail) { appendDetail(buffer, fieldName, (Collection<?>) value); } else { appendSummarySize(buffer, fieldName, ((Collection<?>) value).size()); } } else if (value instanceof Map<?, ?>) { if (detail) { appendDetail(buffer, fieldName, (Map<?, ?>) value); } else { appendSummarySize(buffer, fieldName, ((Map<?, ?>) value).size()); } } else if (value instanceof long[]) { if (detail) { appendDetail(buffer, fieldName, (long[]) value); } else { appendSummary(buffer, fieldName, (long[]) value); } } else if (value instanceof int[]) { if (detail) { appendDetail(buffer, fieldName, (int[]) value); } else { appendSummary(buffer, fieldName, (int[]) value); } } else if (value instanceof short[]) { if (detail) { appendDetail(buffer, fieldName, (short[]) value); } else { appendSummary(buffer, fieldName, (short[]) value); } } else if (value instanceof byte[]) { if (detail) { appendDetail(buffer, fieldName, (byte[]) value); } else { appendSummary(buffer, fieldName, (byte[]) value); } } else if (value instanceof char[]) { if (detail) { appendDetail(buffer, fieldName, (char[]) value); } else { appendSummary(buffer, fieldName, (char[]) value); } } else if (value instanceof double[]) { if (detail) { appendDetail(buffer, fieldName, (double[]) value); } else { appendSummary(buffer, fieldName, (double[]) value); } } else if (value instanceof float[]) { if (detail) { appendDetail(buffer, fieldName, (float[]) value); } else { appendSummary(buffer, fieldName, (float[]) value); } } else if (value instanceof boolean[]) { if (detail) { appendDetail(buffer, fieldName, (boolean[]) value); } else { appendSummary(buffer, fieldName, (boolean[]) value); } } else if (value.getClass().isArray()) { if (detail) { appendDetail(buffer, fieldName, (Object[]) value); } else { appendSummary(buffer, fieldName, (Object[]) value); } } else { if (detail) { appendDetail(buffer, fieldName, value); } else { appendSummary(buffer, fieldName, value); } } } finally { unregister(value); } } protected void appendCyclicObject(StringBuffer buffer, String fieldName, Object value) { ObjectUtils.identityToString(buffer, value); } protected void appendDetail(StringBuffer buffer, String fieldName, Object value) { buffer.append(value); } protected void appendDetail(StringBuffer buffer, String fieldName, Collection<?> coll) { buffer.append(coll); } protected void appendDetail(StringBuffer buffer, String fieldName, Map<?, ?> map) { buffer.append(map); } protected void appendSummary(StringBuffer buffer, String fieldName, Object value) { buffer.append(summaryObjectStartText); buffer.append(getShortClassName(value.getClass())); buffer.append(summaryObjectEndText); } public void append(StringBuffer buffer, String fieldName, long value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, long value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, int value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, int value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, short value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, short value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, byte value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, byte value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, char value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, char value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, double value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, double value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, float value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, float value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, boolean value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, boolean value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, Object[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, Object[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { Object item = array[i]; if (i > 0) { buffer.append(arraySeparator); } if (item == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, item, arrayContentDetail); } } buffer.append(arrayEnd); } protected void reflectionAppendArrayDetail(StringBuffer buffer, String fieldName, Object array) { buffer.append(arrayStart); int length = Array.getLength(array); for (int i = 0; i < length; i++) { Object item = Array.get(array, i); if (i > 0) { buffer.append(arraySeparator); } if (item == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, item, arrayContentDetail); } } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, Object[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, long[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, long[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, long[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, int[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, int[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, int[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, short[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, short[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, short[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, byte[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, byte[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, byte[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, char[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, char[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, char[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, double[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, double[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, double[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, float[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, float[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, float[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, boolean[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, boolean[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, boolean[] array) { appendSummarySize(buffer, fieldName, array.length); } protected void appendClassName(StringBuffer buffer, Object object) { if (useClassName && object != null) { register(object); if (useShortClassName) { buffer.append(getShortClassName(object.getClass())); } else { buffer.append(object.getClass().getName()); } } } protected void appendIdentityHashCode(StringBuffer buffer, Object object) { if (this.isUseIdentityHashCode() && object!=null) { register(object); buffer.append('@'); buffer.append(Integer.toHexString(System.identityHashCode(object))); } } protected void appendContentStart(StringBuffer buffer) { buffer.append(contentStart); } protected void appendContentEnd(StringBuffer buffer) { buffer.append(contentEnd); } protected void appendNullText(StringBuffer buffer, String fieldName) { buffer.append(nullText); } protected void appendFieldSeparator(StringBuffer buffer) { buffer.append(fieldSeparator); } protected void appendFieldStart(StringBuffer buffer, String fieldName) { if (useFieldNames && fieldName != null) { buffer.append(fieldName); buffer.append(fieldNameValueSeparator); } } protected void appendFieldEnd(StringBuffer buffer, String fieldName) { appendFieldSeparator(buffer); } protected void appendSummarySize(StringBuffer buffer, String fieldName, int size) { buffer.append(sizeStartText); buffer.append(size); buffer.append(sizeEndText); } protected boolean isFullDetail(Boolean fullDetailRequest) { if (fullDetailRequest == null) { return defaultFullDetail; } return fullDetailRequest.booleanValue(); } protected String getShortClassName(Class<?> cls) { return ClassUtils.getShortClassName(cls); } protected boolean isUseClassName() { return useClassName; } protected void setUseClassName(boolean useClassName) { this.useClassName = useClassName; } protected boolean isUseShortClassName() { return useShortClassName; } protected void setUseShortClassName(boolean useShortClassName) { this.useShortClassName = useShortClassName; } protected boolean isUseIdentityHashCode() { return useIdentityHashCode; } protected void setUseIdentityHashCode(boolean useIdentityHashCode) { this.useIdentityHashCode = useIdentityHashCode; } protected boolean isUseFieldNames() { return useFieldNames; } protected void setUseFieldNames(boolean useFieldNames) { this.useFieldNames = useFieldNames; } protected boolean isDefaultFullDetail() { return defaultFullDetail; } protected void setDefaultFullDetail(boolean defaultFullDetail) { this.defaultFullDetail = defaultFullDetail; } protected boolean isArrayContentDetail() { return arrayContentDetail; } protected void setArrayContentDetail(boolean arrayContentDetail) { this.arrayContentDetail = arrayContentDetail; } protected String getArrayStart() { return arrayStart; } protected void setArrayStart(String arrayStart) { if (arrayStart == null) { arrayStart = \"\"; } this.arrayStart = arrayStart; } protected String getArrayEnd() { return arrayEnd; } protected void setArrayEnd(String arrayEnd) { if (arrayEnd == null) { arrayEnd = \"\"; } this.arrayEnd = arrayEnd; } protected String getArraySeparator() { return arraySeparator; } protected void setArraySeparator(String arraySeparator) { if (arraySeparator == null) { arraySeparator = \"\"; } this.arraySeparator = arraySeparator; } protected String getContentStart() { return contentStart; } protected void setContentStart(String contentStart) { if (contentStart == null) { contentStart = \"\"; } this.contentStart = contentStart; } protected String getContentEnd() { return contentEnd; } protected void setContentEnd(String contentEnd) { if (contentEnd == null) { contentEnd = \"\"; } this.contentEnd = contentEnd; } protected String getFieldNameValueSeparator() { return fieldNameValueSeparator; } protected void setFieldNameValueSeparator(String fieldNameValueSeparator) { if (fieldNameValueSeparator == null) { fieldNameValueSeparator = \"\"; } this.fieldNameValueSeparator = fieldNameValueSeparator; } protected String getFieldSeparator() { return fieldSeparator; } protected void setFieldSeparator(String fieldSeparator) { if (fieldSeparator == null) { fieldSeparator = \"\"; } this.fieldSeparator = fieldSeparator; } protected boolean isFieldSeparatorAtStart() { return fieldSeparatorAtStart; } protected void setFieldSeparatorAtStart(boolean fieldSeparatorAtStart) { this.fieldSeparatorAtStart = fieldSeparatorAtStart; } protected boolean isFieldSeparatorAtEnd() { return fieldSeparatorAtEnd; } protected void setFieldSeparatorAtEnd(boolean fieldSeparatorAtEnd) { this.fieldSeparatorAtEnd = fieldSeparatorAtEnd; } protected String getNullText() { return nullText; } protected void setNullText(String nullText) { if (nullText == null) { nullText = \"\"; } this.nullText = nullText; } protected String getSizeStartText() { return sizeStartText; } protected void setSizeStartText(String sizeStartText) { if (sizeStartText == null) { sizeStartText = \"\"; } this.sizeStartText = sizeStartText; } protected String getSizeEndText() { return sizeEndText; } protected void setSizeEndText(String sizeEndText) { if (sizeEndText == null) { sizeEndText = \"\"; } this.sizeEndText = sizeEndText; } protected String getSummaryObjectStartText() { return summaryObjectStartText; } protected void setSummaryObjectStartText(String summaryObjectStartText) { if (summaryObjectStartText == null) { summaryObjectStartText = \"\"; } this.summaryObjectStartText = summaryObjectStartText; } protected String getSummaryObjectEndText() { return summaryObjectEndText; } protected void setSummaryObjectEndText(String summaryObjectEndText) { if (summaryObjectEndText == null) { summaryObjectEndText = \"\"; } this.summaryObjectEndText = summaryObjectEndText; } private static final class DefaultToStringStyle extends ToStringStyle {\n", "projects": [{"project": "Lang", "id": 34}]}
{"method": "// Focal method:\npublic abstract class ToStringStyle implements Serializable { public void append(StringBuffer buffer, String fieldName, Object[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected ToStringStyle(); void appendSuper(StringBuffer buffer, String superToString); void appendToString(StringBuffer buffer, String toString); void appendStart(StringBuffer buffer, Object object); void appendEnd(StringBuffer buffer, Object object); void append(StringBuffer buffer, String fieldName, Object value, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, long value); void append(StringBuffer buffer, String fieldName, int value); void append(StringBuffer buffer, String fieldName, short value); void append(StringBuffer buffer, String fieldName, byte value); void append(StringBuffer buffer, String fieldName, char value); void append(StringBuffer buffer, String fieldName, double value); void append(StringBuffer buffer, String fieldName, float value); void append(StringBuffer buffer, String fieldName, boolean value); void append(StringBuffer buffer, String fieldName, Object[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, long[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, int[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, short[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, byte[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, char[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, double[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, float[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, boolean[] array, Boolean fullDetail); static final ToStringStyle DEFAULT_STYLE; static final ToStringStyle MULTI_LINE_STYLE; static final ToStringStyle NO_FIELD_NAMES_STYLE; static final ToStringStyle SHORT_PREFIX_STYLE; static final ToStringStyle SIMPLE_STYLE; }\n// Avaible SubClasses:\n// public class StandardToStringStyle extends ToStringStyle {\n// public abstract class ToStringStyle implements Serializable { public static final ToStringStyle DEFAULT_STYLE = new DefaultToStringStyle(); public static final ToStringStyle MULTI_LINE_STYLE = new MultiLineToStringStyle(); public static final ToStringStyle NO_FIELD_NAMES_STYLE = new NoFieldNameToStringStyle(); public static final ToStringStyle SHORT_PREFIX_STYLE = new ShortPrefixToStringStyle(); public static final ToStringStyle SIMPLE_STYLE = new SimpleToStringStyle(); private static final ThreadLocal<WeakHashMap<Object, Object>> REGISTRY = new ThreadLocal<WeakHashMap<Object,Object>>(); static Map<Object, Object> getRegistry() { return REGISTRY.get() != null ? REGISTRY.get() : Collections.<Object, Object>emptyMap(); } static boolean isRegistered(Object value) { Map<Object, Object> m = getRegistry(); return m.containsKey(value); } static void register(Object value) { if (value != null) { WeakHashMap<Object, Object> m; synchronized (ToStringStyle.class) { m = REGISTRY.get(); if (m == null) { m = new WeakHashMap<Object, Object>(); REGISTRY.set(m); } } m.put(value, null); } } static void unregister(Object value) { if (value != null) { WeakHashMap<Object, Object> m; synchronized (ToStringStyle.class) { m = REGISTRY.get(); if (m != null) { m.remove(value); if (m.isEmpty()) { REGISTRY.remove(); } } } } } private boolean useFieldNames = true; private boolean useClassName = true; private boolean useShortClassName = false; private boolean useIdentityHashCode = true; private String contentStart = \"[\"; private String contentEnd = \"]\"; private String fieldNameValueSeparator = \"=\"; private boolean fieldSeparatorAtStart = false; private boolean fieldSeparatorAtEnd = false; private String fieldSeparator = \",\"; private String arrayStart = \"{\"; private String arraySeparator = \",\"; private boolean arrayContentDetail = true; private String arrayEnd = \"}\"; private boolean defaultFullDetail = true; private String nullText = \"<null>\"; private String sizeStartText = \"<size=\"; private String sizeEndText = \">\"; private String summaryObjectStartText = \"<\"; private String summaryObjectEndText = \">\"; protected ToStringStyle() { super(); } public void appendSuper(StringBuffer buffer, String superToString) { appendToString(buffer, superToString); } public void appendToString(StringBuffer buffer, String toString) { if (toString != null) { int pos1 = toString.indexOf(contentStart) + contentStart.length(); int pos2 = toString.lastIndexOf(contentEnd); if (pos1 != pos2 && pos1 >= 0 && pos2 >= 0) { String data = toString.substring(pos1, pos2); if (fieldSeparatorAtStart) { removeLastFieldSeparator(buffer); } buffer.append(data); appendFieldSeparator(buffer); } } } public void appendStart(StringBuffer buffer, Object object) { if (object != null) { appendClassName(buffer, object); appendIdentityHashCode(buffer, object); appendContentStart(buffer); if (fieldSeparatorAtStart) { appendFieldSeparator(buffer); } } } public void appendEnd(StringBuffer buffer, Object object) { if (this.fieldSeparatorAtEnd == false) { removeLastFieldSeparator(buffer); } appendContentEnd(buffer); unregister(object); } protected void removeLastFieldSeparator(StringBuffer buffer) { int len = buffer.length(); int sepLen = fieldSeparator.length(); if (len > 0 && sepLen > 0 && len >= sepLen) { boolean match = true; for (int i = 0; i < sepLen; i++) { if (buffer.charAt(len - 1 - i) != fieldSeparator.charAt(sepLen - 1 - i)) { match = false; break; } } if (match) { buffer.setLength(len - sepLen); } } } public void append(StringBuffer buffer, String fieldName, Object value, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (value == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, value, isFullDetail(fullDetail)); } appendFieldEnd(buffer, fieldName); } protected void appendInternal(StringBuffer buffer, String fieldName, Object value, boolean detail) { if (isRegistered(value) && !(value instanceof Number || value instanceof Boolean || value instanceof Character)) { appendCyclicObject(buffer, fieldName, value); return; } register(value); try { if (value instanceof Collection<?>) { if (detail) { appendDetail(buffer, fieldName, (Collection<?>) value); } else { appendSummarySize(buffer, fieldName, ((Collection<?>) value).size()); } } else if (value instanceof Map<?, ?>) { if (detail) { appendDetail(buffer, fieldName, (Map<?, ?>) value); } else { appendSummarySize(buffer, fieldName, ((Map<?, ?>) value).size()); } } else if (value instanceof long[]) { if (detail) { appendDetail(buffer, fieldName, (long[]) value); } else { appendSummary(buffer, fieldName, (long[]) value); } } else if (value instanceof int[]) { if (detail) { appendDetail(buffer, fieldName, (int[]) value); } else { appendSummary(buffer, fieldName, (int[]) value); } } else if (value instanceof short[]) { if (detail) { appendDetail(buffer, fieldName, (short[]) value); } else { appendSummary(buffer, fieldName, (short[]) value); } } else if (value instanceof byte[]) { if (detail) { appendDetail(buffer, fieldName, (byte[]) value); } else { appendSummary(buffer, fieldName, (byte[]) value); } } else if (value instanceof char[]) { if (detail) { appendDetail(buffer, fieldName, (char[]) value); } else { appendSummary(buffer, fieldName, (char[]) value); } } else if (value instanceof double[]) { if (detail) { appendDetail(buffer, fieldName, (double[]) value); } else { appendSummary(buffer, fieldName, (double[]) value); } } else if (value instanceof float[]) { if (detail) { appendDetail(buffer, fieldName, (float[]) value); } else { appendSummary(buffer, fieldName, (float[]) value); } } else if (value instanceof boolean[]) { if (detail) { appendDetail(buffer, fieldName, (boolean[]) value); } else { appendSummary(buffer, fieldName, (boolean[]) value); } } else if (value.getClass().isArray()) { if (detail) { appendDetail(buffer, fieldName, (Object[]) value); } else { appendSummary(buffer, fieldName, (Object[]) value); } } else { if (detail) { appendDetail(buffer, fieldName, value); } else { appendSummary(buffer, fieldName, value); } } } finally { unregister(value); } } protected void appendCyclicObject(StringBuffer buffer, String fieldName, Object value) { ObjectUtils.identityToString(buffer, value); } protected void appendDetail(StringBuffer buffer, String fieldName, Object value) { buffer.append(value); } protected void appendDetail(StringBuffer buffer, String fieldName, Collection<?> coll) { buffer.append(coll); } protected void appendDetail(StringBuffer buffer, String fieldName, Map<?, ?> map) { buffer.append(map); } protected void appendSummary(StringBuffer buffer, String fieldName, Object value) { buffer.append(summaryObjectStartText); buffer.append(getShortClassName(value.getClass())); buffer.append(summaryObjectEndText); } public void append(StringBuffer buffer, String fieldName, long value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, long value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, int value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, int value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, short value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, short value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, byte value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, byte value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, char value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, char value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, double value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, double value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, float value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, float value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, boolean value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, boolean value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, Object[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, Object[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { Object item = array[i]; if (i > 0) { buffer.append(arraySeparator); } if (item == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, item, arrayContentDetail); } } buffer.append(arrayEnd); } protected void reflectionAppendArrayDetail(StringBuffer buffer, String fieldName, Object array) { buffer.append(arrayStart); int length = Array.getLength(array); for (int i = 0; i < length; i++) { Object item = Array.get(array, i); if (i > 0) { buffer.append(arraySeparator); } if (item == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, item, arrayContentDetail); } } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, Object[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, long[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, long[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, long[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, int[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, int[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, int[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, short[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, short[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, short[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, byte[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, byte[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, byte[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, char[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, char[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, char[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, double[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, double[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, double[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, float[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, float[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, float[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, boolean[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, boolean[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, boolean[] array) { appendSummarySize(buffer, fieldName, array.length); } protected void appendClassName(StringBuffer buffer, Object object) { if (useClassName && object != null) { register(object); if (useShortClassName) { buffer.append(getShortClassName(object.getClass())); } else { buffer.append(object.getClass().getName()); } } } protected void appendIdentityHashCode(StringBuffer buffer, Object object) { if (this.isUseIdentityHashCode() && object!=null) { register(object); buffer.append('@'); buffer.append(Integer.toHexString(System.identityHashCode(object))); } } protected void appendContentStart(StringBuffer buffer) { buffer.append(contentStart); } protected void appendContentEnd(StringBuffer buffer) { buffer.append(contentEnd); } protected void appendNullText(StringBuffer buffer, String fieldName) { buffer.append(nullText); } protected void appendFieldSeparator(StringBuffer buffer) { buffer.append(fieldSeparator); } protected void appendFieldStart(StringBuffer buffer, String fieldName) { if (useFieldNames && fieldName != null) { buffer.append(fieldName); buffer.append(fieldNameValueSeparator); } } protected void appendFieldEnd(StringBuffer buffer, String fieldName) { appendFieldSeparator(buffer); } protected void appendSummarySize(StringBuffer buffer, String fieldName, int size) { buffer.append(sizeStartText); buffer.append(size); buffer.append(sizeEndText); } protected boolean isFullDetail(Boolean fullDetailRequest) { if (fullDetailRequest == null) { return defaultFullDetail; } return fullDetailRequest.booleanValue(); } protected String getShortClassName(Class<?> cls) { return ClassUtils.getShortClassName(cls); } protected boolean isUseClassName() { return useClassName; } protected void setUseClassName(boolean useClassName) { this.useClassName = useClassName; } protected boolean isUseShortClassName() { return useShortClassName; } protected void setUseShortClassName(boolean useShortClassName) { this.useShortClassName = useShortClassName; } protected boolean isUseIdentityHashCode() { return useIdentityHashCode; } protected void setUseIdentityHashCode(boolean useIdentityHashCode) { this.useIdentityHashCode = useIdentityHashCode; } protected boolean isUseFieldNames() { return useFieldNames; } protected void setUseFieldNames(boolean useFieldNames) { this.useFieldNames = useFieldNames; } protected boolean isDefaultFullDetail() { return defaultFullDetail; } protected void setDefaultFullDetail(boolean defaultFullDetail) { this.defaultFullDetail = defaultFullDetail; } protected boolean isArrayContentDetail() { return arrayContentDetail; } protected void setArrayContentDetail(boolean arrayContentDetail) { this.arrayContentDetail = arrayContentDetail; } protected String getArrayStart() { return arrayStart; } protected void setArrayStart(String arrayStart) { if (arrayStart == null) { arrayStart = \"\"; } this.arrayStart = arrayStart; } protected String getArrayEnd() { return arrayEnd; } protected void setArrayEnd(String arrayEnd) { if (arrayEnd == null) { arrayEnd = \"\"; } this.arrayEnd = arrayEnd; } protected String getArraySeparator() { return arraySeparator; } protected void setArraySeparator(String arraySeparator) { if (arraySeparator == null) { arraySeparator = \"\"; } this.arraySeparator = arraySeparator; } protected String getContentStart() { return contentStart; } protected void setContentStart(String contentStart) { if (contentStart == null) { contentStart = \"\"; } this.contentStart = contentStart; } protected String getContentEnd() { return contentEnd; } protected void setContentEnd(String contentEnd) { if (contentEnd == null) { contentEnd = \"\"; } this.contentEnd = contentEnd; } protected String getFieldNameValueSeparator() { return fieldNameValueSeparator; } protected void setFieldNameValueSeparator(String fieldNameValueSeparator) { if (fieldNameValueSeparator == null) { fieldNameValueSeparator = \"\"; } this.fieldNameValueSeparator = fieldNameValueSeparator; } protected String getFieldSeparator() { return fieldSeparator; } protected void setFieldSeparator(String fieldSeparator) { if (fieldSeparator == null) { fieldSeparator = \"\"; } this.fieldSeparator = fieldSeparator; } protected boolean isFieldSeparatorAtStart() { return fieldSeparatorAtStart; } protected void setFieldSeparatorAtStart(boolean fieldSeparatorAtStart) { this.fieldSeparatorAtStart = fieldSeparatorAtStart; } protected boolean isFieldSeparatorAtEnd() { return fieldSeparatorAtEnd; } protected void setFieldSeparatorAtEnd(boolean fieldSeparatorAtEnd) { this.fieldSeparatorAtEnd = fieldSeparatorAtEnd; } protected String getNullText() { return nullText; } protected void setNullText(String nullText) { if (nullText == null) { nullText = \"\"; } this.nullText = nullText; } protected String getSizeStartText() { return sizeStartText; } protected void setSizeStartText(String sizeStartText) { if (sizeStartText == null) { sizeStartText = \"\"; } this.sizeStartText = sizeStartText; } protected String getSizeEndText() { return sizeEndText; } protected void setSizeEndText(String sizeEndText) { if (sizeEndText == null) { sizeEndText = \"\"; } this.sizeEndText = sizeEndText; } protected String getSummaryObjectStartText() { return summaryObjectStartText; } protected void setSummaryObjectStartText(String summaryObjectStartText) { if (summaryObjectStartText == null) { summaryObjectStartText = \"\"; } this.summaryObjectStartText = summaryObjectStartText; } protected String getSummaryObjectEndText() { return summaryObjectEndText; } protected void setSummaryObjectEndText(String summaryObjectEndText) { if (summaryObjectEndText == null) { summaryObjectEndText = \"\"; } this.summaryObjectEndText = summaryObjectEndText; } private static final class DefaultToStringStyle extends ToStringStyle {\n", "projects": [{"project": "Lang", "id": 34}]}
{"method": "// Focal method:\npublic abstract class ToStringStyle implements Serializable { public void append(StringBuffer buffer, String fieldName, int[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected ToStringStyle(); void appendSuper(StringBuffer buffer, String superToString); void appendToString(StringBuffer buffer, String toString); void appendStart(StringBuffer buffer, Object object); void appendEnd(StringBuffer buffer, Object object); void append(StringBuffer buffer, String fieldName, Object value, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, long value); void append(StringBuffer buffer, String fieldName, int value); void append(StringBuffer buffer, String fieldName, short value); void append(StringBuffer buffer, String fieldName, byte value); void append(StringBuffer buffer, String fieldName, char value); void append(StringBuffer buffer, String fieldName, double value); void append(StringBuffer buffer, String fieldName, float value); void append(StringBuffer buffer, String fieldName, boolean value); void append(StringBuffer buffer, String fieldName, Object[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, long[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, int[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, short[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, byte[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, char[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, double[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, float[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, boolean[] array, Boolean fullDetail); static final ToStringStyle DEFAULT_STYLE; static final ToStringStyle MULTI_LINE_STYLE; static final ToStringStyle NO_FIELD_NAMES_STYLE; static final ToStringStyle SHORT_PREFIX_STYLE; static final ToStringStyle SIMPLE_STYLE; }\n// Avaible SubClasses:\n// public class StandardToStringStyle extends ToStringStyle {\n// public abstract class ToStringStyle implements Serializable { public static final ToStringStyle DEFAULT_STYLE = new DefaultToStringStyle(); public static final ToStringStyle MULTI_LINE_STYLE = new MultiLineToStringStyle(); public static final ToStringStyle NO_FIELD_NAMES_STYLE = new NoFieldNameToStringStyle(); public static final ToStringStyle SHORT_PREFIX_STYLE = new ShortPrefixToStringStyle(); public static final ToStringStyle SIMPLE_STYLE = new SimpleToStringStyle(); private static final ThreadLocal<WeakHashMap<Object, Object>> REGISTRY = new ThreadLocal<WeakHashMap<Object,Object>>(); static Map<Object, Object> getRegistry() { return REGISTRY.get() != null ? REGISTRY.get() : Collections.<Object, Object>emptyMap(); } static boolean isRegistered(Object value) { Map<Object, Object> m = getRegistry(); return m.containsKey(value); } static void register(Object value) { if (value != null) { WeakHashMap<Object, Object> m; synchronized (ToStringStyle.class) { m = REGISTRY.get(); if (m == null) { m = new WeakHashMap<Object, Object>(); REGISTRY.set(m); } } m.put(value, null); } } static void unregister(Object value) { if (value != null) { WeakHashMap<Object, Object> m; synchronized (ToStringStyle.class) { m = REGISTRY.get(); if (m != null) { m.remove(value); if (m.isEmpty()) { REGISTRY.remove(); } } } } } private boolean useFieldNames = true; private boolean useClassName = true; private boolean useShortClassName = false; private boolean useIdentityHashCode = true; private String contentStart = \"[\"; private String contentEnd = \"]\"; private String fieldNameValueSeparator = \"=\"; private boolean fieldSeparatorAtStart = false; private boolean fieldSeparatorAtEnd = false; private String fieldSeparator = \",\"; private String arrayStart = \"{\"; private String arraySeparator = \",\"; private boolean arrayContentDetail = true; private String arrayEnd = \"}\"; private boolean defaultFullDetail = true; private String nullText = \"<null>\"; private String sizeStartText = \"<size=\"; private String sizeEndText = \">\"; private String summaryObjectStartText = \"<\"; private String summaryObjectEndText = \">\"; protected ToStringStyle() { super(); } public void appendSuper(StringBuffer buffer, String superToString) { appendToString(buffer, superToString); } public void appendToString(StringBuffer buffer, String toString) { if (toString != null) { int pos1 = toString.indexOf(contentStart) + contentStart.length(); int pos2 = toString.lastIndexOf(contentEnd); if (pos1 != pos2 && pos1 >= 0 && pos2 >= 0) { String data = toString.substring(pos1, pos2); if (fieldSeparatorAtStart) { removeLastFieldSeparator(buffer); } buffer.append(data); appendFieldSeparator(buffer); } } } public void appendStart(StringBuffer buffer, Object object) { if (object != null) { appendClassName(buffer, object); appendIdentityHashCode(buffer, object); appendContentStart(buffer); if (fieldSeparatorAtStart) { appendFieldSeparator(buffer); } } } public void appendEnd(StringBuffer buffer, Object object) { if (this.fieldSeparatorAtEnd == false) { removeLastFieldSeparator(buffer); } appendContentEnd(buffer); unregister(object); } protected void removeLastFieldSeparator(StringBuffer buffer) { int len = buffer.length(); int sepLen = fieldSeparator.length(); if (len > 0 && sepLen > 0 && len >= sepLen) { boolean match = true; for (int i = 0; i < sepLen; i++) { if (buffer.charAt(len - 1 - i) != fieldSeparator.charAt(sepLen - 1 - i)) { match = false; break; } } if (match) { buffer.setLength(len - sepLen); } } } public void append(StringBuffer buffer, String fieldName, Object value, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (value == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, value, isFullDetail(fullDetail)); } appendFieldEnd(buffer, fieldName); } protected void appendInternal(StringBuffer buffer, String fieldName, Object value, boolean detail) { if (isRegistered(value) && !(value instanceof Number || value instanceof Boolean || value instanceof Character)) { appendCyclicObject(buffer, fieldName, value); return; } register(value); try { if (value instanceof Collection<?>) { if (detail) { appendDetail(buffer, fieldName, (Collection<?>) value); } else { appendSummarySize(buffer, fieldName, ((Collection<?>) value).size()); } } else if (value instanceof Map<?, ?>) { if (detail) { appendDetail(buffer, fieldName, (Map<?, ?>) value); } else { appendSummarySize(buffer, fieldName, ((Map<?, ?>) value).size()); } } else if (value instanceof long[]) { if (detail) { appendDetail(buffer, fieldName, (long[]) value); } else { appendSummary(buffer, fieldName, (long[]) value); } } else if (value instanceof int[]) { if (detail) { appendDetail(buffer, fieldName, (int[]) value); } else { appendSummary(buffer, fieldName, (int[]) value); } } else if (value instanceof short[]) { if (detail) { appendDetail(buffer, fieldName, (short[]) value); } else { appendSummary(buffer, fieldName, (short[]) value); } } else if (value instanceof byte[]) { if (detail) { appendDetail(buffer, fieldName, (byte[]) value); } else { appendSummary(buffer, fieldName, (byte[]) value); } } else if (value instanceof char[]) { if (detail) { appendDetail(buffer, fieldName, (char[]) value); } else { appendSummary(buffer, fieldName, (char[]) value); } } else if (value instanceof double[]) { if (detail) { appendDetail(buffer, fieldName, (double[]) value); } else { appendSummary(buffer, fieldName, (double[]) value); } } else if (value instanceof float[]) { if (detail) { appendDetail(buffer, fieldName, (float[]) value); } else { appendSummary(buffer, fieldName, (float[]) value); } } else if (value instanceof boolean[]) { if (detail) { appendDetail(buffer, fieldName, (boolean[]) value); } else { appendSummary(buffer, fieldName, (boolean[]) value); } } else if (value.getClass().isArray()) { if (detail) { appendDetail(buffer, fieldName, (Object[]) value); } else { appendSummary(buffer, fieldName, (Object[]) value); } } else { if (detail) { appendDetail(buffer, fieldName, value); } else { appendSummary(buffer, fieldName, value); } } } finally { unregister(value); } } protected void appendCyclicObject(StringBuffer buffer, String fieldName, Object value) { ObjectUtils.identityToString(buffer, value); } protected void appendDetail(StringBuffer buffer, String fieldName, Object value) { buffer.append(value); } protected void appendDetail(StringBuffer buffer, String fieldName, Collection<?> coll) { buffer.append(coll); } protected void appendDetail(StringBuffer buffer, String fieldName, Map<?, ?> map) { buffer.append(map); } protected void appendSummary(StringBuffer buffer, String fieldName, Object value) { buffer.append(summaryObjectStartText); buffer.append(getShortClassName(value.getClass())); buffer.append(summaryObjectEndText); } public void append(StringBuffer buffer, String fieldName, long value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, long value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, int value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, int value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, short value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, short value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, byte value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, byte value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, char value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, char value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, double value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, double value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, float value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, float value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, boolean value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, boolean value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, Object[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, Object[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { Object item = array[i]; if (i > 0) { buffer.append(arraySeparator); } if (item == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, item, arrayContentDetail); } } buffer.append(arrayEnd); } protected void reflectionAppendArrayDetail(StringBuffer buffer, String fieldName, Object array) { buffer.append(arrayStart); int length = Array.getLength(array); for (int i = 0; i < length; i++) { Object item = Array.get(array, i); if (i > 0) { buffer.append(arraySeparator); } if (item == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, item, arrayContentDetail); } } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, Object[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, long[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, long[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, long[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, int[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, int[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, int[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, short[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, short[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, short[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, byte[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, byte[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, byte[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, char[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, char[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, char[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, double[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, double[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, double[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, float[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, float[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, float[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, boolean[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, boolean[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, boolean[] array) { appendSummarySize(buffer, fieldName, array.length); } protected void appendClassName(StringBuffer buffer, Object object) { if (useClassName && object != null) { register(object); if (useShortClassName) { buffer.append(getShortClassName(object.getClass())); } else { buffer.append(object.getClass().getName()); } } } protected void appendIdentityHashCode(StringBuffer buffer, Object object) { if (this.isUseIdentityHashCode() && object!=null) { register(object); buffer.append('@'); buffer.append(Integer.toHexString(System.identityHashCode(object))); } } protected void appendContentStart(StringBuffer buffer) { buffer.append(contentStart); } protected void appendContentEnd(StringBuffer buffer) { buffer.append(contentEnd); } protected void appendNullText(StringBuffer buffer, String fieldName) { buffer.append(nullText); } protected void appendFieldSeparator(StringBuffer buffer) { buffer.append(fieldSeparator); } protected void appendFieldStart(StringBuffer buffer, String fieldName) { if (useFieldNames && fieldName != null) { buffer.append(fieldName); buffer.append(fieldNameValueSeparator); } } protected void appendFieldEnd(StringBuffer buffer, String fieldName) { appendFieldSeparator(buffer); } protected void appendSummarySize(StringBuffer buffer, String fieldName, int size) { buffer.append(sizeStartText); buffer.append(size); buffer.append(sizeEndText); } protected boolean isFullDetail(Boolean fullDetailRequest) { if (fullDetailRequest == null) { return defaultFullDetail; } return fullDetailRequest.booleanValue(); } protected String getShortClassName(Class<?> cls) { return ClassUtils.getShortClassName(cls); } protected boolean isUseClassName() { return useClassName; } protected void setUseClassName(boolean useClassName) { this.useClassName = useClassName; } protected boolean isUseShortClassName() { return useShortClassName; } protected void setUseShortClassName(boolean useShortClassName) { this.useShortClassName = useShortClassName; } protected boolean isUseIdentityHashCode() { return useIdentityHashCode; } protected void setUseIdentityHashCode(boolean useIdentityHashCode) { this.useIdentityHashCode = useIdentityHashCode; } protected boolean isUseFieldNames() { return useFieldNames; } protected void setUseFieldNames(boolean useFieldNames) { this.useFieldNames = useFieldNames; } protected boolean isDefaultFullDetail() { return defaultFullDetail; } protected void setDefaultFullDetail(boolean defaultFullDetail) { this.defaultFullDetail = defaultFullDetail; } protected boolean isArrayContentDetail() { return arrayContentDetail; } protected void setArrayContentDetail(boolean arrayContentDetail) { this.arrayContentDetail = arrayContentDetail; } protected String getArrayStart() { return arrayStart; } protected void setArrayStart(String arrayStart) { if (arrayStart == null) { arrayStart = \"\"; } this.arrayStart = arrayStart; } protected String getArrayEnd() { return arrayEnd; } protected void setArrayEnd(String arrayEnd) { if (arrayEnd == null) { arrayEnd = \"\"; } this.arrayEnd = arrayEnd; } protected String getArraySeparator() { return arraySeparator; } protected void setArraySeparator(String arraySeparator) { if (arraySeparator == null) { arraySeparator = \"\"; } this.arraySeparator = arraySeparator; } protected String getContentStart() { return contentStart; } protected void setContentStart(String contentStart) { if (contentStart == null) { contentStart = \"\"; } this.contentStart = contentStart; } protected String getContentEnd() { return contentEnd; } protected void setContentEnd(String contentEnd) { if (contentEnd == null) { contentEnd = \"\"; } this.contentEnd = contentEnd; } protected String getFieldNameValueSeparator() { return fieldNameValueSeparator; } protected void setFieldNameValueSeparator(String fieldNameValueSeparator) { if (fieldNameValueSeparator == null) { fieldNameValueSeparator = \"\"; } this.fieldNameValueSeparator = fieldNameValueSeparator; } protected String getFieldSeparator() { return fieldSeparator; } protected void setFieldSeparator(String fieldSeparator) { if (fieldSeparator == null) { fieldSeparator = \"\"; } this.fieldSeparator = fieldSeparator; } protected boolean isFieldSeparatorAtStart() { return fieldSeparatorAtStart; } protected void setFieldSeparatorAtStart(boolean fieldSeparatorAtStart) { this.fieldSeparatorAtStart = fieldSeparatorAtStart; } protected boolean isFieldSeparatorAtEnd() { return fieldSeparatorAtEnd; } protected void setFieldSeparatorAtEnd(boolean fieldSeparatorAtEnd) { this.fieldSeparatorAtEnd = fieldSeparatorAtEnd; } protected String getNullText() { return nullText; } protected void setNullText(String nullText) { if (nullText == null) { nullText = \"\"; } this.nullText = nullText; } protected String getSizeStartText() { return sizeStartText; } protected void setSizeStartText(String sizeStartText) { if (sizeStartText == null) { sizeStartText = \"\"; } this.sizeStartText = sizeStartText; } protected String getSizeEndText() { return sizeEndText; } protected void setSizeEndText(String sizeEndText) { if (sizeEndText == null) { sizeEndText = \"\"; } this.sizeEndText = sizeEndText; } protected String getSummaryObjectStartText() { return summaryObjectStartText; } protected void setSummaryObjectStartText(String summaryObjectStartText) { if (summaryObjectStartText == null) { summaryObjectStartText = \"\"; } this.summaryObjectStartText = summaryObjectStartText; } protected String getSummaryObjectEndText() { return summaryObjectEndText; } protected void setSummaryObjectEndText(String summaryObjectEndText) { if (summaryObjectEndText == null) { summaryObjectEndText = \"\"; } this.summaryObjectEndText = summaryObjectEndText; } private static final class DefaultToStringStyle extends ToStringStyle {\n", "projects": [{"project": "Lang", "id": 34}]}
{"method": "// Focal method:\npublic abstract class ToStringStyle implements Serializable { public void appendToString(StringBuffer buffer, String toString) { if (toString != null) { int pos1 = toString.indexOf(contentStart) + contentStart.length(); int pos2 = toString.lastIndexOf(contentEnd); if (pos1 != pos2 && pos1 >= 0 && pos2 >= 0) { String data = toString.substring(pos1, pos2); if (fieldSeparatorAtStart) { removeLastFieldSeparator(buffer); } buffer.append(data); appendFieldSeparator(buffer); } } } protected ToStringStyle(); void appendSuper(StringBuffer buffer, String superToString); void appendToString(StringBuffer buffer, String toString); void appendStart(StringBuffer buffer, Object object); void appendEnd(StringBuffer buffer, Object object); void append(StringBuffer buffer, String fieldName, Object value, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, long value); void append(StringBuffer buffer, String fieldName, int value); void append(StringBuffer buffer, String fieldName, short value); void append(StringBuffer buffer, String fieldName, byte value); void append(StringBuffer buffer, String fieldName, char value); void append(StringBuffer buffer, String fieldName, double value); void append(StringBuffer buffer, String fieldName, float value); void append(StringBuffer buffer, String fieldName, boolean value); void append(StringBuffer buffer, String fieldName, Object[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, long[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, int[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, short[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, byte[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, char[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, double[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, float[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, boolean[] array, Boolean fullDetail); static final ToStringStyle DEFAULT_STYLE; static final ToStringStyle MULTI_LINE_STYLE; static final ToStringStyle NO_FIELD_NAMES_STYLE; static final ToStringStyle SHORT_PREFIX_STYLE; static final ToStringStyle SIMPLE_STYLE; }\n// Avaible SubClasses:\n// public class StandardToStringStyle extends ToStringStyle {\n// public abstract class ToStringStyle implements Serializable { public static final ToStringStyle DEFAULT_STYLE = new DefaultToStringStyle(); public static final ToStringStyle MULTI_LINE_STYLE = new MultiLineToStringStyle(); public static final ToStringStyle NO_FIELD_NAMES_STYLE = new NoFieldNameToStringStyle(); public static final ToStringStyle SHORT_PREFIX_STYLE = new ShortPrefixToStringStyle(); public static final ToStringStyle SIMPLE_STYLE = new SimpleToStringStyle(); private static final ThreadLocal<WeakHashMap<Object, Object>> REGISTRY = new ThreadLocal<WeakHashMap<Object,Object>>(); static Map<Object, Object> getRegistry() { return REGISTRY.get() != null ? REGISTRY.get() : Collections.<Object, Object>emptyMap(); } static boolean isRegistered(Object value) { Map<Object, Object> m = getRegistry(); return m.containsKey(value); } static void register(Object value) { if (value != null) { WeakHashMap<Object, Object> m; synchronized (ToStringStyle.class) { m = REGISTRY.get(); if (m == null) { m = new WeakHashMap<Object, Object>(); REGISTRY.set(m); } } m.put(value, null); } } static void unregister(Object value) { if (value != null) { WeakHashMap<Object, Object> m; synchronized (ToStringStyle.class) { m = REGISTRY.get(); if (m != null) { m.remove(value); if (m.isEmpty()) { REGISTRY.remove(); } } } } } private boolean useFieldNames = true; private boolean useClassName = true; private boolean useShortClassName = false; private boolean useIdentityHashCode = true; private String contentStart = \"[\"; private String contentEnd = \"]\"; private String fieldNameValueSeparator = \"=\"; private boolean fieldSeparatorAtStart = false; private boolean fieldSeparatorAtEnd = false; private String fieldSeparator = \",\"; private String arrayStart = \"{\"; private String arraySeparator = \",\"; private boolean arrayContentDetail = true; private String arrayEnd = \"}\"; private boolean defaultFullDetail = true; private String nullText = \"<null>\"; private String sizeStartText = \"<size=\"; private String sizeEndText = \">\"; private String summaryObjectStartText = \"<\"; private String summaryObjectEndText = \">\"; protected ToStringStyle() { super(); } public void appendSuper(StringBuffer buffer, String superToString) { appendToString(buffer, superToString); } public void appendToString(StringBuffer buffer, String toString) { if (toString != null) { int pos1 = toString.indexOf(contentStart) + contentStart.length(); int pos2 = toString.lastIndexOf(contentEnd); if (pos1 != pos2 && pos1 >= 0 && pos2 >= 0) { String data = toString.substring(pos1, pos2); if (fieldSeparatorAtStart) { removeLastFieldSeparator(buffer); } buffer.append(data); appendFieldSeparator(buffer); } } } public void appendStart(StringBuffer buffer, Object object) { if (object != null) { appendClassName(buffer, object); appendIdentityHashCode(buffer, object); appendContentStart(buffer); if (fieldSeparatorAtStart) { appendFieldSeparator(buffer); } } } public void appendEnd(StringBuffer buffer, Object object) { if (this.fieldSeparatorAtEnd == false) { removeLastFieldSeparator(buffer); } appendContentEnd(buffer); unregister(object); } protected void removeLastFieldSeparator(StringBuffer buffer) { int len = buffer.length(); int sepLen = fieldSeparator.length(); if (len > 0 && sepLen > 0 && len >= sepLen) { boolean match = true; for (int i = 0; i < sepLen; i++) { if (buffer.charAt(len - 1 - i) != fieldSeparator.charAt(sepLen - 1 - i)) { match = false; break; } } if (match) { buffer.setLength(len - sepLen); } } } public void append(StringBuffer buffer, String fieldName, Object value, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (value == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, value, isFullDetail(fullDetail)); } appendFieldEnd(buffer, fieldName); } protected void appendInternal(StringBuffer buffer, String fieldName, Object value, boolean detail) { if (isRegistered(value) && !(value instanceof Number || value instanceof Boolean || value instanceof Character)) { appendCyclicObject(buffer, fieldName, value); return; } register(value); try { if (value instanceof Collection<?>) { if (detail) { appendDetail(buffer, fieldName, (Collection<?>) value); } else { appendSummarySize(buffer, fieldName, ((Collection<?>) value).size()); } } else if (value instanceof Map<?, ?>) { if (detail) { appendDetail(buffer, fieldName, (Map<?, ?>) value); } else { appendSummarySize(buffer, fieldName, ((Map<?, ?>) value).size()); } } else if (value instanceof long[]) { if (detail) { appendDetail(buffer, fieldName, (long[]) value); } else { appendSummary(buffer, fieldName, (long[]) value); } } else if (value instanceof int[]) { if (detail) { appendDetail(buffer, fieldName, (int[]) value); } else { appendSummary(buffer, fieldName, (int[]) value); } } else if (value instanceof short[]) { if (detail) { appendDetail(buffer, fieldName, (short[]) value); } else { appendSummary(buffer, fieldName, (short[]) value); } } else if (value instanceof byte[]) { if (detail) { appendDetail(buffer, fieldName, (byte[]) value); } else { appendSummary(buffer, fieldName, (byte[]) value); } } else if (value instanceof char[]) { if (detail) { appendDetail(buffer, fieldName, (char[]) value); } else { appendSummary(buffer, fieldName, (char[]) value); } } else if (value instanceof double[]) { if (detail) { appendDetail(buffer, fieldName, (double[]) value); } else { appendSummary(buffer, fieldName, (double[]) value); } } else if (value instanceof float[]) { if (detail) { appendDetail(buffer, fieldName, (float[]) value); } else { appendSummary(buffer, fieldName, (float[]) value); } } else if (value instanceof boolean[]) { if (detail) { appendDetail(buffer, fieldName, (boolean[]) value); } else { appendSummary(buffer, fieldName, (boolean[]) value); } } else if (value.getClass().isArray()) { if (detail) { appendDetail(buffer, fieldName, (Object[]) value); } else { appendSummary(buffer, fieldName, (Object[]) value); } } else { if (detail) { appendDetail(buffer, fieldName, value); } else { appendSummary(buffer, fieldName, value); } } } finally { unregister(value); } } protected void appendCyclicObject(StringBuffer buffer, String fieldName, Object value) { ObjectUtils.identityToString(buffer, value); } protected void appendDetail(StringBuffer buffer, String fieldName, Object value) { buffer.append(value); } protected void appendDetail(StringBuffer buffer, String fieldName, Collection<?> coll) { buffer.append(coll); } protected void appendDetail(StringBuffer buffer, String fieldName, Map<?, ?> map) { buffer.append(map); } protected void appendSummary(StringBuffer buffer, String fieldName, Object value) { buffer.append(summaryObjectStartText); buffer.append(getShortClassName(value.getClass())); buffer.append(summaryObjectEndText); } public void append(StringBuffer buffer, String fieldName, long value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, long value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, int value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, int value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, short value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, short value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, byte value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, byte value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, char value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, char value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, double value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, double value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, float value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, float value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, boolean value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, boolean value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, Object[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, Object[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { Object item = array[i]; if (i > 0) { buffer.append(arraySeparator); } if (item == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, item, arrayContentDetail); } } buffer.append(arrayEnd); } protected void reflectionAppendArrayDetail(StringBuffer buffer, String fieldName, Object array) { buffer.append(arrayStart); int length = Array.getLength(array); for (int i = 0; i < length; i++) { Object item = Array.get(array, i); if (i > 0) { buffer.append(arraySeparator); } if (item == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, item, arrayContentDetail); } } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, Object[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, long[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, long[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, long[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, int[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, int[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, int[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, short[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, short[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, short[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, byte[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, byte[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, byte[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, char[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, char[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, char[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, double[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, double[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, double[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, float[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, float[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, float[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, boolean[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, boolean[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, boolean[] array) { appendSummarySize(buffer, fieldName, array.length); } protected void appendClassName(StringBuffer buffer, Object object) { if (useClassName && object != null) { register(object); if (useShortClassName) { buffer.append(getShortClassName(object.getClass())); } else { buffer.append(object.getClass().getName()); } } } protected void appendIdentityHashCode(StringBuffer buffer, Object object) { if (this.isUseIdentityHashCode() && object!=null) { register(object); buffer.append('@'); buffer.append(Integer.toHexString(System.identityHashCode(object))); } } protected void appendContentStart(StringBuffer buffer) { buffer.append(contentStart); } protected void appendContentEnd(StringBuffer buffer) { buffer.append(contentEnd); } protected void appendNullText(StringBuffer buffer, String fieldName) { buffer.append(nullText); } protected void appendFieldSeparator(StringBuffer buffer) { buffer.append(fieldSeparator); } protected void appendFieldStart(StringBuffer buffer, String fieldName) { if (useFieldNames && fieldName != null) { buffer.append(fieldName); buffer.append(fieldNameValueSeparator); } } protected void appendFieldEnd(StringBuffer buffer, String fieldName) { appendFieldSeparator(buffer); } protected void appendSummarySize(StringBuffer buffer, String fieldName, int size) { buffer.append(sizeStartText); buffer.append(size); buffer.append(sizeEndText); } protected boolean isFullDetail(Boolean fullDetailRequest) { if (fullDetailRequest == null) { return defaultFullDetail; } return fullDetailRequest.booleanValue(); } protected String getShortClassName(Class<?> cls) { return ClassUtils.getShortClassName(cls); } protected boolean isUseClassName() { return useClassName; } protected void setUseClassName(boolean useClassName) { this.useClassName = useClassName; } protected boolean isUseShortClassName() { return useShortClassName; } protected void setUseShortClassName(boolean useShortClassName) { this.useShortClassName = useShortClassName; } protected boolean isUseIdentityHashCode() { return useIdentityHashCode; } protected void setUseIdentityHashCode(boolean useIdentityHashCode) { this.useIdentityHashCode = useIdentityHashCode; } protected boolean isUseFieldNames() { return useFieldNames; } protected void setUseFieldNames(boolean useFieldNames) { this.useFieldNames = useFieldNames; } protected boolean isDefaultFullDetail() { return defaultFullDetail; } protected void setDefaultFullDetail(boolean defaultFullDetail) { this.defaultFullDetail = defaultFullDetail; } protected boolean isArrayContentDetail() { return arrayContentDetail; } protected void setArrayContentDetail(boolean arrayContentDetail) { this.arrayContentDetail = arrayContentDetail; } protected String getArrayStart() { return arrayStart; } protected void setArrayStart(String arrayStart) { if (arrayStart == null) { arrayStart = \"\"; } this.arrayStart = arrayStart; } protected String getArrayEnd() { return arrayEnd; } protected void setArrayEnd(String arrayEnd) { if (arrayEnd == null) { arrayEnd = \"\"; } this.arrayEnd = arrayEnd; } protected String getArraySeparator() { return arraySeparator; } protected void setArraySeparator(String arraySeparator) { if (arraySeparator == null) { arraySeparator = \"\"; } this.arraySeparator = arraySeparator; } protected String getContentStart() { return contentStart; } protected void setContentStart(String contentStart) { if (contentStart == null) { contentStart = \"\"; } this.contentStart = contentStart; } protected String getContentEnd() { return contentEnd; } protected void setContentEnd(String contentEnd) { if (contentEnd == null) { contentEnd = \"\"; } this.contentEnd = contentEnd; } protected String getFieldNameValueSeparator() { return fieldNameValueSeparator; } protected void setFieldNameValueSeparator(String fieldNameValueSeparator) { if (fieldNameValueSeparator == null) { fieldNameValueSeparator = \"\"; } this.fieldNameValueSeparator = fieldNameValueSeparator; } protected String getFieldSeparator() { return fieldSeparator; } protected void setFieldSeparator(String fieldSeparator) { if (fieldSeparator == null) { fieldSeparator = \"\"; } this.fieldSeparator = fieldSeparator; } protected boolean isFieldSeparatorAtStart() { return fieldSeparatorAtStart; } protected void setFieldSeparatorAtStart(boolean fieldSeparatorAtStart) { this.fieldSeparatorAtStart = fieldSeparatorAtStart; } protected boolean isFieldSeparatorAtEnd() { return fieldSeparatorAtEnd; } protected void setFieldSeparatorAtEnd(boolean fieldSeparatorAtEnd) { this.fieldSeparatorAtEnd = fieldSeparatorAtEnd; } protected String getNullText() { return nullText; } protected void setNullText(String nullText) { if (nullText == null) { nullText = \"\"; } this.nullText = nullText; } protected String getSizeStartText() { return sizeStartText; } protected void setSizeStartText(String sizeStartText) { if (sizeStartText == null) { sizeStartText = \"\"; } this.sizeStartText = sizeStartText; } protected String getSizeEndText() { return sizeEndText; } protected void setSizeEndText(String sizeEndText) { if (sizeEndText == null) { sizeEndText = \"\"; } this.sizeEndText = sizeEndText; } protected String getSummaryObjectStartText() { return summaryObjectStartText; } protected void setSummaryObjectStartText(String summaryObjectStartText) { if (summaryObjectStartText == null) { summaryObjectStartText = \"\"; } this.summaryObjectStartText = summaryObjectStartText; } protected String getSummaryObjectEndText() { return summaryObjectEndText; } protected void setSummaryObjectEndText(String summaryObjectEndText) { if (summaryObjectEndText == null) { summaryObjectEndText = \"\"; } this.summaryObjectEndText = summaryObjectEndText; } private static final class DefaultToStringStyle extends ToStringStyle {\n", "projects": [{"project": "Lang", "id": 34}]}
{"method": "// Focal method:\npublic abstract class ToStringStyle implements Serializable { public void append(StringBuffer buffer, String fieldName, long[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected ToStringStyle(); void appendSuper(StringBuffer buffer, String superToString); void appendToString(StringBuffer buffer, String toString); void appendStart(StringBuffer buffer, Object object); void appendEnd(StringBuffer buffer, Object object); void append(StringBuffer buffer, String fieldName, Object value, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, long value); void append(StringBuffer buffer, String fieldName, int value); void append(StringBuffer buffer, String fieldName, short value); void append(StringBuffer buffer, String fieldName, byte value); void append(StringBuffer buffer, String fieldName, char value); void append(StringBuffer buffer, String fieldName, double value); void append(StringBuffer buffer, String fieldName, float value); void append(StringBuffer buffer, String fieldName, boolean value); void append(StringBuffer buffer, String fieldName, Object[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, long[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, int[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, short[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, byte[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, char[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, double[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, float[] array, Boolean fullDetail); void append(StringBuffer buffer, String fieldName, boolean[] array, Boolean fullDetail); static final ToStringStyle DEFAULT_STYLE; static final ToStringStyle MULTI_LINE_STYLE; static final ToStringStyle NO_FIELD_NAMES_STYLE; static final ToStringStyle SHORT_PREFIX_STYLE; static final ToStringStyle SIMPLE_STYLE; }\n// Avaible SubClasses:\n// public class StandardToStringStyle extends ToStringStyle {\n// public abstract class ToStringStyle implements Serializable { public static final ToStringStyle DEFAULT_STYLE = new DefaultToStringStyle(); public static final ToStringStyle MULTI_LINE_STYLE = new MultiLineToStringStyle(); public static final ToStringStyle NO_FIELD_NAMES_STYLE = new NoFieldNameToStringStyle(); public static final ToStringStyle SHORT_PREFIX_STYLE = new ShortPrefixToStringStyle(); public static final ToStringStyle SIMPLE_STYLE = new SimpleToStringStyle(); private static final ThreadLocal<WeakHashMap<Object, Object>> REGISTRY = new ThreadLocal<WeakHashMap<Object,Object>>(); static Map<Object, Object> getRegistry() { return REGISTRY.get() != null ? REGISTRY.get() : Collections.<Object, Object>emptyMap(); } static boolean isRegistered(Object value) { Map<Object, Object> m = getRegistry(); return m.containsKey(value); } static void register(Object value) { if (value != null) { WeakHashMap<Object, Object> m; synchronized (ToStringStyle.class) { m = REGISTRY.get(); if (m == null) { m = new WeakHashMap<Object, Object>(); REGISTRY.set(m); } } m.put(value, null); } } static void unregister(Object value) { if (value != null) { WeakHashMap<Object, Object> m; synchronized (ToStringStyle.class) { m = REGISTRY.get(); if (m != null) { m.remove(value); if (m.isEmpty()) { REGISTRY.remove(); } } } } } private boolean useFieldNames = true; private boolean useClassName = true; private boolean useShortClassName = false; private boolean useIdentityHashCode = true; private String contentStart = \"[\"; private String contentEnd = \"]\"; private String fieldNameValueSeparator = \"=\"; private boolean fieldSeparatorAtStart = false; private boolean fieldSeparatorAtEnd = false; private String fieldSeparator = \",\"; private String arrayStart = \"{\"; private String arraySeparator = \",\"; private boolean arrayContentDetail = true; private String arrayEnd = \"}\"; private boolean defaultFullDetail = true; private String nullText = \"<null>\"; private String sizeStartText = \"<size=\"; private String sizeEndText = \">\"; private String summaryObjectStartText = \"<\"; private String summaryObjectEndText = \">\"; protected ToStringStyle() { super(); } public void appendSuper(StringBuffer buffer, String superToString) { appendToString(buffer, superToString); } public void appendToString(StringBuffer buffer, String toString) { if (toString != null) { int pos1 = toString.indexOf(contentStart) + contentStart.length(); int pos2 = toString.lastIndexOf(contentEnd); if (pos1 != pos2 && pos1 >= 0 && pos2 >= 0) { String data = toString.substring(pos1, pos2); if (fieldSeparatorAtStart) { removeLastFieldSeparator(buffer); } buffer.append(data); appendFieldSeparator(buffer); } } } public void appendStart(StringBuffer buffer, Object object) { if (object != null) { appendClassName(buffer, object); appendIdentityHashCode(buffer, object); appendContentStart(buffer); if (fieldSeparatorAtStart) { appendFieldSeparator(buffer); } } } public void appendEnd(StringBuffer buffer, Object object) { if (this.fieldSeparatorAtEnd == false) { removeLastFieldSeparator(buffer); } appendContentEnd(buffer); unregister(object); } protected void removeLastFieldSeparator(StringBuffer buffer) { int len = buffer.length(); int sepLen = fieldSeparator.length(); if (len > 0 && sepLen > 0 && len >= sepLen) { boolean match = true; for (int i = 0; i < sepLen; i++) { if (buffer.charAt(len - 1 - i) != fieldSeparator.charAt(sepLen - 1 - i)) { match = false; break; } } if (match) { buffer.setLength(len - sepLen); } } } public void append(StringBuffer buffer, String fieldName, Object value, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (value == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, value, isFullDetail(fullDetail)); } appendFieldEnd(buffer, fieldName); } protected void appendInternal(StringBuffer buffer, String fieldName, Object value, boolean detail) { if (isRegistered(value) && !(value instanceof Number || value instanceof Boolean || value instanceof Character)) { appendCyclicObject(buffer, fieldName, value); return; } register(value); try { if (value instanceof Collection<?>) { if (detail) { appendDetail(buffer, fieldName, (Collection<?>) value); } else { appendSummarySize(buffer, fieldName, ((Collection<?>) value).size()); } } else if (value instanceof Map<?, ?>) { if (detail) { appendDetail(buffer, fieldName, (Map<?, ?>) value); } else { appendSummarySize(buffer, fieldName, ((Map<?, ?>) value).size()); } } else if (value instanceof long[]) { if (detail) { appendDetail(buffer, fieldName, (long[]) value); } else { appendSummary(buffer, fieldName, (long[]) value); } } else if (value instanceof int[]) { if (detail) { appendDetail(buffer, fieldName, (int[]) value); } else { appendSummary(buffer, fieldName, (int[]) value); } } else if (value instanceof short[]) { if (detail) { appendDetail(buffer, fieldName, (short[]) value); } else { appendSummary(buffer, fieldName, (short[]) value); } } else if (value instanceof byte[]) { if (detail) { appendDetail(buffer, fieldName, (byte[]) value); } else { appendSummary(buffer, fieldName, (byte[]) value); } } else if (value instanceof char[]) { if (detail) { appendDetail(buffer, fieldName, (char[]) value); } else { appendSummary(buffer, fieldName, (char[]) value); } } else if (value instanceof double[]) { if (detail) { appendDetail(buffer, fieldName, (double[]) value); } else { appendSummary(buffer, fieldName, (double[]) value); } } else if (value instanceof float[]) { if (detail) { appendDetail(buffer, fieldName, (float[]) value); } else { appendSummary(buffer, fieldName, (float[]) value); } } else if (value instanceof boolean[]) { if (detail) { appendDetail(buffer, fieldName, (boolean[]) value); } else { appendSummary(buffer, fieldName, (boolean[]) value); } } else if (value.getClass().isArray()) { if (detail) { appendDetail(buffer, fieldName, (Object[]) value); } else { appendSummary(buffer, fieldName, (Object[]) value); } } else { if (detail) { appendDetail(buffer, fieldName, value); } else { appendSummary(buffer, fieldName, value); } } } finally { unregister(value); } } protected void appendCyclicObject(StringBuffer buffer, String fieldName, Object value) { ObjectUtils.identityToString(buffer, value); } protected void appendDetail(StringBuffer buffer, String fieldName, Object value) { buffer.append(value); } protected void appendDetail(StringBuffer buffer, String fieldName, Collection<?> coll) { buffer.append(coll); } protected void appendDetail(StringBuffer buffer, String fieldName, Map<?, ?> map) { buffer.append(map); } protected void appendSummary(StringBuffer buffer, String fieldName, Object value) { buffer.append(summaryObjectStartText); buffer.append(getShortClassName(value.getClass())); buffer.append(summaryObjectEndText); } public void append(StringBuffer buffer, String fieldName, long value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, long value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, int value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, int value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, short value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, short value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, byte value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, byte value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, char value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, char value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, double value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, double value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, float value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, float value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, boolean value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, boolean value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, Object[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, Object[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { Object item = array[i]; if (i > 0) { buffer.append(arraySeparator); } if (item == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, item, arrayContentDetail); } } buffer.append(arrayEnd); } protected void reflectionAppendArrayDetail(StringBuffer buffer, String fieldName, Object array) { buffer.append(arrayStart); int length = Array.getLength(array); for (int i = 0; i < length; i++) { Object item = Array.get(array, i); if (i > 0) { buffer.append(arraySeparator); } if (item == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, item, arrayContentDetail); } } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, Object[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, long[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, long[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, long[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, int[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, int[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, int[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, short[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, short[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, short[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, byte[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, byte[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, byte[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, char[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, char[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, char[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, double[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, double[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, double[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, float[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, float[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, float[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, boolean[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, boolean[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, boolean[] array) { appendSummarySize(buffer, fieldName, array.length); } protected void appendClassName(StringBuffer buffer, Object object) { if (useClassName && object != null) { register(object); if (useShortClassName) { buffer.append(getShortClassName(object.getClass())); } else { buffer.append(object.getClass().getName()); } } } protected void appendIdentityHashCode(StringBuffer buffer, Object object) { if (this.isUseIdentityHashCode() && object!=null) { register(object); buffer.append('@'); buffer.append(Integer.toHexString(System.identityHashCode(object))); } } protected void appendContentStart(StringBuffer buffer) { buffer.append(contentStart); } protected void appendContentEnd(StringBuffer buffer) { buffer.append(contentEnd); } protected void appendNullText(StringBuffer buffer, String fieldName) { buffer.append(nullText); } protected void appendFieldSeparator(StringBuffer buffer) { buffer.append(fieldSeparator); } protected void appendFieldStart(StringBuffer buffer, String fieldName) { if (useFieldNames && fieldName != null) { buffer.append(fieldName); buffer.append(fieldNameValueSeparator); } } protected void appendFieldEnd(StringBuffer buffer, String fieldName) { appendFieldSeparator(buffer); } protected void appendSummarySize(StringBuffer buffer, String fieldName, int size) { buffer.append(sizeStartText); buffer.append(size); buffer.append(sizeEndText); } protected boolean isFullDetail(Boolean fullDetailRequest) { if (fullDetailRequest == null) { return defaultFullDetail; } return fullDetailRequest.booleanValue(); } protected String getShortClassName(Class<?> cls) { return ClassUtils.getShortClassName(cls); } protected boolean isUseClassName() { return useClassName; } protected void setUseClassName(boolean useClassName) { this.useClassName = useClassName; } protected boolean isUseShortClassName() { return useShortClassName; } protected void setUseShortClassName(boolean useShortClassName) { this.useShortClassName = useShortClassName; } protected boolean isUseIdentityHashCode() { return useIdentityHashCode; } protected void setUseIdentityHashCode(boolean useIdentityHashCode) { this.useIdentityHashCode = useIdentityHashCode; } protected boolean isUseFieldNames() { return useFieldNames; } protected void setUseFieldNames(boolean useFieldNames) { this.useFieldNames = useFieldNames; } protected boolean isDefaultFullDetail() { return defaultFullDetail; } protected void setDefaultFullDetail(boolean defaultFullDetail) { this.defaultFullDetail = defaultFullDetail; } protected boolean isArrayContentDetail() { return arrayContentDetail; } protected void setArrayContentDetail(boolean arrayContentDetail) { this.arrayContentDetail = arrayContentDetail; } protected String getArrayStart() { return arrayStart; } protected void setArrayStart(String arrayStart) { if (arrayStart == null) { arrayStart = \"\"; } this.arrayStart = arrayStart; } protected String getArrayEnd() { return arrayEnd; } protected void setArrayEnd(String arrayEnd) { if (arrayEnd == null) { arrayEnd = \"\"; } this.arrayEnd = arrayEnd; } protected String getArraySeparator() { return arraySeparator; } protected void setArraySeparator(String arraySeparator) { if (arraySeparator == null) { arraySeparator = \"\"; } this.arraySeparator = arraySeparator; } protected String getContentStart() { return contentStart; } protected void setContentStart(String contentStart) { if (contentStart == null) { contentStart = \"\"; } this.contentStart = contentStart; } protected String getContentEnd() { return contentEnd; } protected void setContentEnd(String contentEnd) { if (contentEnd == null) { contentEnd = \"\"; } this.contentEnd = contentEnd; } protected String getFieldNameValueSeparator() { return fieldNameValueSeparator; } protected void setFieldNameValueSeparator(String fieldNameValueSeparator) { if (fieldNameValueSeparator == null) { fieldNameValueSeparator = \"\"; } this.fieldNameValueSeparator = fieldNameValueSeparator; } protected String getFieldSeparator() { return fieldSeparator; } protected void setFieldSeparator(String fieldSeparator) { if (fieldSeparator == null) { fieldSeparator = \"\"; } this.fieldSeparator = fieldSeparator; } protected boolean isFieldSeparatorAtStart() { return fieldSeparatorAtStart; } protected void setFieldSeparatorAtStart(boolean fieldSeparatorAtStart) { this.fieldSeparatorAtStart = fieldSeparatorAtStart; } protected boolean isFieldSeparatorAtEnd() { return fieldSeparatorAtEnd; } protected void setFieldSeparatorAtEnd(boolean fieldSeparatorAtEnd) { this.fieldSeparatorAtEnd = fieldSeparatorAtEnd; } protected String getNullText() { return nullText; } protected void setNullText(String nullText) { if (nullText == null) { nullText = \"\"; } this.nullText = nullText; } protected String getSizeStartText() { return sizeStartText; } protected void setSizeStartText(String sizeStartText) { if (sizeStartText == null) { sizeStartText = \"\"; } this.sizeStartText = sizeStartText; } protected String getSizeEndText() { return sizeEndText; } protected void setSizeEndText(String sizeEndText) { if (sizeEndText == null) { sizeEndText = \"\"; } this.sizeEndText = sizeEndText; } protected String getSummaryObjectStartText() { return summaryObjectStartText; } protected void setSummaryObjectStartText(String summaryObjectStartText) { if (summaryObjectStartText == null) { summaryObjectStartText = \"\"; } this.summaryObjectStartText = summaryObjectStartText; } protected String getSummaryObjectEndText() { return summaryObjectEndText; } protected void setSummaryObjectEndText(String summaryObjectEndText) { if (summaryObjectEndText == null) { summaryObjectEndText = \"\"; } this.summaryObjectEndText = summaryObjectEndText; } private static final class DefaultToStringStyle extends ToStringStyle {\n", "projects": [{"project": "Lang", "id": 34}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static long[] add(long[] array, long element) { long[] newArray = (long[])copyArrayGrow1(array, Long.TYPE); newArray[newArray.length - 1] = element; return newArray; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static int lastIndexOf(double[] array, double valueToFind, int startIndex) { if (ArrayUtils.isEmpty(array)) { return INDEX_NOT_FOUND; } if (startIndex < 0) { return INDEX_NOT_FOUND; } else if (startIndex >= array.length) { startIndex = array.length - 1; } for (int i = startIndex; i >= 0; i--) { if (valueToFind == array[i]) { return i; } } return INDEX_NOT_FOUND; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static char[] toPrimitive(Character[] array, char valueForNull) { if (array == null) { return null; } else if (array.length == 0) { return EMPTY_CHAR_ARRAY; } final char[] result = new char[array.length]; for (int i = 0; i < array.length; i++) { Character b = array[i]; result[i] = (b == null ? valueForNull : b.charValue()); } return result; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive) { if (array == null) { return null; } if (startIndexInclusive < 0) { startIndexInclusive = 0; } if (endIndexExclusive > array.length) { endIndexExclusive = array.length; } int newSize = endIndexExclusive - startIndexInclusive; if (newSize <= 0) { return EMPTY_FLOAT_ARRAY; } float[] subarray = new float[newSize]; System.arraycopy(array, startIndexInclusive, subarray, 0, newSize); return subarray; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static long[] add(long[] array, int index, long element) { return (long[]) add(array, index, Long.valueOf(element), Long.TYPE); } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static byte[] addAll(byte[] array1, byte... array2) { if (array1 == null) { return clone(array2); } else if (array2 == null) { return clone(array1); } byte[] joinedArray = new byte[array1.length + array2.length]; System.arraycopy(array1, 0, joinedArray, 0, array1.length); System.arraycopy(array2, 0, joinedArray, array1.length, array2.length); return joinedArray; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static <T> T[] clone(T[] array) { if (array == null) { return null; } return array.clone(); } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance) { if (ArrayUtils.isEmpty(array)) { return INDEX_NOT_FOUND; } if (startIndex < 0) { startIndex = 0; } double min = valueToFind - tolerance; double max = valueToFind + tolerance; for (int i = startIndex; i < array.length; i++) { if (array[i] >= min && array[i] <= max) { return i; } } return INDEX_NOT_FOUND; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static int indexOf(Object[] array, Object objectToFind, int startIndex) { if (array == null) { return INDEX_NOT_FOUND; } if (startIndex < 0) { startIndex = 0; } if (objectToFind == null) { for (int i = startIndex; i < array.length; i++) { if (array[i] == null) { return i; } } } else if (array.getClass().getComponentType().isInstance(objectToFind)) { for (int i = startIndex; i < array.length; i++) { if (objectToFind.equals(array[i])) { return i; } } } return INDEX_NOT_FOUND; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static int lastIndexOf(byte[] array, byte valueToFind) { return lastIndexOf(array, valueToFind, Integer.MAX_VALUE); } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static short[] removeElement(short[] array, short element) { int index = indexOf(array, element); if (index == INDEX_NOT_FOUND) { return clone(array); } return remove(array, index); } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static int indexOf(int[] array, int valueToFind) { return indexOf(array, valueToFind, 0); } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static float[] removeElement(float[] array, float element) { int index = indexOf(array, element); if (index == INDEX_NOT_FOUND) { return clone(array); } return remove(array, index); } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static int indexOf(double[] array, double valueToFind, int startIndex) { if (ArrayUtils.isEmpty(array)) { return INDEX_NOT_FOUND; } if (startIndex < 0) { startIndex = 0; } for (int i = startIndex; i < array.length; i++) { if (valueToFind == array[i]) { return i; } } return INDEX_NOT_FOUND; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static int indexOf(float[] array, float valueToFind) { return indexOf(array, valueToFind, 0); } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static float[] add(float[] array, int index, float element) { return (float[]) add(array, index, Float.valueOf(element), Float.TYPE); } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static void reverse(boolean[] array) { if (array == null) { return; } int i = 0; int j = array.length - 1; boolean tmp; while (j > i) { tmp = array[j]; array[j] = array[i]; array[i] = tmp; j--; i++; } } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static long[] removeElement(long[] array, long element) { int index = indexOf(array, element); if (index == INDEX_NOT_FOUND) { return clone(array); } return remove(array, index); } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static int indexOf(char[] array, char valueToFind, int startIndex) { if (array == null) { return INDEX_NOT_FOUND; } if (startIndex < 0) { startIndex = 0; } for (int i = startIndex; i < array.length; i++) { if (valueToFind == array[i]) { return i; } } return INDEX_NOT_FOUND; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static byte[] add(byte[] array, int index, byte element) { return (byte[]) add(array, index, Byte.valueOf(element), Byte.TYPE); } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static int indexOf(byte[] array, byte valueToFind, int startIndex) { if (array == null) { return INDEX_NOT_FOUND; } if (startIndex < 0) { startIndex = 0; } for (int i = startIndex; i < array.length; i++) { if (valueToFind == array[i]) { return i; } } return INDEX_NOT_FOUND; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static boolean isSameType(Object array1, Object array2) { if (array1 == null || array2 == null) { throw new IllegalArgumentException(\"The Array must not be null\"); } return array1.getClass().getName().equals(array2.getClass().getName()); } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static boolean isEmpty(boolean[] array) { if (array == null || array.length == 0) { return true; } return false; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static byte[] remove(byte[] array, int index) { return (byte[]) remove((Object) array, index); } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static void reverse(short[] array) { if (array == null) { return; } int i = 0; int j = array.length - 1; short tmp; while (j > i) { tmp = array[j]; array[j] = array[i]; array[i] = tmp; j--; i++; } } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static void reverse(float[] array) { if (array == null) { return; } int i = 0; int j = array.length - 1; float tmp; while (j > i) { tmp = array[j]; array[j] = array[i]; array[i] = tmp; j--; i++; } } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive) { if (array == null) { return null; } if (startIndexInclusive < 0) { startIndexInclusive = 0; } if (endIndexExclusive > array.length) { endIndexExclusive = array.length; } int newSize = endIndexExclusive - startIndexInclusive; if (newSize <= 0) { return EMPTY_SHORT_ARRAY; } short[] subarray = new short[newSize]; System.arraycopy(array, startIndexInclusive, subarray, 0, newSize); return subarray; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static boolean isEmpty(float[] array) { if (array == null || array.length == 0) { return true; } return false; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static char[] addAll(char[] array1, char... array2) { if (array1 == null) { return clone(array2); } else if (array2 == null) { return clone(array1); } char[] joinedArray = new char[array1.length + array2.length]; System.arraycopy(array1, 0, joinedArray, 0, array1.length); System.arraycopy(array2, 0, joinedArray, array1.length, array2.length); return joinedArray; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static <T> T[] removeElement(T[] array, Object element) { int index = indexOf(array, element); if (index == INDEX_NOT_FOUND) { return clone(array); } return remove(array, index); } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static long[] addAll(long[] array1, long... array2) { if (array1 == null) { return clone(array2); } else if (array2 == null) { return clone(array1); } long[] joinedArray = new long[array1.length + array2.length]; System.arraycopy(array1, 0, joinedArray, 0, array1.length); System.arraycopy(array2, 0, joinedArray, array1.length, array2.length); return joinedArray; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static long[] toPrimitive(Long[] array) { if (array == null) { return null; } else if (array.length == 0) { return EMPTY_LONG_ARRAY; } final long[] result = new long[array.length]; for (int i = 0; i < array.length; i++) { result[i] = array[i].longValue(); } return result; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static byte[] clone(byte[] array) { if (array == null) { return null; } return array.clone(); } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static short[] addAll(short[] array1, short... array2) { if (array1 == null) { return clone(array2); } else if (array2 == null) { return clone(array1); } short[] joinedArray = new short[array1.length + array2.length]; System.arraycopy(array1, 0, joinedArray, 0, array1.length); System.arraycopy(array2, 0, joinedArray, array1.length, array2.length); return joinedArray; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static int indexOf(short[] array, short valueToFind, int startIndex) { if (array == null) { return INDEX_NOT_FOUND; } if (startIndex < 0) { startIndex = 0; } for (int i = startIndex; i < array.length; i++) { if (valueToFind == array[i]) { return i; } } return INDEX_NOT_FOUND; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static float[] clone(float[] array) { if (array == null) { return null; } return array.clone(); } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static int lastIndexOf(Object[] array, Object objectToFind, int startIndex) { if (array == null) { return INDEX_NOT_FOUND; } if (startIndex < 0) { return INDEX_NOT_FOUND; } else if (startIndex >= array.length) { startIndex = array.length - 1; } if (objectToFind == null) { for (int i = startIndex; i >= 0; i--) { if (array[i] == null) { return i; } } } else if (array.getClass().getComponentType().isInstance(objectToFind)) { for (int i = startIndex; i >= 0; i--) { if (objectToFind.equals(array[i])) { return i; } } } return INDEX_NOT_FOUND; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static char[] clone(char[] array) { if (array == null) { return null; } return array.clone(); } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static double[] add(double[] array, double element) { double[] newArray = (double[])copyArrayGrow1(array, Double.TYPE); newArray[newArray.length - 1] = element; return newArray; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static void reverse(int[] array) { if (array == null) { return; } int i = 0; int j = array.length - 1; int tmp; while (j > i) { tmp = array[j]; array[j] = array[i]; array[i] = tmp; j--; i++; } } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static boolean[] add(boolean[] array, boolean element) { boolean[] newArray = (boolean[])copyArrayGrow1(array, Boolean.TYPE); newArray[newArray.length - 1] = element; return newArray; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static byte[] toPrimitive(Byte[] array) { if (array == null) { return null; } else if (array.length == 0) { return EMPTY_BYTE_ARRAY; } final byte[] result = new byte[array.length]; for (int i = 0; i < array.length; i++) { result[i] = array[i].byteValue(); } return result; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static long[] remove(long[] array, int index) { return (long[]) remove((Object) array, index); } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static int[] toPrimitive(Integer[] array, int valueForNull) { if (array == null) { return null; } else if (array.length == 0) { return EMPTY_INT_ARRAY; } final int[] result = new int[array.length]; for (int i = 0; i < array.length; i++) { Integer b = array[i]; result[i] = (b == null ? valueForNull : b.intValue()); } return result; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static boolean isEmpty(char[] array) { if (array == null || array.length == 0) { return true; } return false; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static int indexOf(int[] array, int valueToFind, int startIndex) { if (array == null) { return INDEX_NOT_FOUND; } if (startIndex < 0) { startIndex = 0; } for (int i = startIndex; i < array.length; i++) { if (valueToFind == array[i]) { return i; } } return INDEX_NOT_FOUND; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static byte[] removeElement(byte[] array, byte element) { int index = indexOf(array, element); if (index == INDEX_NOT_FOUND) { return clone(array); } return remove(array, index); } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static double[] toPrimitive(Double[] array) { if (array == null) { return null; } else if (array.length == 0) { return EMPTY_DOUBLE_ARRAY; } final double[] result = new double[array.length]; for (int i = 0; i < array.length; i++) { result[i] = array[i].doubleValue(); } return result; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static boolean isSameLength(byte[] array1, byte[] array2) { if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) { return false; } return true; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static int lastIndexOf(byte[] array, byte valueToFind, int startIndex) { if (array == null) { return INDEX_NOT_FOUND; } if (startIndex < 0) { return INDEX_NOT_FOUND; } else if (startIndex >= array.length) { startIndex = array.length - 1; } for (int i = startIndex; i >= 0; i--) { if (valueToFind == array[i]) { return i; } } return INDEX_NOT_FOUND; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static short[] clone(short[] array) { if (array == null) { return null; } return array.clone(); } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static boolean isEmpty(double[] array) { if (array == null || array.length == 0) { return true; } return false; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static char[] add(char[] array, int index, char element) { return (char[]) add(array, index, Character.valueOf(element), Character.TYPE); } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static int lastIndexOf(double[] array, double valueToFind, double tolerance) { return lastIndexOf(array, valueToFind, Integer.MAX_VALUE, tolerance); } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static long[] clone(long[] array) { if (array == null) { return null; } return array.clone(); } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static void reverse(double[] array) { if (array == null) { return; } int i = 0; int j = array.length - 1; double tmp; while (j > i) { tmp = array[j]; array[j] = array[i]; array[i] = tmp; j--; i++; } } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static int lastIndexOf(float[] array, float valueToFind) { return lastIndexOf(array, valueToFind, Integer.MAX_VALUE); } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static boolean[] remove(boolean[] array, int index) { return (boolean[]) remove((Object) array, index); } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static int lastIndexOf(char[] array, char valueToFind) { return lastIndexOf(array, valueToFind, Integer.MAX_VALUE); } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static int indexOf(Object[] array, Object objectToFind) { return indexOf(array, objectToFind, 0); } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static double[] clone(double[] array) { if (array == null) { return null; } return array.clone(); } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static int lastIndexOf(boolean[] array, boolean valueToFind) { return lastIndexOf(array, valueToFind, Integer.MAX_VALUE); } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static int indexOf(long[] array, long valueToFind, int startIndex) { if (array == null) { return INDEX_NOT_FOUND; } if (startIndex < 0) { startIndex = 0; } for (int i = startIndex; i < array.length; i++) { if (valueToFind == array[i]) { return i; } } return INDEX_NOT_FOUND; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static Boolean[] toObject(boolean[] array) { if (array == null) { return null; } else if (array.length == 0) { return EMPTY_BOOLEAN_OBJECT_ARRAY; } final Boolean[] result = new Boolean[array.length]; for (int i = 0; i < array.length; i++) { result[i] = (array[i] ? Boolean.TRUE : Boolean.FALSE); } return result; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static float[] remove(float[] array, int index) { return (float[]) remove((Object) array, index); } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static int[] add(int[] array, int index, int element) { return (int[]) add(array, index, Integer.valueOf(element), Integer.TYPE); } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static int[] removeElement(int[] array, int element) { int index = indexOf(array, element); if (index == INDEX_NOT_FOUND) { return clone(array); } return remove(array, index); } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static Float[] toObject(float[] array) { if (array == null) { return null; } else if (array.length == 0) { return EMPTY_FLOAT_OBJECT_ARRAY; } final Float[] result = new Float[array.length]; for (int i = 0; i < array.length; i++) { result[i] = Float.valueOf(array[i]); } return result; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static void reverse(long[] array) { if (array == null) { return; } int i = 0; int j = array.length - 1; long tmp; while (j > i) { tmp = array[j]; array[j] = array[i]; array[i] = tmp; j--; i++; } } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static int getLength(Object array) { if (array == null) { return 0; } return Array.getLength(array); } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static char[] remove(char[] array, int index) { return (char[]) remove((Object) array, index); } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive) { if (array == null) { return null; } if (startIndexInclusive < 0) { startIndexInclusive = 0; } if (endIndexExclusive > array.length) { endIndexExclusive = array.length; } int newSize = endIndexExclusive - startIndexInclusive; if (newSize <= 0) { return EMPTY_BYTE_ARRAY; } byte[] subarray = new byte[newSize]; System.arraycopy(array, startIndexInclusive, subarray, 0, newSize); return subarray; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static int[] addAll(int[] array1, int... array2) { if (array1 == null) { return clone(array2); } else if (array2 == null) { return clone(array1); } int[] joinedArray = new int[array1.length + array2.length]; System.arraycopy(array1, 0, joinedArray, 0, array1.length); System.arraycopy(array2, 0, joinedArray, array1.length, array2.length); return joinedArray; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static void reverse(byte[] array) { if (array == null) { return; } int i = 0; int j = array.length - 1; byte tmp; while (j > i) { tmp = array[j]; array[j] = array[i]; array[i] = tmp; j--; i++; } } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static int lastIndexOf(char[] array, char valueToFind, int startIndex) { if (array == null) { return INDEX_NOT_FOUND; } if (startIndex < 0) { return INDEX_NOT_FOUND; } else if (startIndex >= array.length) { startIndex = array.length - 1; } for (int i = startIndex; i >= 0; i--) { if (valueToFind == array[i]) { return i; } } return INDEX_NOT_FOUND; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static int lastIndexOf(int[] array, int valueToFind) { return lastIndexOf(array, valueToFind, Integer.MAX_VALUE); } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static int indexOf(float[] array, float valueToFind, int startIndex) { if (ArrayUtils.isEmpty(array)) { return INDEX_NOT_FOUND; } if (startIndex < 0) { startIndex = 0; } for (int i = startIndex; i < array.length; i++) { if (valueToFind == array[i]) { return i; } } return INDEX_NOT_FOUND; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static boolean contains(Object[] array, Object objectToFind) { return indexOf(array, objectToFind) != INDEX_NOT_FOUND; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static int lastIndexOf(int[] array, int valueToFind, int startIndex) { if (array == null) { return INDEX_NOT_FOUND; } if (startIndex < 0) { return INDEX_NOT_FOUND; } else if (startIndex >= array.length) { startIndex = array.length - 1; } for (int i = startIndex; i >= 0; i--) { if (valueToFind == array[i]) { return i; } } return INDEX_NOT_FOUND; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { @SuppressWarnings(\"unchecked\") public static <T> T[] remove(T[] array, int index) { return (T[]) remove((Object) array, index); } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static int indexOf(long[] array, long valueToFind) { return indexOf(array, valueToFind, 0); } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static long[] toPrimitive(Long[] array, long valueForNull) { if (array == null) { return null; } else if (array.length == 0) { return EMPTY_LONG_ARRAY; } final long[] result = new long[array.length]; for (int i = 0; i < array.length; i++) { Long b = array[i]; result[i] = (b == null ? valueForNull : b.longValue()); } return result; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static boolean[] removeElement(boolean[] array, boolean element) { int index = indexOf(array, element); if (index == INDEX_NOT_FOUND) { return clone(array); } return remove(array, index); } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static boolean contains(double[] array, double valueToFind) { return indexOf(array, valueToFind) != INDEX_NOT_FOUND; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static boolean contains(short[] array, short valueToFind) { return indexOf(array, valueToFind) != INDEX_NOT_FOUND; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static int lastIndexOf(long[] array, long valueToFind) { return lastIndexOf(array, valueToFind, Integer.MAX_VALUE); } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static double[] removeElement(double[] array, double element) { int index = indexOf(array, element); if (index == INDEX_NOT_FOUND) { return clone(array); } return remove(array, index); } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static int lastIndexOf(double[] array, double valueToFind) { return lastIndexOf(array, valueToFind, Integer.MAX_VALUE); } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static boolean isSameLength(Object[] array1, Object[] array2) { if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) { return false; } return true; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static boolean contains(char[] array, char valueToFind) { return indexOf(array, valueToFind) != INDEX_NOT_FOUND; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive) { if (array == null) { return null; } if (startIndexInclusive < 0) { startIndexInclusive = 0; } if (endIndexExclusive > array.length) { endIndexExclusive = array.length; } int newSize = endIndexExclusive - startIndexInclusive; if (newSize <= 0) { return EMPTY_CHAR_ARRAY; } char[] subarray = new char[newSize]; System.arraycopy(array, startIndexInclusive, subarray, 0, newSize); return subarray; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static int lastIndexOf(Object[] array, Object objectToFind) { return lastIndexOf(array, objectToFind, Integer.MAX_VALUE); } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static boolean contains(long[] array, long valueToFind) { return indexOf(array, valueToFind) != INDEX_NOT_FOUND; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive) { if (array == null) { return null; } if (startIndexInclusive < 0) { startIndexInclusive = 0; } if (endIndexExclusive > array.length) { endIndexExclusive = array.length; } int newSize = endIndexExclusive - startIndexInclusive; if (newSize <= 0) { return EMPTY_INT_ARRAY; } int[] subarray = new int[newSize]; System.arraycopy(array, startIndexInclusive, subarray, 0, newSize); return subarray; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static boolean[] toPrimitive(Boolean[] array) { if (array == null) { return null; } else if (array.length == 0) { return EMPTY_BOOLEAN_ARRAY; } final boolean[] result = new boolean[array.length]; for (int i = 0; i < array.length; i++) { result[i] = array[i].booleanValue(); } return result; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static boolean isEmpty(int[] array) { if (array == null || array.length == 0) { return true; } return false; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static boolean isSameLength(float[] array1, float[] array2) { if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) { return false; } return true; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static boolean isEmpty(long[] array) { if (array == null || array.length == 0) { return true; } return false; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static <T> T[] add(T[] array, T element) { Class<?> type; if (array != null){ type = array.getClass(); } else if (element != null) { type = element.getClass(); } else { throw new IllegalArgumentException(\"Arguments cannot both be null\"); } @SuppressWarnings(\"unchecked\") T[] newArray = (T[]) copyArrayGrow1(array, type); newArray[newArray.length - 1] = element; return newArray; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static boolean contains(byte[] array, byte valueToFind) { return indexOf(array, valueToFind) != INDEX_NOT_FOUND; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static short[] toPrimitive(Short[] array, short valueForNull) { if (array == null) { return null; } else if (array.length == 0) { return EMPTY_SHORT_ARRAY; } final short[] result = new short[array.length]; for (int i = 0; i < array.length; i++) { Short b = array[i]; result[i] = (b == null ? valueForNull : b.shortValue()); } return result; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static byte[] add(byte[] array, byte element) { byte[] newArray = (byte[])copyArrayGrow1(array, Byte.TYPE); newArray[newArray.length - 1] = element; return newArray; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static boolean contains(double[] array, double valueToFind, double tolerance) { return indexOf(array, valueToFind, 0, tolerance) != INDEX_NOT_FOUND; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static float[] add(float[] array, float element) { float[] newArray = (float[])copyArrayGrow1(array, Float.TYPE); newArray[newArray.length - 1] = element; return newArray; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static int[] add(int[] array, int element) { int[] newArray = (int[])copyArrayGrow1(array, Integer.TYPE); newArray[newArray.length - 1] = element; return newArray; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static char[] removeElement(char[] array, char element) { int index = indexOf(array, element); if (index == INDEX_NOT_FOUND) { return clone(array); } return remove(array, index); } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static void reverse(char[] array) { if (array == null) { return; } int i = 0; int j = array.length - 1; char tmp; while (j > i) { tmp = array[j]; array[j] = array[i]; array[i] = tmp; j--; i++; } } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static Byte[] toObject(byte[] array) { if (array == null) { return null; } else if (array.length == 0) { return EMPTY_BYTE_OBJECT_ARRAY; } final Byte[] result = new Byte[array.length]; for (int i = 0; i < array.length; i++) { result[i] = Byte.valueOf(array[i]); } return result; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static int indexOf(char[] array, char valueToFind) { return indexOf(array, valueToFind, 0); } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static int indexOf(boolean[] array, boolean valueToFind) { return indexOf(array, valueToFind, 0); } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static boolean isSameLength(char[] array1, char[] array2) { if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) { return false; } return true; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static int indexOf(short[] array, short valueToFind) { return indexOf(array, valueToFind, 0); } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static boolean isEquals(Object array1, Object array2) { return new EqualsBuilder().append(array1, array2).isEquals(); } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static boolean[] toPrimitive(Boolean[] array, boolean valueForNull) { if (array == null) { return null; } else if (array.length == 0) { return EMPTY_BOOLEAN_ARRAY; } final boolean[] result = new boolean[array.length]; for (int i = 0; i < array.length; i++) { Boolean b = array[i]; result[i] = (b == null ? valueForNull : b.booleanValue()); } return result; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static boolean isSameLength(short[] array1, short[] array2) { if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) { return false; } return true; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static int indexOf(double[] array, double valueToFind) { return indexOf(array, valueToFind, 0); } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static int lastIndexOf(short[] array, short valueToFind, int startIndex) { if (array == null) { return INDEX_NOT_FOUND; } if (startIndex < 0) { return INDEX_NOT_FOUND; } else if (startIndex >= array.length) { startIndex = array.length - 1; } for (int i = startIndex; i >= 0; i--) { if (valueToFind == array[i]) { return i; } } return INDEX_NOT_FOUND; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static Double[] toObject(double[] array) { if (array == null) { return null; } else if (array.length == 0) { return EMPTY_DOUBLE_OBJECT_ARRAY; } final Double[] result = new Double[array.length]; for (int i = 0; i < array.length; i++) { result[i] = Double.valueOf(array[i]); } return result; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static <T> T[] toArray(final T... items) { return items; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static double[] add(double[] array, int index, double element) { return (double[]) add(array, index, Double.valueOf(element), Double.TYPE); } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static String toString(Object array) { return toString(array, \"{}\"); } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static float[] toPrimitive(Float[] array, float valueForNull) { if (array == null) { return null; } else if (array.length == 0) { return EMPTY_FLOAT_ARRAY; } final float[] result = new float[array.length]; for (int i = 0; i < array.length; i++) { Float b = array[i]; result[i] = (b == null ? valueForNull : b.floatValue()); } return result; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static float[] addAll(float[] array1, float... array2) { if (array1 == null) { return clone(array2); } else if (array2 == null) { return clone(array1); } float[] joinedArray = new float[array1.length + array2.length]; System.arraycopy(array1, 0, joinedArray, 0, array1.length); System.arraycopy(array2, 0, joinedArray, array1.length, array2.length); return joinedArray; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static boolean[] addAll(boolean[] array1, boolean... array2) { if (array1 == null) { return clone(array2); } else if (array2 == null) { return clone(array1); } boolean[] joinedArray = new boolean[array1.length + array2.length]; System.arraycopy(array1, 0, joinedArray, 0, array1.length); System.arraycopy(array2, 0, joinedArray, array1.length, array2.length); return joinedArray; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static short[] add(short[] array, short element) { short[] newArray = (short[])copyArrayGrow1(array, Short.TYPE); newArray[newArray.length - 1] = element; return newArray; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static Map<Object, Object> toMap(Object[] array) { if (array == null) { return null; } final Map<Object, Object> map = new HashMap<Object, Object>((int) (array.length * 1.5)); for (int i = 0; i < array.length; i++) { Object object = array[i]; if (object instanceof Map.Entry<?, ?>) { Map.Entry<?,?> entry = (Map.Entry<?,?>) object; map.put(entry.getKey(), entry.getValue()); } else if (object instanceof Object[]) { Object[] entry = (Object[]) object; if (entry.length < 2) { throw new IllegalArgumentException(\"Array element \" + i + \", '\" + object + \"', has a length less than 2\"); } map.put(entry[0], entry[1]); } else { throw new IllegalArgumentException(\"Array element \" + i + \", '\" + object + \"', is neither of type Map.Entry nor an Array\"); } } return map; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static boolean contains(float[] array, float valueToFind) { return indexOf(array, valueToFind) != INDEX_NOT_FOUND; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static int lastIndexOf(short[] array, short valueToFind) { return lastIndexOf(array, valueToFind, Integer.MAX_VALUE); } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static int[] toPrimitive(Integer[] array) { if (array == null) { return null; } else if (array.length == 0) { return EMPTY_INT_ARRAY; } final int[] result = new int[array.length]; for (int i = 0; i < array.length; i++) { result[i] = array[i].intValue(); } return result; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static boolean isEmpty(byte[] array) { if (array == null || array.length == 0) { return true; } return false; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static boolean isSameLength(double[] array1, double[] array2) { if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) { return false; } return true; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static short[] remove(short[] array, int index) { return (short[]) remove((Object) array, index); } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static boolean[] add(boolean[] array, int index, boolean element) { return (boolean[]) add(array, index, Boolean.valueOf(element), Boolean.TYPE); } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static boolean isEmpty(short[] array) { if (array == null || array.length == 0) { return true; } return false; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static int[] clone(int[] array) { if (array == null) { return null; } return array.clone(); } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive) { if (array == null) { return null; } if (startIndexInclusive < 0) { startIndexInclusive = 0; } if (endIndexExclusive > array.length) { endIndexExclusive = array.length; } int newSize = endIndexExclusive - startIndexInclusive; if (newSize <= 0) { return EMPTY_DOUBLE_ARRAY; } double[] subarray = new double[newSize]; System.arraycopy(array, startIndexInclusive, subarray, 0, newSize); return subarray; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static int lastIndexOf(float[] array, float valueToFind, int startIndex) { if (ArrayUtils.isEmpty(array)) { return INDEX_NOT_FOUND; } if (startIndex < 0) { return INDEX_NOT_FOUND; } else if (startIndex >= array.length) { startIndex = array.length - 1; } for (int i = startIndex; i >= 0; i--) { if (valueToFind == array[i]) { return i; } } return INDEX_NOT_FOUND; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static boolean[] clone(boolean[] array) { if (array == null) { return null; } return array.clone(); } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static int indexOf(byte[] array, byte valueToFind) { return indexOf(array, valueToFind, 0); } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static boolean isSameLength(long[] array1, long[] array2) { if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) { return false; } return true; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static int lastIndexOf(long[] array, long valueToFind, int startIndex) { if (array == null) { return INDEX_NOT_FOUND; } if (startIndex < 0) { return INDEX_NOT_FOUND; } else if (startIndex >= array.length) { startIndex = array.length - 1; } for (int i = startIndex; i >= 0; i--) { if (valueToFind == array[i]) { return i; } } return INDEX_NOT_FOUND; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive) { if (array == null) { return null; } if (startIndexInclusive < 0) { startIndexInclusive = 0; } if (endIndexExclusive > array.length) { endIndexExclusive = array.length; } int newSize = endIndexExclusive - startIndexInclusive; if (newSize <= 0) { return EMPTY_BOOLEAN_ARRAY; } boolean[] subarray = new boolean[newSize]; System.arraycopy(array, startIndexInclusive, subarray, 0, newSize); return subarray; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static boolean isSameLength(boolean[] array1, boolean[] array2) { if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) { return false; } return true; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static boolean isSameLength(int[] array1, int[] array2) { if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) { return false; } return true; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static void reverse(Object[] array) { if (array == null) { return; } int i = 0; int j = array.length - 1; Object tmp; while (j > i) { tmp = array[j]; array[j] = array[i]; array[i] = tmp; j--; i++; } } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance) { if (ArrayUtils.isEmpty(array)) { return INDEX_NOT_FOUND; } if (startIndex < 0) { return INDEX_NOT_FOUND; } else if (startIndex >= array.length) { startIndex = array.length - 1; } double min = valueToFind - tolerance; double max = valueToFind + tolerance; for (int i = startIndex; i >= 0; i--) { if (array[i] >= min && array[i] <= max) { return i; } } return INDEX_NOT_FOUND; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static double[] toPrimitive(Double[] array, double valueForNull) { if (array == null) { return null; } else if (array.length == 0) { return EMPTY_DOUBLE_ARRAY; } final double[] result = new double[array.length]; for (int i = 0; i < array.length; i++) { Double b = array[i]; result[i] = (b == null ? valueForNull : b.doubleValue()); } return result; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive) { if (array == null) { return null; } if (startIndexInclusive < 0) { startIndexInclusive = 0; } if (endIndexExclusive > array.length) { endIndexExclusive = array.length; } int newSize = endIndexExclusive - startIndexInclusive; if (newSize <= 0) { return EMPTY_LONG_ARRAY; } long[] subarray = new long[newSize]; System.arraycopy(array, startIndexInclusive, subarray, 0, newSize); return subarray; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static short[] add(short[] array, int index, short element) { return (short[]) add(array, index, Short.valueOf(element), Short.TYPE); } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static byte[] toPrimitive(Byte[] array, byte valueForNull) { if (array == null) { return null; } else if (array.length == 0) { return EMPTY_BYTE_ARRAY; } final byte[] result = new byte[array.length]; for (int i = 0; i < array.length; i++) { Byte b = array[i]; result[i] = (b == null ? valueForNull : b.byteValue()); } return result; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static boolean contains(int[] array, int valueToFind) { return indexOf(array, valueToFind) != INDEX_NOT_FOUND; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static double[] addAll(double[] array1, double... array2) { if (array1 == null) { return clone(array2); } else if (array2 == null) { return clone(array1); } double[] joinedArray = new double[array1.length + array2.length]; System.arraycopy(array1, 0, joinedArray, 0, array1.length); System.arraycopy(array2, 0, joinedArray, array1.length, array2.length); return joinedArray; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static Long[] toObject(long[] array) { if (array == null) { return null; } else if (array.length == 0) { return EMPTY_LONG_OBJECT_ARRAY; } final Long[] result = new Long[array.length]; for (int i = 0; i < array.length; i++) { result[i] = Long.valueOf(array[i]); } return result; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static float[] toPrimitive(Float[] array) { if (array == null) { return null; } else if (array.length == 0) { return EMPTY_FLOAT_ARRAY; } final float[] result = new float[array.length]; for (int i = 0; i < array.length; i++) { result[i] = array[i].floatValue(); } return result; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static int indexOf(double[] array, double valueToFind, double tolerance) { return indexOf(array, valueToFind, 0, tolerance); } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static Character[] toObject(char[] array) { if (array == null) { return null; } else if (array.length == 0) { return EMPTY_CHARACTER_OBJECT_ARRAY; } final Character[] result = new Character[array.length]; for (int i = 0; i < array.length; i++) { result[i] = Character.valueOf(array[i]); } return result; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static String toString(Object array, String stringIfNull) { if (array == null) { return stringIfNull; } return new ToStringBuilder(array, ToStringStyle.SIMPLE_STYLE).append(array).toString(); } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static int indexOf(boolean[] array, boolean valueToFind, int startIndex) { if (ArrayUtils.isEmpty(array)) { return INDEX_NOT_FOUND; } if (startIndex < 0) { startIndex = 0; } for (int i = startIndex; i < array.length; i++) { if (valueToFind == array[i]) { return i; } } return INDEX_NOT_FOUND; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static char[] add(char[] array, char element) { char[] newArray = (char[])copyArrayGrow1(array, Character.TYPE); newArray[newArray.length - 1] = element; return newArray; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex) { if (ArrayUtils.isEmpty(array)) { return INDEX_NOT_FOUND; } if (startIndex < 0) { return INDEX_NOT_FOUND; } else if (startIndex >= array.length) { startIndex = array.length - 1; } for (int i = startIndex; i >= 0; i--) { if (valueToFind == array[i]) { return i; } } return INDEX_NOT_FOUND; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static double[] remove(double[] array, int index) { return (double[]) remove((Object) array, index); } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static <T> T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive) { if (array == null) { return null; } if (startIndexInclusive < 0) { startIndexInclusive = 0; } if (endIndexExclusive > array.length) { endIndexExclusive = array.length; } int newSize = endIndexExclusive - startIndexInclusive; Class<?> type = array.getClass().getComponentType(); if (newSize <= 0) { @SuppressWarnings(\"unchecked\") final T[] emptyArray = (T[]) Array.newInstance(type, 0); return emptyArray; } @SuppressWarnings(\"unchecked\") T[] subarray = (T[]) Array.newInstance(type, newSize); System.arraycopy(array, startIndexInclusive, subarray, 0, newSize); return subarray; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static Integer[] toObject(int[] array) { if (array == null) { return null; } else if (array.length == 0) { return EMPTY_INTEGER_OBJECT_ARRAY; } final Integer[] result = new Integer[array.length]; for (int i = 0; i < array.length; i++) { result[i] = Integer.valueOf(array[i]); } return result; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static <T> boolean isEmpty(T[] array) { if (array == null || array.length == 0) { return true; } return false; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static short[] toPrimitive(Short[] array) { if (array == null) { return null; } else if (array.length == 0) { return EMPTY_SHORT_ARRAY; } final short[] result = new short[array.length]; for (int i = 0; i < array.length; i++) { result[i] = array[i].shortValue(); } return result; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static int[] remove(int[] array, int index) { return (int[]) remove((Object) array, index); } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static Short[] toObject(short[] array) { if (array == null) { return null; } else if (array.length == 0) { return EMPTY_SHORT_OBJECT_ARRAY; } final Short[] result = new Short[array.length]; for (int i = 0; i < array.length; i++) { result[i] = Short.valueOf(array[i]); } return result; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static <T> T[] addAll(T[] array1, T... array2) { if (array1 == null) { return clone(array2); } else if (array2 == null) { return clone(array1); } final Class<?> type1 = array1.getClass().getComponentType(); @SuppressWarnings(\"unchecked\") T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length); System.arraycopy(array1, 0, joinedArray, 0, array1.length); try { System.arraycopy(array2, 0, joinedArray, array1.length, array2.length); } catch (ArrayStoreException ase) { final Class<?> type2 = array2.getClass().getComponentType(); if (!type1.isAssignableFrom(type2)){ throw new IllegalArgumentException(\"Cannot store \"+type2.getName()+\" in an array of \"+type1.getName(), ase); } throw ase; } return joinedArray; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static boolean contains(boolean[] array, boolean valueToFind) { return indexOf(array, valueToFind) != INDEX_NOT_FOUND; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static char[] toPrimitive(Character[] array) { if (array == null) { return null; } else if (array.length == 0) { return EMPTY_CHAR_ARRAY; } final char[] result = new char[array.length]; for (int i = 0; i < array.length; i++) { result[i] = array[i].charValue(); } return result; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
{"method": "// Focal method:\npublic class ArrayUtils { public static <T> T[] add(T[] array, int index, T element) { Class<?> clss = null; if (array != null) { clss = array.getClass().getComponentType(); } else if (element != null) { clss = element.getClass(); } else { throw new IllegalArgumentException(\"Array and element cannot both be null\"); } @SuppressWarnings(\"unchecked\") final T[] newArray = (T[]) add(array, index, element, clss); return newArray; } ArrayUtils(); static String toString(Object array); static String toString(Object array, String stringIfNull); static boolean isEquals(Object array1, Object array2); static Map<Object, Object> toMap(Object[] array); static T[] toArray(final T... items); static T[] clone(T[] array); static long[] clone(long[] array); static int[] clone(int[] array); static short[] clone(short[] array); static char[] clone(char[] array); static byte[] clone(byte[] array); static double[] clone(double[] array); static float[] clone(float[] array); static boolean[] clone(boolean[] array); static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive); static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive); static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive); static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive); static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive); static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive); static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive); static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive); static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive); static boolean isSameLength(Object[] array1, Object[] array2); static boolean isSameLength(long[] array1, long[] array2); static boolean isSameLength(int[] array1, int[] array2); static boolean isSameLength(short[] array1, short[] array2); static boolean isSameLength(char[] array1, char[] array2); static boolean isSameLength(byte[] array1, byte[] array2); static boolean isSameLength(double[] array1, double[] array2); static boolean isSameLength(float[] array1, float[] array2); static boolean isSameLength(boolean[] array1, boolean[] array2); static int getLength(Object array); static boolean isSameType(Object array1, Object array2); static void reverse(Object[] array); static void reverse(long[] array); static void reverse(int[] array); static void reverse(short[] array); static void reverse(char[] array); static void reverse(byte[] array); static void reverse(double[] array); static void reverse(float[] array); static void reverse(boolean[] array); static int indexOf(Object[] array, Object objectToFind); static int indexOf(Object[] array, Object objectToFind, int startIndex); static int lastIndexOf(Object[] array, Object objectToFind); static int lastIndexOf(Object[] array, Object objectToFind, int startIndex); static boolean contains(Object[] array, Object objectToFind); static int indexOf(long[] array, long valueToFind); static int indexOf(long[] array, long valueToFind, int startIndex); static int lastIndexOf(long[] array, long valueToFind); static int lastIndexOf(long[] array, long valueToFind, int startIndex); static boolean contains(long[] array, long valueToFind); static int indexOf(int[] array, int valueToFind); static int indexOf(int[] array, int valueToFind, int startIndex); static int lastIndexOf(int[] array, int valueToFind); static int lastIndexOf(int[] array, int valueToFind, int startIndex); static boolean contains(int[] array, int valueToFind); static int indexOf(short[] array, short valueToFind); static int indexOf(short[] array, short valueToFind, int startIndex); static int lastIndexOf(short[] array, short valueToFind); static int lastIndexOf(short[] array, short valueToFind, int startIndex); static boolean contains(short[] array, short valueToFind); static int indexOf(char[] array, char valueToFind); static int indexOf(char[] array, char valueToFind, int startIndex); static int lastIndexOf(char[] array, char valueToFind); static int lastIndexOf(char[] array, char valueToFind, int startIndex); static boolean contains(char[] array, char valueToFind); static int indexOf(byte[] array, byte valueToFind); static int indexOf(byte[] array, byte valueToFind, int startIndex); static int lastIndexOf(byte[] array, byte valueToFind); static int lastIndexOf(byte[] array, byte valueToFind, int startIndex); static boolean contains(byte[] array, byte valueToFind); static int indexOf(double[] array, double valueToFind); static int indexOf(double[] array, double valueToFind, double tolerance); static int indexOf(double[] array, double valueToFind, int startIndex); static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance); static int lastIndexOf(double[] array, double valueToFind); static int lastIndexOf(double[] array, double valueToFind, double tolerance); static int lastIndexOf(double[] array, double valueToFind, int startIndex); static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance); static boolean contains(double[] array, double valueToFind); static boolean contains(double[] array, double valueToFind, double tolerance); static int indexOf(float[] array, float valueToFind); static int indexOf(float[] array, float valueToFind, int startIndex); static int lastIndexOf(float[] array, float valueToFind); static int lastIndexOf(float[] array, float valueToFind, int startIndex); static boolean contains(float[] array, float valueToFind); static int indexOf(boolean[] array, boolean valueToFind); static int indexOf(boolean[] array, boolean valueToFind, int startIndex); static int lastIndexOf(boolean[] array, boolean valueToFind); static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex); static boolean contains(boolean[] array, boolean valueToFind); static char[] toPrimitive(Character[] array); static char[] toPrimitive(Character[] array, char valueForNull); static Character[] toObject(char[] array); static long[] toPrimitive(Long[] array); static long[] toPrimitive(Long[] array, long valueForNull); static Long[] toObject(long[] array); static int[] toPrimitive(Integer[] array); static int[] toPrimitive(Integer[] array, int valueForNull); static Integer[] toObject(int[] array); static short[] toPrimitive(Short[] array); static short[] toPrimitive(Short[] array, short valueForNull); static Short[] toObject(short[] array); static byte[] toPrimitive(Byte[] array); static byte[] toPrimitive(Byte[] array, byte valueForNull); static Byte[] toObject(byte[] array); static double[] toPrimitive(Double[] array); static double[] toPrimitive(Double[] array, double valueForNull); static Double[] toObject(double[] array); static float[] toPrimitive(Float[] array); static float[] toPrimitive(Float[] array, float valueForNull); static Float[] toObject(float[] array); static boolean[] toPrimitive(Boolean[] array); static boolean[] toPrimitive(Boolean[] array, boolean valueForNull); static Boolean[] toObject(boolean[] array); static boolean isEmpty(T[] array); static boolean isEmpty(long[] array); static boolean isEmpty(int[] array); static boolean isEmpty(short[] array); static boolean isEmpty(char[] array); static boolean isEmpty(byte[] array); static boolean isEmpty(double[] array); static boolean isEmpty(float[] array); static boolean isEmpty(boolean[] array); static T[] addAll(T[] array1, T... array2); static boolean[] addAll(boolean[] array1, boolean... array2); static char[] addAll(char[] array1, char... array2); static byte[] addAll(byte[] array1, byte... array2); static short[] addAll(short[] array1, short... array2); static int[] addAll(int[] array1, int... array2); static long[] addAll(long[] array1, long... array2); static float[] addAll(float[] array1, float... array2); static double[] addAll(double[] array1, double... array2); static T[] add(T[] array, T element); static boolean[] add(boolean[] array, boolean element); static byte[] add(byte[] array, byte element); static char[] add(char[] array, char element); static double[] add(double[] array, double element); static float[] add(float[] array, float element); static int[] add(int[] array, int element); static long[] add(long[] array, long element); static short[] add(short[] array, short element); static T[] add(T[] array, int index, T element); static boolean[] add(boolean[] array, int index, boolean element); static char[] add(char[] array, int index, char element); static byte[] add(byte[] array, int index, byte element); static short[] add(short[] array, int index, short element); static int[] add(int[] array, int index, int element); static long[] add(long[] array, int index, long element); static float[] add(float[] array, int index, float element); static double[] add(double[] array, int index, double element); @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input static T[] remove(T[] array, int index); static T[] removeElement(T[] array, Object element); static boolean[] remove(boolean[] array, int index); static boolean[] removeElement(boolean[] array, boolean element); static byte[] remove(byte[] array, int index); static byte[] removeElement(byte[] array, byte element); static char[] remove(char[] array, int index); static char[] removeElement(char[] array, char element); static double[] remove(double[] array, int index); static double[] removeElement(double[] array, double element); static float[] remove(float[] array, int index); static float[] removeElement(float[] array, float element); static int[] remove(int[] array, int index); static int[] removeElement(int[] array, int element); static long[] remove(long[] array, int index); static long[] removeElement(long[] array, long element); static short[] remove(short[] array, int index); static short[] removeElement(short[] array, short element); static final Object[] EMPTY_OBJECT_ARRAY; static final Class<?>[] EMPTY_CLASS_ARRAY; static final String[] EMPTY_STRING_ARRAY; static final long[] EMPTY_LONG_ARRAY; static final Long[] EMPTY_LONG_OBJECT_ARRAY; static final int[] EMPTY_INT_ARRAY; static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY; static final short[] EMPTY_SHORT_ARRAY; static final Short[] EMPTY_SHORT_OBJECT_ARRAY; static final byte[] EMPTY_BYTE_ARRAY; static final Byte[] EMPTY_BYTE_OBJECT_ARRAY; static final double[] EMPTY_DOUBLE_ARRAY; static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY; static final float[] EMPTY_FLOAT_ARRAY; static final Float[] EMPTY_FLOAT_OBJECT_ARRAY; static final boolean[] EMPTY_BOOLEAN_ARRAY; static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY; static final char[] EMPTY_CHAR_ARRAY; static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY; static final int INDEX_NOT_FOUND; }\n", "projects": [{"project": "Lang", "id": 35}]}
